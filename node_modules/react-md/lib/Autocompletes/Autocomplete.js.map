{"version":3,"sources":["../../src/js/Autocompletes/Autocomplete.js"],"names":["Autocomplete","props","defaultValue","data","dataLabel","filter","matches","state","value","visible","matchIndex","manualFocus","suggestion","suggestionIndex","nextProps","nextValue","dataDiff","focus","length","setState","nextState","menuFn","tabbed","suggestionStyle","fullWidth","block","style","className","listStyle","listClassName","textFieldStyle","textFieldClassName","inlineSuggestionStyle","inlineSuggestionClassName","menuId","inline","anchor","belowAnchor","position","fixedTo","listId","listInline","listZDepth","listHeightRestricted","xThreshold","yThreshold","closeOnOutsideClick","transitionName","transitionEnterTimeout","transitionLeaveTimeout","centered","sameWidth","repositionOnScroll","repositionOnResize","simplifiedMenu","minLeft","minRight","minBottom","fillViewportWidth","fillViewportHeight","propValue","total","offset","dataValue","deleteKeys","clearOnAutocomplete","autocompleteWithLabel","findInlineSuggestion","inlineSuggestionPadding","onAutocomplete","onMenuOpen","onMenuClose","onBlur","onFocus","onKeyDown","onMouseDown","onChange","focusInputOnAutocomplete","autocomplete","_setField","_handleTextFieldKeyDown","_toggleMenu","_handleChange","_handleFocus","_handleBlur","label","_handleTouchStart","id","_setMenu","_handleClick","_close","_handleMenuKeyDown","map","_mapToListItem","HorizontalAnchors","VerticalAnchors","Positions","fuzzyFilter","caseInsensitiveFilter","findIgnoreCase","propTypes","oneOfType","number","string","object","inputStyle","inputClassName","disabled","bool","node","isRequired","arrayOf","propName","component","others","element","shape","func","autoComplete","oneOf","toolbar","defaultProps","BELOW","e","event","_findInlineSuggestions","target","_handleInlineAutocomplete","v","key","which","keyCode","preventDefault","_focusSuggestion","_menu","contains","classList","items","parentNode","querySelectorAll","Array","prototype","slice","call","_handleItemClick","indexOf","index","isValidElement","m","callback","_field","negative","l","Math","min","item","Error","some","datum","i","d","dataum","toString","substring","width","left","match","primaryText","field","getField","menu"],"mappings":"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","file":"Autocomplete.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { findDOMNode } from 'react-dom';\nimport CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup';\nimport cn from 'classnames';\n\nimport getField from '../utils/getField';\nimport omit from '../utils/omit';\nimport findIgnoreCase from '../utils/findIgnoreCase';\nimport fuzzyFilter from '../utils/fuzzyFilter';\nimport caseInsensitiveFilter from '../utils/caseInsensitiveFilter';\nimport getTextWidth from '../utils/Positioning/getTextWidth';\nimport oneRequiredForA11y from '../utils/PropTypes/oneRequiredForA11y';\nimport controlled from '../utils/PropTypes/controlled';\nimport invalidIf from '../utils/PropTypes/invalidIf';\nimport { UP, DOWN, TAB } from '../constants/keyCodes';\nimport anchorShape from '../Helpers/anchorShape';\nimport fixedToShape from '../Helpers/fixedToShape';\nimport positionShape from '../Helpers/positionShape';\n\nimport ListItem from '../Lists/ListItem';\nimport Menu from '../Menus/Menu';\nimport TextField from '../TextFields/TextField';\n\n/**\n * The `Autocomplete` component is useful for presenting real-time suggestions, completions,\n * or filtering.\n */\nexport default class Autocomplete extends PureComponent {\n  static HorizontalAnchors = Menu.HorizontalAnchors;\n  static VerticalAnchors = Menu.VerticalAnchors;\n  static Positions = Menu.Positions;\n  static fuzzyFilter = fuzzyFilter;\n  static caseInsensitiveFilter = caseInsensitiveFilter;\n  static findIgnoreCase = findIgnoreCase;\n  static propTypes = {\n    /**\n     * An id to give the autocomplete. Either this or the `menuId` is required for accessibility.\n     *\n     * @see {@link #menuId}\n     */\n    id: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * The menu id to provide to the autocomplete. Either this prop or the `id` prop is required. If\n     * this props is omitted, the menuId will become: `${id}-menu`\n     */\n    menuId: oneRequiredForA11y(PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]), 'id'),\n\n    /**\n     * An optional id to provide to the menu's list.\n     *\n     * @see {@link Menus/Menu#listId}\n     */\n    listId: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * An optional style to apply to the menu that contains the autocomplete.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply to the menu that contains the autocomplete.\n     */\n    className: PropTypes.string,\n\n    /**\n     * An optional style to apply to the autocomplete's text field.\n     */\n    textFieldStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the autocomplete's text field.\n     */\n    textFieldClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to the autocomplete's text field input itself.\n     */\n    inputStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the autocomplete's input field itself.\n     */\n    inputClassName: PropTypes.string,\n\n    /**\n     * The optional style to apply to the opened menu List if the\n     * `Autocomplete` is not using `inline` suggestions.\n     */\n    listStyle: PropTypes.object,\n\n    /**\n     * The optional className to apply to the opened menu List if the\n     * `Autocomplete` is not using `inline` suggestions.\n     */\n    listClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to the inline suggestion when using `inline` mode.\n     */\n    inlineSuggestionStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the inline suggestion when using `inline` mode.\n     */\n    inlineSuggestionClassName: PropTypes.string,\n\n    /**\n     * Boolean if the autocomplete is disabled.\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * A label to display with the autocomplete.\n     */\n    label: PropTypes.node,\n\n    /**\n     * An optional value to use for the text field. This will force this component\n     * to be controlled and require the `onChange` function.\n     */\n    value: controlled(PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]), 'onChange'),\n\n    /**\n     * The default value for the autocomplete's text field.\n     */\n    defaultValue: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n\n    /**\n     * An object key to use to extract the text to be compared for filtering.\n     * This will only be applied if the given `data` prop is an array of objects.\n     */\n    dataLabel: PropTypes.string.isRequired,\n\n    /**\n     * An optional object key to use to extract the `value` of the given `data` prop.\n     * This is really only used with generating a unique react key. The unique react\n     * key with either be:\n     * - the datum if it is a string or number\n     * - the `key` attribute of the datum object\n     * - the `datum[dataValue]`\n     * - or the `datum[dataLabel]`\n     */\n    dataValue: PropTypes.string,\n\n    /**\n     * A single key or an array of keys to delete from your data object before passing\n     * to the `ListItem` component.\n     */\n    deleteKeys: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.arrayOf(PropTypes.string),\n    ]),\n\n    /**\n     * The data that will be used for autocomplete suggestions. This can either be\n     * an array of string, number, or object. If it is an array of objects, the key\n     * `dataLabel` is required.\n     *\n     * ```docgen\n     * PropTypes.arrayOf(PropTypes.oneOfType([\n     *   PropTypes.element,\n     *   PropTypes.string,\n     *   PropTypes.number,\n     *   PropTypes.shape({\n     *     [dataLabel]: PropTypes.oneOfType([\n     *       PropTypes.string,\n     *       PropTypes.number,\n     *       PropTypes.node,\n     *     ]).isRequired,\n     *   }),\n     * ])).isRequired\n     * ```\n     */\n    data: (props, propName, component, ...others) => {\n      const { dataLabel } = props;\n      return PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.element,\n        PropTypes.string,\n        PropTypes.number,\n        PropTypes.shape({\n          [dataLabel]: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.number,\n            PropTypes.node,\n          ]).isRequired,\n        }),\n      ])).isRequired(props, propName, component, ...others);\n    },\n\n    /**\n     * An optional number representing the total number of results in the `data` prop.\n     * This should really only be used when the data is paginated. When this is set,\n     * each item in the suggestion menu will be updated with the `aria-setsize` and\n     * `aria-posinset`.\n     *\n     * @see {@link #offset}\n     */\n    total: invalidIf(PropTypes.number, 'inline'),\n\n    /**\n     * An optional number representing the data's offset if the results were paginated.\n     * This is used for accessibility with the `aria-posinset` attribute.\n     *\n     * @see {@link #total}\n     */\n    offset: PropTypes.number.isRequired,\n\n    /**\n     * An optional function to use to filter the `data`. If you have a sexy backend\n     * using solr or some other search/indexer, it is recommended to set this prop to\n     * `null`.\n     */\n    filter: PropTypes.func,\n\n    /**\n     * An optional function to call when the `Autocomplete`'s text field has a `keydown` event.\n     */\n    onKeyDown: PropTypes.func,\n\n    /**\n     * An optional function to call when the `Autocomplete`'s text field has a `mousedown` event.\n     */\n    onMouseDown: PropTypes.func,\n\n    /**\n     * An optional function to call when the `Autocomplete`'s text field value changes.\n     * The callback will be given the new value and the change event.\n     *\n     * `onChange(textFeldValue, event)`\n     */\n    onChange: PropTypes.func,\n\n    /**\n     * An optional function to call when the `Autocomplete`'s text field is focused.\n     */\n    onFocus: PropTypes.func,\n\n    /**\n     * An optional function to call when the entire `Autocomplete` component is blurred.\n     * This will be triggered when the window is clicked or when a user tabs away from\n     * the autocomplete.\n     */\n    onBlur: PropTypes.func,\n\n    /**\n     * Boolean if this text field should be styled as a full width text field.\n     * Floating labels and the text field indicator will be removed automatically.\n     */\n    block: PropTypes.bool,\n\n    /**\n     * Boolean if the autocomplete should span the entire width.\n     */\n    fullWidth: PropTypes.bool,\n\n    /**\n     * Boolean if the `Autocomplete` should display suggestions inline instead\n     * of in a `Menu`.\n     */\n    inline: PropTypes.bool,\n\n    /**\n     * The amount of padding to use between the current text and the inline suggestion text.\n     */\n    inlineSuggestionPadding: PropTypes.number.isRequired,\n\n    /**\n     * The function to call to find a suggestion for an inline autocomplete. This function\n     * expects to return a single result of a number or a string.\n     *\n     * ```js\n     * @param {Array<Object|String|Number>} data - The data prop to search.\n     * @param {String} value - The current value to use for searching.\n     * @param {String} dataLabel - The `dataLabel` prop to use if a datum is an object.\n     * @return {String|Number} the found suggestion or false-ish\n     * ```\n     */\n    findInlineSuggestion: PropTypes.func,\n\n    /**\n     * An optional function to call when an autocomplete suggestion is clicked either\n     * by using the mouse, the enter/space key, or touch. The match index and current\n     * `dataLabel` will be given back.\n     *\n     * `onAutocomplete(suggestion, suggestionIndex, matches);`\n     *\n     * @see {@link #autocompleteWithLabel}\n     */\n    onAutocomplete: PropTypes.func,\n\n    /**\n     * Boolean if the `onAutocomplete` should attempt send the `suggestion[dataLabel]` instead\n     * of `suggestion[dataValue]` when the data is an object.\n     *\n     * @see {@link #onAutocomplete}\n     */\n    autocompleteWithLabel: PropTypes.bool,\n\n    /**\n     * A boolean if the text field's value should be reset to the empty string when\n     * an item is auto-completed. This is useful if you do not want a fully controlled\n     * component and the values are stored outside of the `TextField`. (like `Chips`).\n     */\n    clearOnAutocomplete: PropTypes.bool,\n\n    /**\n     * An optional function to call when the `Autocomplete` suggestion menu opens.\n     */\n    onMenuOpen: PropTypes.func,\n\n    /**\n     * An optional function to call when the `Autocomplete` suggestion menu closes.\n     */\n    onMenuClose: PropTypes.func,\n\n    /**\n     * This prop is used for disabling the browser's default autocomplete suggestions\n     * of previously typed values in the text field. By default, this is disabled.\n     */\n    autoComplete: PropTypes.oneOf(['on', 'off']),\n\n    /**\n     * Boolean if the `input` should be focused again after a suggestion was clicked.\n     *\n     * This is really only added for keyboard support and the fact that each of suggestions\n     * are focusable.\n     */\n    focusInputOnAutocomplete: PropTypes.bool,\n\n    /**\n     * This is how the menu's `List` gets anchored to the `toggle` element.\n     *\n     * @see {@link Helpers/Layover#anchor}\n     */\n    anchor: anchorShape,\n\n    /**\n     * This is the anchor to use when the `position` is set to `Autocomplete.Positions.BELOW`.\n     *\n     * @see {@link Helpers/Layover#belowAnchor}\n     */\n    belowAnchor: anchorShape,\n\n    /**\n     * This is the animation position for the list that appears.\n     *\n     * @see {@link Helpers/Layover#animationPosition}\n     */\n    position: positionShape,\n\n    /**\n     * This is how the menu's list will be \"fixed\" to the `toggle` component.\n     *\n     * @see {@link Helpers/Layover#fixedTo}\n     */\n    fixedTo: fixedToShape,\n\n    /**\n     * Boolean if the menu's list should appear horizontally instead of vertically.\n     */\n    listInline: PropTypes.bool,\n\n    /**\n     * The list's z-depth for applying box shadow. This should be a number from 0 to 5.\n     */\n    listZDepth: PropTypes.number,\n\n    /**\n     * Boolean if the list should have its height restricted to the `$md-menu-mobile-max-height`/\n     * `$md-menu-desktop-max-height` values.\n     *\n     * @see [md-menu-mobile-max-height](/components/menus?tab=2#variable-md-menu-mobile-max-height)\n     * @see [md-menu-desktop-max-height](/components/menus?tab=2#variable-md-menu-desktop-max-height)\n     */\n    listHeightRestricted: PropTypes.bool,\n\n    /**\n     * @see {@link Helpers/Layover#xThreshold}\n     */\n    xThreshold: PropTypes.number,\n\n    /**\n     * @see {@link Helpers/Layover#yThreshold}\n     */\n    yThreshold: PropTypes.number,\n\n    /**\n     * @see {@link Helpers/Layover#closeOnOutsideClick}\n     */\n    closeOnOutsideClick: PropTypes.bool,\n\n    /**\n     * An optional transition name to use for the list appearing/disappearing.\n     *\n     * @see {@link Helpers/Layover#transitionName}\n     */\n    transitionName: PropTypes.string,\n\n    /**\n     * @see {@link Helpers/Layover#transitionEnterTimeout}\n     */\n    transitionEnterTimeout: PropTypes.number,\n\n    /**\n     * @see {@link Helpers/Layover#transitionLeaveTimeout}\n     */\n    transitionLeaveTimeout: PropTypes.number,\n\n    /**\n     * @see {@link Helpers/Layover#centered}\n     */\n    centered: Menu.propTypes.centered,\n\n    /**\n     * @see {@link Helpers/Layover#sameWidth}\n     */\n    sameWidth: Menu.propTypes.sameWidth,\n\n    /**\n     * Boolean if the menu should automatically try to reposition itself to stay within\n     * the viewport when the `fixedTo` element scrolls.\n     *\n     * @see {@link Helpers/Layover#repositionOnScroll}\n     */\n    repositionOnScroll: PropTypes.bool,\n\n    /**\n     * Boolean if the menu should automatically try to reposition itself to stay within\n     * the viewport when the window resizes.\n     *\n     * @see {@link Helpers/Layover#repositionOnResize}\n     */\n    repositionOnResize: PropTypes.bool,\n\n    /**\n     * Boolean if the menu logic should be simplified without any viewport logic and position\n     * based on the relative position of the menu. This will most like require some additional\n     * styles applied to the menu.\n     *\n     * @see {@link Helpers/Layover#simplified}\n     */\n    simplifiedMenu: PropTypes.bool,\n\n    /**\n     * @see {@link Helpers/Layover#minLeft}\n     */\n    minLeft: PropTypes.number,\n\n    /**\n     * @see {@link Helpers/Layover#minRight}\n     */\n    minRight: PropTypes.number,\n\n    /**\n     * @see {@link Helpers/Layover#minBottom}\n     */\n    minBottom: PropTypes.number,\n\n    /**\n     * @see {@link Helpers/Layover#fillViewportWidth}\n     */\n    fillViewportWidth: PropTypes.bool,\n\n    /**\n     * @see {@link Helpers/Layover#fillViewportHeight}\n     */\n    fillViewportHeight: PropTypes.bool,\n\n    /**\n     * @see {@link TextFields#toolbar}\n     */\n    toolbar: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    autocompleteWithLabel: false,\n    position: Menu.Positions.BELOW,\n    sameWidth: true,\n    offset: 0,\n    fullWidth: true,\n    defaultValue: '',\n    dataLabel: 'primaryText',\n    filter: Autocomplete.fuzzyFilter,\n    findInlineSuggestion: Autocomplete.findIgnoreCase,\n    autoComplete: 'off',\n    repositionOnScroll: true,\n    repositionOnResize: true,\n    inlineSuggestionPadding: 6,\n  };\n\n  constructor(props) {\n    super(props);\n\n    const {\n      defaultValue,\n      data,\n      dataLabel,\n      filter,\n    } = props;\n\n    let matches = [];\n    if (defaultValue && filter) {\n      matches = filter(data, defaultValue, dataLabel);\n    } else if (!filter) {\n      matches = data;\n    }\n\n    this.state = {\n      value: defaultValue,\n      matches,\n      visible: false,\n      matchIndex: -1,\n      manualFocus: false,\n      suggestion: '',\n      suggestionIndex: -1,\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { value: nextValue, data, filter, dataLabel } = nextProps;\n    const dataDiff = data !== this.props.data;\n    if (nextValue !== this.props.value || dataDiff) {\n      let { visible, matches } = this.state;\n      const value = getField(nextProps, this.state, 'value');\n\n      if (filter) {\n        matches = filter(data, value, dataLabel);\n      } else if (dataDiff) {\n        matches = data;\n      }\n\n      if (this.state.focus) {\n        visible = !!matches.length;\n      }\n\n      this.setState({ matches, visible });\n    }\n  }\n\n  componentWillUpdate(nextProps, nextState) {\n    if (this.state.visible !== nextState.visible) {\n      const menuFn = nextProps[`onMenu${nextState.visible ? 'Open' : 'Close'}`];\n      if (menuFn) {\n        menuFn();\n      }\n    }\n  }\n\n  /**\n   * Gets the current value from the text field. This is used when you have an uncontrolled\n   * text field and simply need the value from a ref callback.\n   *\n   * @return {String} the text field's value\n   */\n  get value() {\n    return getField(this.props, this.state, 'value');\n  }\n\n  _close = (e) => {\n    if (this.props.onBlur) {\n      this.props.onBlur(e);\n    }\n\n    this.setState({ visible: false });\n  };\n\n  _handleChange = (value, event) => {\n    const { onChange, filter, findInlineSuggestion, data, dataLabel, inline } = this.props;\n\n    if (onChange) {\n      onChange(value, event);\n    }\n\n    if (inline) {\n      // If findInlineSuggestion does not exist, assume that `onChange` will handle it.\n      return findInlineSuggestion ? this._findInlineSuggestions(value) : null;\n    }\n\n    let { visible } = this.state;\n    let matches = value || !filter ? this.state.matches : [];\n    if (value && filter) {\n      matches = filter(data, value, dataLabel);\n    }\n\n    if (filter) {\n      visible = !!matches.length;\n    }\n\n    return this.setState({ matches, visible, value });\n  }\n\n  _handleFocus = (e) => {\n    if (this.props.onFocus) {\n      this.props.onFocus(e);\n    }\n\n    const { value } = e.target;\n    if (this.props.inline && value) {\n      if (this.props.findInlineSuggestion) {\n        this._findInlineSuggestions(value);\n      }\n\n      return;\n    }\n\n    this.setState({\n      matchIndex: -1,\n      visible: !this.state.manualFocus && !!value && !!this.state.matches.length,\n      manualFocus: false,\n      focus: true,\n    });\n  };\n\n  _handleBlur = (e) => {\n    if (this.props.inline || !this.state.matches.length) {\n      if (this.props.onBlur) {\n        this.props.onBlur(e);\n      }\n    }\n\n    this.setState({ focus: false });\n  };\n\n  _handleInlineAutocomplete = () => {\n    const { suggestionIndex, matches } = this.state;\n    if (suggestionIndex === -1) {\n      return;\n    }\n\n    const {\n      data,\n      dataLabel,\n      dataValue,\n      autocompleteWithLabel: label,\n      onAutocomplete,\n    } = this.props;\n\n    let value = data[suggestionIndex];\n    if (onAutocomplete) {\n      let v = value;\n      if (typeof value === 'object') {\n        if (!label) {\n          v = value[dataValue];\n        } else {\n          v = value[dataLabel];\n        }\n      }\n\n      onAutocomplete(v, suggestionIndex, matches);\n    }\n\n    if (typeof value === 'object') {\n      value = value[dataLabel];\n    }\n\n    this.setState({\n      value,\n      suggestion: '',\n      suggestionIndex: -1,\n      tabbed: true,\n    });\n  };\n\n  _handleTextFieldKeyDown = (e) => {\n    const { inline, onKeyDown } = this.props;\n    const { suggestionIndex } = this.state;\n\n    const key = e.which || e.keyCode;\n    if (onKeyDown) {\n      onKeyDown(e);\n    }\n\n    if (inline && key === TAB && suggestionIndex !== -1) { // Autocomplete the text field\n      e.preventDefault();\n      this._handleInlineAutocomplete();\n    }\n  };\n\n  _handleMenuKeyDown = (e) => {\n    const key = e.which || e.keyCode;\n    if (key === TAB) {\n      if (this.props.onBlur) {\n        this.props.onBlur(e);\n      }\n\n      this.setState({ visible: false });\n    } else if (key === UP || key === DOWN) {\n      this._focusSuggestion(key === UP, e);\n    }\n  };\n\n  /**\n   * Just check if the click target is in a list item.. if it is, autocomplete the text field\n   * with that item.\n   */\n  _handleClick = (e) => {\n    let target = e.target;\n    while (this._menu && this._menu.contains(target)) {\n      if (target.classList.contains('md-list-item')) {\n        let items = target.parentNode.querySelectorAll('.md-list-item');\n        items = Array.prototype.slice.call(items);\n\n        return this._handleItemClick(items.indexOf(target));\n      }\n\n      target = target.parentNode;\n    }\n\n    return null;\n  };\n\n  _handleItemClick = (index) => {\n    if (index === -1) { return; }\n\n    const { matches } = this.state;\n    const {\n      data,\n      dataLabel,\n      dataValue,\n      filter,\n      onAutocomplete,\n      clearOnAutocomplete,\n      focusInputOnAutocomplete,\n      autocompleteWithLabel: label,\n    } = this.props;\n\n    let value = matches.filter(m => !React.isValidElement(m))[index];\n    if (onAutocomplete) {\n      let v = value;\n      if (typeof v === 'object') {\n        if (!label) {\n          v = value[dataValue];\n        } else {\n          v = value[dataLabel];\n        }\n      }\n\n      onAutocomplete(v, index, matches);\n    }\n\n    if (typeof value === 'object') {\n      value = value[dataLabel];\n    }\n\n    value = clearOnAutocomplete ? '' : value;\n    let callback;\n    if (focusInputOnAutocomplete) {\n      callback = () => {\n        this._field.focus();\n      };\n    }\n\n    this.setState({\n      visible: false,\n      manualFocus: focusInputOnAutocomplete,\n      matches: filter ? filter(data, value, dataLabel) : matches,\n      value,\n    }, callback);\n  };\n\n  _focusSuggestion = (negative, e) => {\n    e.preventDefault();\n    const { matchIndex, matches } = this.state;\n    const l = matches.length;\n\n    let index;\n    if (negative && matchIndex === -1 || !negative && matchIndex >= l) {\n      return;\n    } else if (negative) {\n      index = matchIndex - 1;\n      if (index === -1) {\n        this._field.focus();\n      }\n    } else {\n      index = Math.min(l, matchIndex + 1);\n    }\n\n    if (index !== -1 && index !== matchIndex) {\n      const item = this._menu.querySelectorAll('.md-list-tile')[index];\n      if (item) {\n        item.focus();\n      }\n    }\n\n    this.setState({ matchIndex: index });\n  };\n\n  _findInlineSuggestions = (value) => {\n    const { data, dataLabel, findInlineSuggestion, inlineSuggestionPadding } = this.props;\n\n    let suggestion = findInlineSuggestion(data, value, dataLabel);\n    if (typeof suggestion === 'object') {\n      throw new Error(\n        '`findInlineSuggestion` should return a string or a number, but got an object.',\n        suggestion\n      );\n    }\n\n    let { suggestionStyle } = this.state;\n    let suggestionIndex = -1;\n    if (suggestion) {\n      // Find index of suggestion\n      data.some((datum, i) => {\n        const d = typeof dataum === 'object' ? datum[dataLabel] : datum;\n        if (d === suggestion) {\n          suggestionIndex = i;\n        }\n\n        return suggestionIndex !== -1;\n      });\n\n      // Strip already used letters\n      suggestion = suggestion.toString().substring(value.length, suggestion.length);\n\n      // Position the inline suggestion next to the text\n      let width = getTextWidth(value, this._field);\n      if (width !== null) {\n        width += inlineSuggestionPadding;\n      }\n\n      if (width !== null && (!suggestionStyle || suggestionStyle.left !== width)) {\n        suggestionStyle = { left: width };\n      }\n    }\n\n    this.setState({\n      value,\n      suggestion,\n      suggestionIndex,\n      suggestionStyle,\n      tabbed: false,\n      focus: true,\n    });\n  };\n\n  _mapToListItem = (match, i) => {\n    if (React.isValidElement(match)) { return match; }\n\n    const { dataLabel, dataValue, deleteKeys, total, offset, data } = this.props;\n    let props;\n    switch (typeof match) {\n      case 'string':\n      case 'number':\n        props = {\n          key: match,\n          primaryText: match,\n        };\n        break;\n      default:\n        if (deleteKeys) {\n          props = omit(match, typeof deleteKeys === 'string' ? [deleteKeys] : deleteKeys);\n        } else {\n          props = match;\n        }\n\n        props = {\n          ...props,\n          key: match.key || (dataValue && match[dataValue]) || match[dataLabel],\n          primaryText: match[dataLabel],\n        };\n    }\n\n    if (typeof total !== 'undefined' && data.length < total) {\n      props['aria-setsize'] = total;\n      props['aria-posinset'] = i + 1 + offset;\n    }\n\n    // Allows focus, but does not let tab focus. This is so up and down keys work.\n    return <ListItem tabIndex={-1} {...props} />;\n  };\n\n  /**\n   * The `mousedown` event is used instead of `click` because of the order\n   * of the `mousedown`, `focus`, and `click` events.\n   */\n  _toggleMenu = (e) => {\n    if (this.props.onMouseDown) {\n      this.props.onMouseDown(e);\n    }\n\n    if (!this.props.inline && this.state.matches.length && getField(this.props, this.state, 'value')) {\n      this.setState({ visible: !this.state.visible });\n    }\n  };\n\n  /**\n   * Allows touch devices to autocomplete the inline view by tapping:\n   * - the suggestion text\n   * - the text field IF there is a suggestion visible\n   */\n  _handleTouchStart = (e) => {\n    const { target } = e;\n    const { suggestion } = this.state;\n    if (target.classList.contains('md-autocomplete-suggestion') && suggestion) {\n      this._handleInlineAutocomplete();\n    }\n  };\n\n  _setField = (field) => {\n    if (field) {\n      this._field = field.getField();\n    }\n  };\n\n  _setMenu = (menu) => {\n    this._menu = findDOMNode(menu);\n  };\n\n  render() {\n    const { visible, matches, tabbed, focus, suggestionStyle } = this.state;\n    const {\n      fullWidth,\n      block,\n      style,\n      className,\n      listStyle,\n      listClassName,\n      textFieldStyle,\n      textFieldClassName,\n      inlineSuggestionStyle,\n      inlineSuggestionClassName,\n      menuId,\n      inline,\n      anchor,\n      belowAnchor,\n      position,\n      fixedTo,\n      listId,\n      listInline,\n      listZDepth,\n      listHeightRestricted,\n      xThreshold,\n      yThreshold,\n      closeOnOutsideClick,\n      transitionName,\n      transitionEnterTimeout,\n      transitionLeaveTimeout,\n      centered,\n      sameWidth,\n      repositionOnScroll,\n      repositionOnResize,\n      simplifiedMenu,\n      minLeft,\n      minRight,\n      minBottom,\n      fillViewportWidth,\n      fillViewportHeight,\n      /* eslint-disable no-unused-vars */\n      value: propValue,\n      total,\n      offset,\n      filter,\n      data,\n      dataLabel,\n      dataValue,\n      deleteKeys,\n      defaultValue,\n      clearOnAutocomplete,\n      autocompleteWithLabel,\n      findInlineSuggestion,\n      inlineSuggestionPadding,\n      onAutocomplete,\n      onMenuOpen,\n      onMenuClose,\n      onBlur,\n      onFocus,\n      onKeyDown,\n      onMouseDown,\n      onChange,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n    delete props.focusInputOnAutocomplete;\n\n    const value = getField(this.props, this.state, 'value');\n\n    const autocomplete = (\n      <TextField\n        {...props}\n        aria-autocomplete={inline ? 'inline' : 'list'}\n        style={textFieldStyle}\n        className={cn('md-autocomplete', textFieldClassName)}\n        key=\"autocomplete\"\n        ref={this._setField}\n        value={value}\n        onKeyDown={this._handleTextFieldKeyDown}\n        onMouseDown={this._toggleMenu}\n        onChange={this._handleChange}\n        onFocus={this._handleFocus}\n        onBlur={this._handleBlur}\n        fullWidth={fullWidth}\n        block={block}\n      />\n    );\n\n    if (inline) {\n      let suggestion;\n      if (focus && this.state.suggestion) {\n        suggestion = (\n          <span\n            key=\"suggestion\"\n            style={{ ...suggestionStyle, ...inlineSuggestionStyle }}\n            className={cn('md-autocomplete-suggestion', {\n              'md-autocomplete-suggestion--floating': props.label,\n              'md-autocomplete-suggestion--block': block,\n            }, inlineSuggestionClassName)}\n          >\n            {this.state.suggestion}\n          </span>\n        );\n      }\n\n      return (\n        <CSSTransitionGroup\n          component=\"div\"\n          style={style}\n          className={cn('md-menu-container md-autocomplete-container', className, {\n            'md-full-width': fullWidth || block,\n          })}\n          transitionName=\"opacity\"\n          transitionEnterTimeout={150}\n          transitionLeave={!tabbed}\n          transitionLeaveTimeout={150}\n          onTouchStart={this._handleTouchStart}\n        >\n          {autocomplete}\n          {suggestion}\n        </CSSTransitionGroup>\n      );\n    }\n\n    return (\n      <Menu\n        id={menuId || `${props.id}-menu`}\n        listId={listId}\n        ref={this._setMenu}\n        toggle={autocomplete}\n        visible={visible}\n        onClick={this._handleClick}\n        onClose={this._close}\n        onKeyDown={this._handleMenuKeyDown}\n        simplified={simplifiedMenu}\n        sameWidth={sameWidth}\n        centered={centered}\n        anchor={anchor}\n        belowAnchor={belowAnchor}\n        position={position}\n        fixedTo={fixedTo}\n        listInline={listInline}\n        listZDepth={listZDepth}\n        listHeightRestricted={listHeightRestricted}\n        xThreshold={xThreshold}\n        yThreshold={yThreshold}\n        closeOnOutsideClick={closeOnOutsideClick}\n        transitionName={transitionName}\n        transitionEnterTimeout={transitionEnterTimeout}\n        transitionLeaveTimeout={transitionLeaveTimeout}\n        fullWidth={fullWidth || block}\n        style={style}\n        className={cn('md-autocomplete-container', className)}\n        listStyle={listStyle}\n        listClassName={cn('md-autocomplete-list', listClassName)}\n        repositionOnScroll={repositionOnScroll}\n        repositionOnResize={repositionOnResize}\n        minLeft={minLeft}\n        minRight={minRight}\n        minBottom={minBottom}\n        fillViewportWidth={fillViewportWidth}\n        fillViewportHeight={fillViewportHeight}\n      >\n        {matches.map(this._mapToListItem)}\n      </Menu>\n    );\n  }\n}\n"]}