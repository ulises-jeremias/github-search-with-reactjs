{"version":3,"sources":["../../src/js/Avatars/Avatar.js"],"names":["Avatar","state","color","_setRandomColor","suffixes","props","i","Math","floor","random","length","setState","nextProps","src","icon","suffix","className","alt","children","iconSized","role","_getColor","propTypes","string","node","bool","arrayOf","oneOf","defaultProps"],"mappings":"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","file":"Avatar.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nimport oneRequiredForA11yIf from '../utils/PropTypes/oneRequiredForA11yIf';\n\n/**\n * The avatar component is used to convert a `FontIcon`, an image, or\n * a letter into an avatar.\n *\n * Any other props given to the Avatar component such as event listeners\n * or styles will also be applied.\n */\nexport default class Avatar extends PureComponent {\n  static propTypes = {\n    /**\n     * An optional className to apply to the avatar.\n     */\n    className: PropTypes.string,\n\n    /**\n     * An optional image source to use for the avatar.\n     */\n    src: oneRequiredForA11yIf(PropTypes.string, 'role', 'alt'),\n\n    /**\n     * An optional image alt to use for the avatar if it is\n     * an image.\n     */\n    alt: PropTypes.string,\n\n    /**\n     * An optional `FontIcon` to convert into an avatar.\n     */\n    icon: PropTypes.node,\n\n    /**\n     * An optional letter to display in the avatar.\n     */\n    children: PropTypes.node,\n\n    /**\n     * A boolean if a random color should be applied to the avatar.\n     * This will be one of the `suffixes`.\n     */\n    random: PropTypes.bool,\n\n    /**\n     * A list of available suffixes to use when generating a random\n     * color for the avatar.\n     */\n    suffixes: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * The suffix to use for a color. This can be any value but\n     * *should* be one of the available `suffixes`.\n     */\n    suffix: PropTypes.string,\n\n    /**\n     * Boolean if the `Avatar` should be sized to a `FontIcon` size. This\n     * will just set the width and height to the `$md-font-icon-size`.\n     */\n    iconSized: PropTypes.bool,\n\n    /**\n     * A role for the avatar's image. When the `src` prop is set, either a `role` of `presentation`\n     * or the `alt` prop must be defined for a11y.\n     */\n    role: PropTypes.oneOf(['presentation']),\n  };\n\n  static defaultProps = {\n    suffixes: [\n      'red',\n      'pink',\n      'purple',\n      'deep-purple',\n      'indigo',\n      'blue',\n      'light-blue',\n      'cyan',\n      'teal',\n      'green',\n      'light-green',\n      'lime',\n      'yellow',\n      'amber',\n      'orange',\n      'deep-orange',\n      'brown',\n      'grey',\n      'blue-grey',\n    ],\n  };\n\n  state = { color: null };\n\n  componentWillMount() {\n    if (this.props.random) {\n      this._setRandomColor();\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.random && (this.props.src !== nextProps.src || this.props.icon !== nextProps.icon)) {\n      this._setRandomColor();\n    } else if (this.props.random && !nextProps.random) {\n      this.setState({ color: null });\n    }\n  }\n\n  _setRandomColor = () => {\n    const { suffixes } = this.props;\n\n    const i = (Math.floor(Math.random() * (suffixes.length - 1)) + 1);\n    this.setState({ color: suffixes[i] });\n  };\n\n  _getColor(suffix, suffixes, color) {\n    if (suffix) {\n      return `md-avatar--${suffix}`;\n    } else if (!!suffixes && !color) {\n      return 'md-avatar--default';\n    }\n\n    return `md-avatar--${color}`;\n  }\n\n  render() {\n    const {\n      className,\n      src,\n      alt,\n      icon,\n      children,\n      suffix,\n      suffixes,\n      iconSized,\n      role,\n      random, // eslint-disable-line no-unused-vars\n      ...props\n    } = this.props;\n\n    return (\n      <div\n        {...props}\n        className={cn('md-inline-block md-avatar', this._getColor(suffix, suffixes, this.state.color), {\n          'md-avatar--icon-sized': iconSized,\n        }, className)}\n      >\n        {src && <img src={src} alt={alt} role={role} className=\"md-avatar-img\" />}\n        {!src &&\n          <div className=\"md-avatar-content\">\n            {icon || children}\n          </div>\n        }\n      </div>\n    );\n  }\n}\n"]}