{"version":3,"sources":["../../src/js/Chips/Chip.js"],"names":["Chip","state","hover","_handleMouseEnter","e","props","onMouseEnter","setState","_handleMouseLeave","onMouseLeave","label","className","avatar","children","removable","remove","onClick","rotateIcon","iconClassName","removeIconChildren","removeIconClassName","icon","chipIconCN","isValidElement","Children","only","cloneElement","propTypes","style","object","string","bool","node","isRequired","element","func","defaultProps"],"mappings":"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","file":"Chip.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport deprecated from 'react-prop-types/lib/deprecated';\n\nimport FontIcon from '../FontIcons/FontIcon';\n\nexport default class Chip extends PureComponent {\n  static propTypes = {\n    /**\n     * An optional style to apply.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply.\n     */\n    className: PropTypes.string,\n\n    /**\n     * Boolean if the `.md-chip-icon--rotate` style should be applied to the remove icon.\n     * The `.md-chip-icon--rotate` just rotates the icon 45 degrees.\n     */\n    rotateIcon: PropTypes.bool,\n\n    /**\n     * Any children used to display the remove icon when `removable`.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The label to display on the chip.\n     */\n    label: PropTypes.node.isRequired,\n\n    /**\n     * Boolean if the chip is removable.\n     */\n    removable: PropTypes.bool,\n\n    /**\n     * An optional avatar to display on the chip.\n     */\n    avatar: PropTypes.element,\n\n    /**\n     * An optional function to call when the `click` event is triggered.\n     */\n    onClick: PropTypes.func,\n\n    /**\n     * An optional function to call when the `mouseenter` event is triggered.\n     */\n    onMouseEnter: PropTypes.func,\n\n    /**\n     * An optional function to call when the `mouseleave` event is triggered.\n     */\n    onMouseLeave: PropTypes.func,\n\n    iconClassName: deprecated(PropTypes.string, 'Use the `children` prop as a single FontIcon or SVGIcon instead'),\n    remove: deprecated(PropTypes.func, 'Use `removable` and `onClick` instead'),\n    removeIconChildren: deprecated(PropTypes.node, 'Use `children` instead'),\n    removeIconClassName: deprecated(PropTypes.string, 'Use `children` prop as a single FontIcon or SVGIcon instead'),\n  };\n\n  static defaultProps = {\n    rotateIcon: true,\n    children: <FontIcon>add_circle</FontIcon>,\n  };\n\n  state = { hover: false };\n\n  _handleMouseEnter = (e) => {\n    if (this.props.onMouseEnter) {\n      this.props.onMouseEnter(e);\n    }\n\n    this.setState({ hover: true });\n  };\n\n  _handleMouseLeave = (e) => {\n    if (this.props.onMouseLeave) {\n      this.props.onMouseLeave(e);\n    }\n\n    this.setState({ hover: false });\n  };\n\n  render() {\n    const { hover } = this.state;\n    const {\n      label,\n      className,\n      avatar,\n      children,\n      removable,\n      remove,\n      onClick,\n      rotateIcon,\n\n      /* eslint-disable no-unused-vars */\n      // deprecated\n      iconClassName,\n      removeIconChildren,\n      removeIconClassName,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n\n    let icon;\n    if (removable || remove) {\n      const chipIconCN = cn('md-chip-icon', {\n        'md-chip-icon--rotate': rotateIcon,\n        'md-chip-text--hover': hover,\n      });\n\n      if (React.isValidElement(children)) {\n        icon = React.Children.only(children);\n        icon = React.cloneElement(icon, { className: cn(chipIconCN, icon.props.className) });\n      } else {\n        icon = (\n          <FontIcon className={chipIconCN} iconClassName={iconClassName}>\n            {children}\n          </FontIcon>\n        );\n      }\n    }\n\n    return (\n      <button\n        type=\"button\"\n        {...props}\n        className={cn('md-chip', {\n          'md-chip--avatar': avatar,\n          'md-chip--remove': removable,\n          'md-chip--hover': hover,\n        }, className)}\n        onClick={remove || onClick}\n        onMouseEnter={this._handleMouseEnter}\n        onMouseLeave={this._handleMouseLeave}\n      >\n        {avatar}\n        <span\n          className={cn('md-chip-text', {\n            'md-chip-text--hover': hover,\n          })}\n        >\n          {label}\n        </span>\n        {icon}\n      </button>\n    );\n  }\n}\n"]}