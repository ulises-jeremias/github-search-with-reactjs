{"version":3,"sources":["../../src/js/DataTables/EditDialogColumn.js"],"names":["EditDialogColumn","props","state","visible","value","defaultValue","cancelValue","actions","_makeActions","cellIndex","undefined","_column","_table","_fixedTo","columns","slice","call","parentNode","querySelectorAll","setState","indexOf","nextProps","okLabel","okPrimary","okSecondary","cancelLabel","cancelPrimary","cancelSecondary","rowId","context","style","className","layoverStyle","layoverClassName","dialogStyle","dialogClassName","dialogContentStyle","dialogContentClassName","dialogZDepth","textFieldStyle","textFieldClassName","inputClassName","large","title","inline","inlineIcon","maxLength","label","placeholder","header","anchor","belowAnchor","fixedTo","animationPosition","xThreshold","yThreshold","centered","sameWidth","repositionOnScroll","repositionOnResize","transitionName","transitionEnterTimeout","transitionLeaveTimeout","tooltipLabel","tooltipDelay","tooltipPosition","onClick","onMouseDown","onMouseUp","onTouchStart","onTouchEnd","onMouseEnter","onMouseOver","onMouseLeave","onTouchMove","simplifiedDialog","minLeft","minRight","minBottom","noIcon","inlineIconChildren","inlineIconClassName","propId","id","propDialogId","dialogId","propCellIndex","onOkClick","onCancelClick","okOnOutsideClick","adjusted","scrollIntoView","scrollIntoViewPadding","visibleOnFocus","scrollThreshold","enforceMinWidth","transitionDuration","inlineEditIcon","cloneElement","key","numeric","type","field","_setField","hint","_handleFocus","_handleChange","_handleKeyDown","children","dialogLabel","_handleOpen","_handleClose","VerticalAnchors","HorizontalAnchors","Positions","propTypes","oneOfType","number","string","object","isRequired","inputStyle","disabled","bool","element","onChange","func","onFocus","onKeyDown","node","onOutsideClick","closeOnOutsideClick","oneOf","defaultProps","BELOW","contextTypes","_field","_handleCancel","primary","secondary","_handleOk","e","_skipNextOpen","vp","scrollLeft","offsetLeft","target","which","keyCode","shiftKey"],"mappings":"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","file":"EditDialogColumn.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { findDOMNode } from 'react-dom';\nimport cn from 'classnames';\nimport deprecated from 'react-prop-types/lib/deprecated';\n\nimport { ENTER, ESC, TAB } from '../constants/keyCodes';\nimport getField from '../utils/getField';\nimport themeColors from '../utils/themeColors';\nimport viewport from '../utils/Positioning/viewport';\nimport controlled from '../utils/PropTypes/controlled';\nimport anchorShape from '../Helpers/anchorShape';\nimport fixedToShape from '../Helpers/fixedToShape';\nimport positionShape from '../Helpers/positionShape';\nimport Layover from '../Helpers/Layover';\nimport FontIcon from '../FontIcons/FontIcon';\nimport getDeprecatedIcon from '../FontIcons/getDeprecatedIcon';\nimport TextField from '../TextFields/TextField';\nimport TableColumn from './TableColumn';\nimport EditDialog from './EditDialog';\nimport findTable from './findTable';\nimport findFixedTo from './findFixedTo';\n\n/**\n * The `EditDialogColumn` is used when there should be used when a table column's value\n * can be changed. It can either be displayed as a dialog or inline.\n *\n * All props that are not documented but provided will be passed on to the `TextField`\n * component.\n */\nexport default class EditDialogColumn extends PureComponent {\n  static VerticalAnchors = Layover.VerticalAnchors;\n  static HorizontalAnchors = Layover.HorizontalAnchors;\n  static Positions = Layover.Positions;\n\n  static propTypes = {\n    /**\n     * An optional id to use for the text field in the column. If this is omitted,\n     * the id will be `${dialogId}-field`.\n     *\n     * @see {@link #dialogId}\n     */\n    id: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * An optional id to use for the dialog that appears in the column. If this is omitted,\n     * the id will be `${rowId}-${cellIndex}-edit-dialog-field`.\n     */\n    dialogId: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * The optional style to apply to the edit dialog's column.\n     */\n    style: PropTypes.object,\n\n    /**\n     * The optional className to apply to the edit dialog's column.\n     */\n    className: PropTypes.string,\n\n    /**\n     * An optional style to apply to the dialog's surrounding `Layover` component.\n     */\n    layoverStyle: PropTypes.object,\n\n    /**\n     * An optional className to the dialog's surrounding `Layover` component.\n     */\n    layoverClassName: PropTypes.string,\n\n    /**\n     * The optional style to apply to the edit dialog.\n     */\n    dialogStyle: PropTypes.object,\n\n    /**\n     * The optional className to apply to the edit dialog.\n     */\n    dialogClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to the dialog's content area. This is the area\n     * that holds the text field.\n     */\n    dialogContentStyle: PropTypes.object,\n\n    /**\n     * An optional class name to apply to the dialog's content area. This is the area\n     * that holds the text field.\n     */\n    dialogContentClassName: PropTypes.string,\n\n    /**\n     * The zDepth to apply to the dialog when not inline.\n     *\n     * @see {@link Papers/Paper#zDepth}\n     */\n    dialogZDepth: PropTypes.number.isRequired,\n\n    /**\n     * An optional style to apply to the text field.\n     */\n    textFieldStyle: PropTypes.object,\n\n    /**\n     * An optional class name to apply to the text field.\n     */\n    textFieldClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to the text field's input.\n     */\n    inputStyle: PropTypes.object,\n\n    /**\n     * An optional class name to apply to the text field's input.\n     */\n    inputClassName: PropTypes.string,\n\n    /**\n     * Boolean if the edit dialog is currently disabled.\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * Boolean if the text field should be editable inline instead of in a dialog.\n     *\n     * @see {@link #inlineIcon}\n     */\n    inline: PropTypes.bool,\n\n    /**\n     * An optional icon to set for the inline edit dialog column. Setting this prop to null\n     * will not render an icon.\n     */\n    inlineIcon: PropTypes.element,\n\n    /**\n     * The default value to use for the text field.\n     */\n    defaultValue: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]).isRequired,\n\n    /**\n     * A value to use for the edit dialog text field. This will make the component controlled\n     * so you will need to provide an `onChange` function.\n     */\n    value: controlled(PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ])),\n\n    /**\n     * An optional function to call when the text field's value has changed. This is required\n     * if the `value` prop has been defined.\n     *\n     * @see {@link TextFields/TextField#onChange}\n     */\n    onChange: PropTypes.func,\n\n    /**\n     * An optional function to call when the text field gains focus.\n     */\n    onFocus: PropTypes.func,\n\n    /**\n     * An optional function to call when the keydown event is triggered on the text field.\n     */\n    onKeyDown: PropTypes.func,\n\n    /**\n     * An optional label for the text field. When displaying an `inline` edit dialog column,\n     * the `placeholder` prop should be used instead. This is because the text field changes\n     * to the `block` type when `inline`.\n     *\n     * @see {@link #inline}\n     * @see {@link #placeholder}\n     * @see {@link TextFields/TextField#block}\n     */\n    label: PropTypes.node,\n\n    /**\n     * An optional placeholder for the text field.\n     */\n    placeholder: PropTypes.string,\n\n    /**\n     * Boolean if the edit dialog should become a large dialog. When the dialog is large,\n     * the `title` prop is required.\n     *\n     * A large dialog has a Title followed by the text field, and then a cancel and ok action\n     * buttons below.\n     */\n    large: PropTypes.bool,\n\n    /**\n     * The title to use for the large edit dialog. This prop is required if the `large` prop\n     * is enabled.\n     */\n    title: PropTypes.node,\n\n    /**\n     * An optional `maxLength` to apply to the text field.\n     *\n     * @see {@link TextFields/TextField#maxLength}\n     */\n    maxLength: PropTypes.number,\n\n    /**\n     * An optional function to call when the \"Ok\" button has been clicked. This\n     * is only valid if the edit dialog is `large`.\n     *\n     * The callback will include the current value and the click or keypress event.\n     * ```js\n     * onOkClick(value, event)\n     * ```\n     *\n     * @see {@link #large}\n     */\n    onOkClick: PropTypes.func,\n\n    /**\n     * The label to use for the \"Ok\" button in large dialogs.\n     *\n     * @see {@link #large}\n     */\n    okLabel: PropTypes.node.isRequired,\n\n    /**\n     * Boolean if the \"Ok\" button in large dialogs should be styled with the primary color.\n     * To get a `default` styled button, set both `okPrimary` and `okSecondary` (or omit `okSecondary`)\n     * to `false`.\n     *\n     * @see {@link #large}\n     * @see {@link #okSecondary}\n     */\n    okPrimary: PropTypes.bool,\n\n    /**\n     * Boolean if the \"Ok\" button in large dialogs should be styled with the secondary color.\n     *\n     * @see {@link #large}\n     * @see {@link #okPrimary}\n     */\n    okSecondary: PropTypes.bool,\n\n    /**\n     * An optional function to call when the \"Cancel\" button has been clicked in large edit dialogs.\n     * The callback will include the text field's value before any edits occurred and the click event.\n     *\n     * ```js\n     * onCancelClick(previousValue, event)\n     * ```\n     *\n     * @see {@link #large}\n     */\n    onCancelClick: PropTypes.func,\n\n    /**\n     * The label to give to the \"Cancel\" button in large edit dialogs.\n     *\n     * @see {@link #large}\n     */\n    cancelLabel: PropTypes.node.isRequired,\n\n    /**\n     * Boolean if the \"Cancel\" button in large dialogs should be styled with the primary color.\n     * To get a `default` styled button, set both `cancelPrimary` and `cancelSecondary` (or\n     * omit `cancelSecondary`) to `false`.\n     *\n     * @see {@link #large}\n     * @see {@link #cancelSecondary}\n     */\n    cancelPrimary: PropTypes.bool,\n\n    /**\n     * Boolean if the \"Cancel\" button in large dialogs should be styled with the secondary color.\n     *\n     * @see {@link #large}\n     * @see {@link #cancelPrimary}\n     */\n    cancelSecondary: PropTypes.bool,\n\n    /**\n     * Boolean if the action for clicking somewhere on on the page while the dialog is open\n     * saves the changes or cancels to the previous value before opening the dialog.\n     *\n     * @see {@link #onOkClick}\n     * @see {@link #onCancelClick}\n     */\n    okOnOutsideClick: PropTypes.bool,\n\n    /**\n     * An optional function to call when a user clicks out of the text field.\n     */\n    onOutsideClick: PropTypes.func,\n\n    /**\n     * Boolean if the edit dialog should be closed if the user clicks somewhere else on the page\n     * while the dialog is open.\n     */\n    closeOnOutsideClick: PropTypes.bool,\n\n    /**\n     * Boolean if the edit dialog should automatically open when the text field is focused for non-inline\n     * dialogs. This is enabled by default for backwards compatibility.\n     */\n    visibleOnFocus: PropTypes.bool,\n\n    /**\n     * The type for the text field in the edit dialog.\n     *\n     * @see {@link TextFields/TextField#type}\n     */\n    type: PropTypes.string,\n\n    /**\n     * This is how the dialog gets \"anchored\" to the table column.\n     *\n     * @see {@link Helpers/Layover#anchor}\n     */\n    anchor: anchorShape,\n\n    /**\n     * This is the anchor to use when the `position` is set to `Autocomplete.Positions.BELOW`.\n     *\n     * @see {@link Helpers/Layover#belowAnchor}\n     */\n    belowAnchor: anchorShape,\n\n    /**\n     * This is the animation position to use for the dialog.\n     *\n     * @see {@link Helpers/Layover#animationPosition}\n     */\n    animationPosition: positionShape,\n\n    /**\n     * This is how the dialog should be fixed within the table. When this is omitted, it will\n     * automatically use the responsive table as the fixture so that the dialog will close/adjust itself\n     * to the scrolling of the table.\n     *\n     * @see {@link Helpers/Layover#fixedTo}\n     */\n    fixedTo: fixedToShape,\n\n    /**\n     * @see {@link Helpers/Layover#xThreshold}\n     */\n    xThreshold: PropTypes.number,\n\n    /**\n     * @see {@link Helpers/Layover#yThreshold}\n     */\n    yThreshold: PropTypes.number,\n\n    /**\n     * @see {@link Helpers/Layover#centered}\n     */\n    centered: PropTypes.bool,\n\n    /**\n     * @see {@link Helpers/Layover#sameWidth}\n     */\n    sameWidth: PropTypes.bool,\n\n    /**\n     * @see {@link Helpers/Layover#transitionName}\n     */\n    transitionName: PropTypes.string,\n\n    /**\n     * @see {@link Helpers/Layover#transitionEnterTimeout}\n     */\n    transitionEnterTimeout: PropTypes.number,\n\n    /**\n     * @see {@link Helpers/Layover#transitionLeaveTimeout}\n     */\n    transitionLeaveTimeout: PropTypes.number,\n\n    /**\n     * The optional tooltip to render on hover.\n     */\n    tooltipLabel: PropTypes.node,\n\n    /**\n     * An optional delay to apply to the tooltip before it appears.\n     */\n    tooltipDelay: PropTypes.number,\n\n    /**\n     * The position of the tooltip.\n     */\n    tooltipPosition: PropTypes.oneOf(['top', 'right', 'bottom', 'left']),\n\n    /**\n     * Boolean if the menu should automatically try to reposition itself to stay within\n     * the viewport when the `fixedTo` element scrolls.\n     *\n     * @see {@link Helpers/Layover#repositionOnScroll}\n     */\n    repositionOnScroll: PropTypes.bool,\n\n    /**\n     * Boolean if the menu should automatically try to reposition itself to stay within\n     * the viewport when the window resizes.\n     *\n     * @see {@link Helpers/Layover#repositionOnResize}\n     */\n    repositionOnResize: PropTypes.bool,\n\n    /**\n     * Boolean if the dialog logic should be simplified without any viewport logic and position\n     * based on the relative position of the menu. This will most like require some additional\n     * styles applied to the dialog.\n     *\n     * @see {@link Helpers/Layover#simplified}\n     */\n    simplifiedDialog: PropTypes.bool,\n\n    /**\n     * @see {@link Helpers/Layover#minLeft}\n     */\n    minLeft: Layover.propTypes.minLeft,\n\n    /**\n     * @see {@link Helpers/Layover#minRight}\n     */\n    minRight: Layover.propTypes.minLeft,\n\n    /**\n     * @see {@link Helpers/Layover#minBottom}\n     */\n    minBottom: Layover.propTypes.minBottom,\n\n    /**\n     * Boolean if the edit dialog should attempt to scroll into view if the full\n     * dialog can not be displayed in the viewport when it was toggled open.\n     *\n     * @see {@link #scrollIntoViewPadding}\n     */\n    scrollIntoView: PropTypes.bool,\n\n    /**\n     * The amount of padding that should be applied when the cell is scrolled into view.\n     * This will be applied to the left of the cell.\n     */\n    scrollIntoViewPadding: PropTypes.number,\n\n    /**\n     * An optional function to call when the `click` event is triggered in the column.\n     */\n    onClick: PropTypes.func,\n\n    /**\n     * An optional function to call when the `mousedown` event is triggered in the column.\n     */\n    onMouseDown: PropTypes.func,\n\n    /**\n     * An optional function to call when the `mouseup` event is triggered in the column.\n     */\n    onMouseUp: PropTypes.func,\n\n    /**\n     * An optional function to call when the `touchstart` event is triggered in the column.\n     */\n    onTouchStart: PropTypes.func,\n\n    /**\n     * An optional function to call when the `touchend` event is triggered in the column.\n     */\n    onTouchEnd: PropTypes.func,\n\n    /**\n     * An optional function to call when the `mouseenter` event is triggered in the column.\n     */\n    onMouseEnter: PropTypes.func,\n\n    /**\n     * An optional function to call when the `mouseover` event is triggered in the column.\n     */\n    onMouseOver: PropTypes.func,\n\n    /**\n     * An optional function to call when the `mouseleave` event is triggered in the column.\n     */\n    onMouseLeave: PropTypes.func,\n\n    /**\n     * An optional function to call when the `touchmove` event is triggered in the column.\n     */\n    onTouchMove: PropTypes.func,\n\n    /**\n     * This is injected by the `TableRow` component.\n     * @access private\n     */\n    header: PropTypes.bool,\n\n    /**\n     * This is injected by the `TableRow` component and used to help generate the unique id for the text\n     * field.\n     *\n     * @access private\n     */\n    cellIndex: PropTypes.number,\n\n    /**\n     * @access private\n     */\n    adjusted: PropTypes.bool,\n\n    inlineIconChildren: deprecated(PropTypes.node, 'Use the `inlineIcon` prop instead'),\n    inlineIconClassName: deprecated(PropTypes.string, 'Use the `inlineIcon` prop instead'),\n    noIcon: deprecated(PropTypes.bool, 'Set the `inlineIcon` prop to `null` instead'),\n    enforceMinWidth: deprecated(\n      PropTypes.bool,\n      'The min width will always be enforced based on the `$md-edit-dialog-min-width` Sass variable.'\n    ),\n    scrollThreshold: deprecated(\n      PropTypes.number,\n      'Use `xThreshold` and `yThreshold` instead'\n    ),\n    transitionDuration: deprecated(\n      PropTypes.number,\n      'use `transitionEnterTimeout` and `transitionLeaveTimeout` instead'\n    ),\n  };\n\n  static defaultProps = {\n    type: 'text',\n    defaultValue: '',\n    okOnOutsideClick: true,\n    inlineIcon: <FontIcon>edit</FontIcon>,\n    okLabel: 'Save',\n    okPrimary: true,\n    cancelLabel: 'Cancel',\n    cancelPrimary: true,\n    animationPosition: EditDialogColumn.Positions.BELOW,\n    dialogZDepth: 1,\n    repositionOnScroll: true,\n    repositionOnResize: false,\n    scrollIntoView: true,\n    scrollIntoViewPadding: 16,\n    minLeft: 0,\n    minRight: 0,\n    minBottom: 0,\n    visibleOnFocus: true,\n  };\n\n  static contextTypes = {\n    rowId: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      visible: false,\n      value: props.defaultValue,\n      cancelValue: props.defaultValue,\n      actions: this._makeActions(props),\n      cellIndex: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this._column = findDOMNode(this);\n    this._table = findTable(this._column);\n    this._fixedTo = findFixedTo(this._table);\n\n    // If a developer creates their own component to wrap the EditDialogColumn, the cellIndex prop\n    // might not be defined if they don't pass ...props\n    const { cellIndex } = this.props;\n    if (!cellIndex && cellIndex !== 0) {\n      const columns = [].slice.call(this._column.parentNode.querySelectorAll('th,td'));\n      this.setState({ cellIndex: columns.indexOf(this._column) }); // eslint-disable-line react/no-did-mount-set-state\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { okLabel, okPrimary, okSecondary, cancelLabel, cancelPrimary, cancelSecondary } = this.props;\n    if (okLabel !== nextProps.okLabel || okPrimary !== nextProps.okPrimary\n      || okSecondary !== nextProps.okSecondary || cancelLabel !== nextProps.cancelLabel\n      || cancelPrimary !== nextProps.cancelPrimary || cancelSecondary !== nextProps.cancelSecondary\n    ) {\n      this.setState({ actions: this._makeActions(nextProps) });\n    }\n  }\n\n  _setField = (field) => {\n    this._field = field;\n  };\n\n  _makeActions = (props) => {\n    const {\n      okLabel,\n      okPrimary,\n      okSecondary,\n      cancelLabel,\n      cancelPrimary,\n      cancelSecondary,\n    } = props;\n\n    return [{\n      key: 'cancel',\n      children: cancelLabel,\n      onClick: this._handleCancel,\n      primary: cancelPrimary && !cancelSecondary,\n      secondary: cancelSecondary,\n    }, {\n      key: 'ok',\n      children: okLabel,\n      onClick: this._handleOk,\n      primary: okPrimary && !okSecondary,\n      secondary: okSecondary,\n    }];\n  };\n\n  _handleOpen = (e) => {\n    if (this._skipNextOpen) {\n      this._skipNextOpen = false;\n    } else if (this.props.visibleOnFocus || !e || e.type !== 'focus') {\n      const { scrollIntoView, scrollIntoViewPadding } = this.props;\n      if (scrollIntoView) {\n        const vp = viewport(this._column);\n        if (vp !== true && this._table && this._column && !this.props.inline) {\n          this._table.scrollLeft = this._column.offsetLeft - scrollIntoViewPadding;\n        }\n      }\n\n      this.setState({ visible: true, cancelValue: getField(this.props, this.state, 'value') });\n    }\n  };\n\n  _handleClose = (e) => {\n    const { onOutsideClick, okOnOutsideClick } = this.props;\n    if (onOutsideClick) {\n      onOutsideClick(e);\n    }\n\n    if (okOnOutsideClick) {\n      this._handleOk(e);\n    } else {\n      this._handleCancel(e);\n    }\n  };\n\n  _handleChange = (value, e) => {\n    if (this.props.onChange) {\n      this.props.onChange(value, e);\n    }\n\n    if (typeof this.props.value === 'undefined') {\n      this.setState({ value });\n    }\n  };\n\n  _handleFocus = (e) => {\n    if (this.props.onFocus) {\n      this.props.onFocus(e);\n    }\n\n    if (this.props.inline) {\n      this.setState({ cancelValue: e.target.value });\n    }\n  };\n\n  _handleKeyDown = (e) => {\n    const { onKeyDown, okOnOutsideClick, large } = this.props;\n    if (onKeyDown) {\n      onKeyDown(e);\n    }\n\n    const key = e.which || e.keyCode;\n    if (key === ENTER) {\n      this._handleOk(e);\n    } else if (key === ESC) {\n      this._handleCancel(e);\n    } else if (key === TAB && !large) {\n      // infinitely opens otherwise...\n      this._skipNextOpen = e.shiftKey;\n\n      if (okOnOutsideClick) {\n        this._handleOk(e);\n      } else {\n        this._handleCancel(e);\n      }\n    }\n  };\n\n  _handleOk = (e) => {\n    if (this.props.onOkClick) {\n      this.props.onOkClick(getField(this.props, this.state, 'value'), e);\n    }\n\n    this.setState({ visible: false });\n  };\n\n  _handleCancel = (e) => {\n    const value = this.state.cancelValue;\n    if (this.props.onCancelClick) {\n      this.props.onCancelClick(value, e);\n    }\n\n    const state = { visible: false };\n    if (typeof this.props.value === 'undefined') {\n      state.value = value;\n    }\n\n    this.setState(state);\n  };\n\n  render() {\n    const { rowId } = this.context;\n    const {\n      style,\n      className,\n      layoverStyle,\n      layoverClassName,\n      dialogStyle,\n      dialogClassName,\n      dialogContentStyle,\n      dialogContentClassName,\n      dialogZDepth,\n      textFieldStyle,\n      textFieldClassName,\n      inputClassName,\n      large,\n      title,\n      inline,\n      inlineIcon,\n      maxLength,\n      label,\n      placeholder,\n      header,\n      anchor,\n      belowAnchor,\n      fixedTo,\n      animationPosition,\n      xThreshold,\n      yThreshold,\n      centered,\n      sameWidth,\n      repositionOnScroll,\n      repositionOnResize,\n      transitionName,\n      transitionEnterTimeout,\n      transitionLeaveTimeout,\n      tooltipLabel,\n      tooltipDelay,\n      tooltipPosition,\n      onClick,\n      onMouseDown,\n      onMouseUp,\n      onTouchStart,\n      onTouchEnd,\n      onMouseEnter,\n      onMouseOver,\n      onMouseLeave,\n      onTouchMove,\n      simplifiedDialog,\n      minLeft,\n      minRight,\n      minBottom,\n\n      // deprecated\n      noIcon,\n      inlineIconChildren,\n      inlineIconClassName,\n      /* eslint-disable no-unused-vars */\n      id: propId,\n      dialogId: propDialogId,\n      cellIndex: propCellIndex,\n      onOkClick,\n      okLabel,\n      okPrimary,\n      okSecondary,\n      onCancelClick,\n      cancelLabel,\n      cancelPrimary,\n      cancelSecondary,\n      okOnOutsideClick,\n      defaultValue,\n      adjusted,\n      scrollIntoView,\n      scrollIntoViewPadding,\n      visibleOnFocus,\n\n      // deprecated\n      scrollThreshold,\n      enforceMinWidth,\n      transitionDuration,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n    const { visible, actions } = this.state;\n    const value = getField(this.props, this.state, 'value');\n    const cellIndex = getField(this.props, this.state, 'cellIndex');\n\n    let { id, dialogId } = this.props;\n    if (!dialogId) {\n      dialogId = `${rowId}-${cellIndex}-edit-dialog`;\n    }\n\n    if (!id) {\n      id = `${dialogId}-field`;\n    }\n\n    let inlineEditIcon;\n    if (inline && !noIcon) {\n      inlineEditIcon = React.cloneElement(getDeprecatedIcon(inlineIconClassName, inlineIconChildren, inlineIcon), {\n        key: 'edit-icon',\n      });\n    }\n\n    const numeric = props.type === 'number';\n    const field = (\n      <TextField\n        {...props}\n        ref={this._setField}\n        style={textFieldStyle}\n        className={cn({ 'md-edit-dialog__blocked-field': inline }, textFieldClassName)}\n        inputClassName={cn({\n          'md-edit-dialog__header': header && inline,\n          'md-text-right': numeric,\n        }, themeColors({ hint: header && inline }), inputClassName)}\n        id={id}\n        label={label}\n        placeholder={placeholder}\n        value={value}\n        onFocus={this._handleFocus}\n        onChange={this._handleChange}\n        onKeyDown={this._handleKeyDown}\n        block={inline}\n        maxLength={visible ? maxLength : null}\n        rightIcon={inlineEditIcon}\n      />\n    );\n\n    let children;\n    if (inline) {\n      children = field;\n    } else {\n      const dialogLabel = value || value === 0 ? value : placeholder || label;\n      children = (\n        <EditDialog\n          style={layoverStyle}\n          className={layoverClassName}\n          dialogStyle={dialogStyle}\n          dialogClassName={dialogClassName}\n          dialogContentStyle={dialogContentStyle}\n          dialogContentClassName={dialogContentClassName}\n          id={dialogId}\n          textFieldId={id}\n          visible={visible}\n          onOpen={this._handleOpen}\n          onClose={this._handleClose}\n          label={dialogLabel}\n          actions={actions}\n          large={large}\n          title={title}\n          header={header}\n          placeholder={dialogLabel === placeholder || dialogLabel === label}\n          simplified={simplifiedDialog}\n          anchor={anchor}\n          belowAnchor={belowAnchor}\n          animationPosition={animationPosition}\n          xThreshold={xThreshold}\n          yThreshold={yThreshold}\n          centered={centered}\n          sameWidth={sameWidth}\n          minLeft={minLeft}\n          minRight={minRight}\n          minBottom={minBottom}\n          fixedTo={typeof fixedTo !== 'undefined' ? fixedTo : this._fixedTo}\n          dialogZDepth={dialogZDepth}\n          repositionOnScroll={repositionOnScroll}\n          repositionOnResize={repositionOnResize}\n          transitionName={transitionName}\n          transitionEnterTimeout={transitionEnterTimeout}\n          transitionLeaveTimeout={transitionLeaveTimeout}\n        >\n          {field}\n        </EditDialog>\n      );\n    }\n\n    return (\n      <TableColumn\n        style={style}\n        numeric={numeric}\n        className={cn('md-edit-dialog-column', className)}\n        header={header}\n        adjusted={false}\n        tooltipLabel={tooltipLabel}\n        tooltipDelay={tooltipDelay}\n        tooltipPosition={tooltipPosition}\n        onClick={onClick}\n        onMouseDown={onMouseDown}\n        onMouseUp={onMouseUp}\n        onTouchStart={onTouchStart}\n        onTouchMove={onTouchMove}\n        onMouseEnter={onMouseEnter}\n        onMouseOver={onMouseOver}\n        onMouseLeave={onMouseLeave}\n        onTouchEnd={onTouchEnd}\n      >\n        {children}\n      </TableColumn>\n    );\n  }\n}\n"]}