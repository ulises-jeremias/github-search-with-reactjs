{"version":3,"sources":["../../src/js/DataTables/SelectFieldColumn.js"],"names":["SelectFieldColumn","props","style","className","menuStyle","menuClassName","header","tooltipLabel","tooltipDelay","tooltipPosition","adjusted","wrapperStyle","wrapperClassName","VerticalAnchors","HorizontalAnchors","Positions","propTypes","id","oneOfType","number","string","object","fixedTo","fullWidth","bool","position","oneOf","repositionOnScroll","repositionOnResize","simplifiedMenu","defaultProps","BELOW"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAkBMA,iB;;;;;;;;;;;+BAgIK;AAAA,qBAkBH,KAAKC,KAlBF;AAAA,YAELC,KAFK,UAELA,KAFK;AAAA,YAGLC,SAHK,UAGLA,SAHK;AAAA,YAILC,SAJK,UAILA,SAJK;AAAA,YAKLC,aALK,UAKLA,aALK;AAAA,YAMLC,MANK,UAMLA,MANK;AAAA,YAOLC,YAPK,UAOLA,YAPK;AAAA,YAQLC,YARK,UAQLA,YARK;AAAA,YASLC,eATK,UASLA,eATK;AAAA,YAWLC,QAXK,UAWLA,QAXK;AAAA,YAcLC,YAdK,UAcLA,YAdK;AAAA,YAeLC,gBAfK,UAeLA,gBAfK;AAAA,YAiBFX,KAjBE;;AAoBP,eACE;AAAA;AAAA;AACE,oBAAQK,MADV;AAEE,mBAAOJ,KAFT;AAGE,uBAAW,0BAAG,wBAAH,EAA6BC,SAA7B,CAHb;AAIE,sBAAU,KAJZ;AAKE,0BAAcI,YALhB;AAME,0BAAcC,YANhB;AAOE,6BAAiBC;AAPnB;AASE,4EAAiBR,KAAjB,IAAwB,OAAOG,SAA/B,EAA0C,WAAWC,aAArD;AATF,SADF;AAaD;;;;;;AAjKGL,mB,CACGa,e,GAAkB,sBAAYA,e;AADjCb,mB,CAEGc,iB,GAAoB,sBAAYA,iB;AAFnCd,mB,CAGGe,S,GAAY,sBAAYA,S;AAH3Bf,mB,CAIGgB,S,GAAY;AACjB;;;;AAIAC,QAAI,oBAAUC,SAAV,CAAoB,CACtB,oBAAUC,MADY,EAEtB,oBAAUC,MAFY,CAApB,CALa;;AAUjB;;;AAGAlB,WAAO,oBAAUmB,MAbA;;AAejB;;;AAGAlB,eAAW,oBAAUiB,MAlBJ;;AAoBjB;;;;;AAKAhB,eAAW,oBAAUiB,MAzBJ;;AA2BjB;;;;;AAKAhB,mBAAe,oBAAUe,MAhCR;;AAkCjB;;;;;;;AAOAE,mCAzCiB;;AA2CjB;;;AAGAC,eAAW,oBAAUC,IA9CJ;;AAgDjB;;;;;AAKAC,qCArDiB;;AAuDjB;;;;AAIAnB,YAAQ,oBAAUkB,IA3DD;;AA6DjB;;;AAGAd,cAAU,oBAAUc,IAhEH;;AAkEjB;;;;;AAKAjB,kBAAc,oBAAUa,MAvEP;;AAyEjB;;;;;AAKAZ,kBAAc,oBAAUW,MA9EP;;AAgFjB;;;;;AAKAV,qBAAiB,oBAAUiB,KAAV,CAAgB,CAAC,KAAD,EAAQ,OAAR,EAAiB,QAAjB,EAA2B,MAA3B,CAAhB,CArFA;;AAuFjB;;;;;;AAMAC,wBAAoB,oBAAUH,IA7Fb;;AA+FjB;;;;;;AAMAI,wBAAoB,oBAAUJ,IArGb;;AAuGjB;;;;;;;AAOAK,oBAAgB,oBAAUL,IA9GT;;AAgHjBb,kBAAc,0BAAW,oBAAUU,MAArB,EAA6B,8BAA7B,CAhHG;AAiHjBT,sBAAkB,0BAAW,oBAAUQ,MAArB,EAA6B,8BAA7B;AAjHD,G;AAJfpB,mB,CAwHG8B,Y,GAAe;AACpBL,cAAUzB,kBAAkBe,SAAlB,CAA4BgB,KADlB;AAEpBR,eAAW,IAFS;AAGpBI,wBAAoB,IAHA;AAIpBC,wBAAoB,KAJA;AAKpBC,oBAAgB;AALI,G;oBA4CT,8BAAe7B,iBAAf,EAAkC,cAAlC,C","file":"SelectFieldColumn.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport deprecated from 'react-prop-types/lib/deprecated';\n\nimport fixedToShape from '../Helpers/fixedToShape';\nimport positionShape from '../Helpers/positionShape';\nimport SelectField from '../SelectFields/SelectField';\nimport withTableFixes from './withTableFixes';\nimport TableColumn from './TableColumn';\n\n/**\n * The `SelectFieldColumn` component is just a simple wrapper between a `SelectField` and\n * the `TableColumn` components.\n *\n * All props that are on the `SelectField` are also available here (except the naming of style or className).\n * See the [SelectField](/components/select-fields?tab=1#select-field-proptypes) for remaining prop descriptions.\n */\nclass SelectFieldColumn extends PureComponent {\n  static VerticalAnchors = SelectField.VerticalAnchors;\n  static HorizontalAnchors = SelectField.HorizontalAnchors;\n  static Positions = SelectField.Positions;\n  static propTypes = {\n    /**\n     * An optional id to use for the select field in the column. If this is omitted, it's value will be\n     * `${rowId}-${cellIndex}-select-field`\n     */\n    id: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * This is the optional style to apply to the `TableColumn`.\n     */\n    style: PropTypes.object,\n\n    /**\n     * This is the optional className to apply to the `TableColumn`.\n     */\n    className: PropTypes.string,\n\n    /**\n     * The is the optional style to apply to the select field's menu container.\n     *\n     * @see {@link SelectFields/SelectField#style}\n     */\n    menuStyle: PropTypes.object,\n\n    /**\n     * The is the optional class name to apply to the select field's menu container.\n     *\n     * @see {@link SelectFields/SelectField#className}\n     */\n    menuClassName: PropTypes.string,\n\n    /**\n     * This is how the select field should be fixed within the table. When this is omitted,\n     * it will automatically use the responsive table as the fixture so that the select field\n     * will close/adjust itself to the scrolling of the table.\n     *\n     * @see {@link Helpers/Layover#fixedTo}\n     */\n    fixedTo: fixedToShape,\n\n    /**\n     * Boolean if the select field should span the entire width of the column.\n     */\n    fullWidth: PropTypes.bool,\n\n    /**\n     * The position for the select field.\n     *\n     * @see {@link SelectFields/SelectField#position}\n     */\n    position: positionShape,\n\n    /**\n     * This is injected by the `TableRow` component.\n     * @access private\n     */\n    header: PropTypes.bool,\n\n    /**\n     * @access private\n     */\n    adjusted: PropTypes.bool,\n\n    /**\n     * The optional tooltip to render on hover.\n     *\n     * @see {@link DataTables/TableColumn#tooltipLabel}\n     */\n    tooltipLabel: PropTypes.string,\n\n    /**\n     * An optional delay to apply to the tooltip before it appears.\n     *\n     * @see {@link DataTables/TableColumn#tooltipDelay}\n     */\n    tooltipDelay: PropTypes.number,\n\n    /**\n     * The position of the tooltip.\n     *\n     * @see {@link DataTables/TableColumn#tooltipPosition}\n     */\n    tooltipPosition: PropTypes.oneOf(['top', 'right', 'bottom', 'left']),\n\n    /**\n     * Boolean if the menu should automatically try to reposition itself to stay within\n     * the viewport when the `fixedTo` element scrolls.\n     *\n     * @see {@link Helpers/Layover#repositionOnScroll}\n     */\n    repositionOnScroll: PropTypes.bool,\n\n    /**\n     * Boolean if the menu should automatically try to reposition itself to stay within\n     * the viewport when the window resizes.\n     *\n     * @see {@link Helpers/Layover#repositionOnResize}\n     */\n    repositionOnResize: PropTypes.bool,\n\n    /**\n     * Boolean if the menu logic should be simplified without any viewport logic and position\n     * based on the relative position of the menu. This will most like require some additional\n     * styles applied to the menu.\n     *\n     * @see {@link Helpers/Layover#simplified}\n     */\n    simplifiedMenu: PropTypes.bool,\n\n    wrapperStyle: deprecated(PropTypes.object, 'There is no longer a wrapper'),\n    wrapperClassName: deprecated(PropTypes.string, 'There is no longer a wrapper'),\n  };\n\n  static defaultProps = {\n    position: SelectFieldColumn.Positions.BELOW,\n    fullWidth: true,\n    repositionOnScroll: true,\n    repositionOnResize: false,\n    simplifiedMenu: false,\n  };\n\n  render() {\n    const {\n      style,\n      className,\n      menuStyle,\n      menuClassName,\n      header,\n      tooltipLabel,\n      tooltipDelay,\n      tooltipPosition,\n      /* eslint-disable no-unused-vars */\n      adjusted,\n\n      // deprecated\n      wrapperStyle,\n      wrapperClassName,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n\n    return (\n      <TableColumn\n        header={header}\n        style={style}\n        className={cn('md-select-field-column', className)}\n        adjusted={false}\n        tooltipLabel={tooltipLabel}\n        tooltipDelay={tooltipDelay}\n        tooltipPosition={tooltipPosition}\n      >\n        <SelectField {...props} style={menuStyle} className={menuClassName} />\n      </TableColumn>\n    );\n  }\n}\n\nexport default withTableFixes(SelectFieldColumn, 'select-field');\n"]}