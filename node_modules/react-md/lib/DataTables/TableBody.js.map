{"version":3,"sources":["../../src/js/DataTables/TableBody.js"],"names":["TableBody","props","children","className","selectedRows","context","rows","map","toArray","row","i","uncontrolled","selected","cloneElement","propTypes","style","object","string","oneOfType","element","arrayOf","contextTypes"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAUqBA,S;;;;;;;;;;;+BAuBV;AAAA,qBACmC,KAAKC,KADxC;AAAA,YACCC,QADD,UACCA,QADD;AAAA,YACWC,SADX,UACWA,SADX;AAAA,YACyBF,KADzB;;AAAA,YAECG,YAFD,GAEkB,KAAKC,OAFvB,CAECD,YAFD;;;AAIP,YAAME,OAAOJ,WAAW,gBAASK,GAAT,CAAa,gBAASC,OAAT,CAAiBN,QAAjB,CAAb,EAAyC,UAACO,GAAD,EAAMC,CAAN,EAAY;AAC3E,cAAMC,eAAe,OAAOF,IAAIR,KAAJ,CAAUW,QAAjB,KAA8B,WAAnD;AACA,iBAAO,gBAAMC,YAAN,CAAmBJ,GAAnB,EAAwB;AAC7BG,sBAAUD,eAAeP,aAAaM,CAAb,CAAf,GAAiCD,IAAIR,KAAJ,CAAUW;AADxB,WAAxB,CAAP;AAGD,SALuB,CAAX,GAKR,IALL;;AAOA,eACE;AAAA;AAAA,uBAAWX,KAAX,IAAkB,WAAW,0BAAG,eAAH,EAAoBE,SAApB,CAA7B;AACGG;AADH,SADF;AAKD;;;;;;AAvCkBN,W,CACZc,S,GAAY;AACjB;;;AAGAC,WAAO,oBAAUC,MAJA;;AAMjB;;;AAGAb,eAAW,oBAAUc,MATJ;;AAWjB;;;AAGAf,cAAU,oBAAUgB,SAAV,CAAoB,CAC5B,oBAAUC,OADkB,EAE5B,oBAAUC,OAAV,CAAkB,oBAAUD,OAA5B,CAF4B,CAApB;AAdO,G;AADAnB,W,CAqBZqB,Y;oBArBYrB,S","file":"TableBody.js","sourcesContent":["import React, { Component, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nimport contextTypes from './contextTypes';\n\n/**\n * The `TableBody` component is used for managing the state of all\n * `TableRow` inside of it.\n */\nexport default class TableBody extends Component {\n  static propTypes = {\n    /**\n     * An optional style to apply to the tbody.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply to the tbody.\n     */\n    className: PropTypes.string,\n\n    /**\n     * A list or a single item of `TableRow` components to render.\n     */\n    children: PropTypes.oneOfType([\n      PropTypes.element,\n      PropTypes.arrayOf(PropTypes.element),\n    ]),\n  };\n\n  static contextTypes = contextTypes;\n\n  render() {\n    const { children, className, ...props } = this.props;\n    const { selectedRows } = this.context;\n\n    const rows = children ? Children.map(Children.toArray(children), (row, i) => {\n      const uncontrolled = typeof row.props.selected === 'undefined';\n      return React.cloneElement(row, {\n        selected: uncontrolled ? selectedRows[i] : row.props.selected,\n      });\n    }) : null;\n\n    return (\n      <tbody {...props} className={cn('md-table-body', className)}>\n        {rows}\n      </tbody>\n    );\n  }\n}\n"]}