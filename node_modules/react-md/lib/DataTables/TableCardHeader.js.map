{"version":3,"sources":["../../src/js/DataTables/TableCardHeader.js"],"names":["TableCardHeader","props","state","animating","nextProps","visible","nVisible","transitionEnterTimeout","transitionLeaveTimeout","timeout","_timeout","clearTimeout","setTimeout","setState","noAdjust","children","map","toArray","child","i","className","noClone","style","title","titleId","actions","contextualTitleId","contextualChildren","noActionsAdjust","noChildrenAdjust","noLeftChildrenClone","propChildren","propLeftChildren","leftChildren","propContextualTitle","contextualTitle","_cloneCellRight","_cloneLeftChildren","concat","contextualHeader","mergedStyles","Object","assign","overflow","propTypes","object","string","component","oneOfType","func","isRequired","transitionName","number","node","element","arrayOf","bool","defaultProps"],"mappings":"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","file":"TableCardHeader.js","sourcesContent":["import React, { PureComponent, Children, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup';\nimport cn from 'classnames';\n\nimport TICK from '../constants/CSSTransitionGroupTick';\nimport oneRequired from '../utils/PropTypes/oneRequired';\nimport invalidIf from '../utils/PropTypes/invalidIf';\nimport CardTitleBlock from '../Cards/CardTitleBlock';\n\n/**\n * The `TableCardHeader` is used when contextual actions should appear when\n * a user selects a row.\n */\nexport default class TableCardHeader extends PureComponent {\n  static propTypes = {\n    /**\n     * An optional style to apply.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply.\n     */\n    className: PropTypes.string,\n\n    /**\n     * The component to render as.\n     */\n    component: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.string,\n    ]).isRequired,\n\n    /**\n     * The transition name to use when the contextual header appears.\n     */\n    transitionName: PropTypes.string.isRequired,\n\n    /**\n     * The transition time to use when the contextual header appears.\n     */\n    transitionEnterTimeout: PropTypes.number.isRequired,\n\n    /**\n     * The transition time to use when the contextual header disappears.\n     */\n    transitionLeaveTimeout: PropTypes.number.isRequired,\n\n    /**\n     * An optional title to display. It is invalid to have both `title` and `leftChildren`\n     * defined as only one will be used.\n     */\n    title: oneRequired(PropTypes.node, 'leftChildren', 'children'),\n\n    /**\n     * An optional id to provide to the title.\n     */\n    titleId: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * An optional title to display in the contextual header. This will get wrapped in an `h2`\n     * tag and additional styles applied.\n     */\n    contextualTitle: PropTypes.node,\n\n    /**\n     * An optional id to provide to the contextual title.\n     */\n    contextualTitleId: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * Any additional children to display in the contextual header. This will be displayed after\n     * the optional `contextualTile` and before the `actions`.\n     */\n    contextualChildren: PropTypes.node,\n\n    /**\n     * An optional button or list of buttons to display instead of a title.\n     */\n    leftChildren: invalidIf(PropTypes.oneOfType([\n      PropTypes.element,\n      PropTypes.arrayOf(PropTypes.element),\n    ]), 'title'),\n\n    /**\n     * An additional children to display after the `title` or `leftChildren` prop.\n     * This is _normally_ a list of icon button or menu button.\n     */\n    children: PropTypes.oneOfType([\n      PropTypes.element,\n      PropTypes.arrayOf(PropTypes.element),\n    ]),\n\n    /**\n     * An optional button/menu button or a list of button/menu button to display in the\n     * contextual header once the user has selected a row or multiple rows.\n     */\n    actions: PropTypes.oneOfType([\n      PropTypes.element,\n      PropTypes.arrayOf(PropTypes.element),\n    ]),\n\n    /**\n     * Boolean if the `actions` prop should not have each element cloned with additional\n     * class names.\n     */\n    noActionsAdjust: PropTypes.bool,\n\n    /**\n     * Boolean if the `children` prop should not have each element cloned with additional\n     * class names.\n     */\n    noChildrenAdjust: PropTypes.bool,\n\n    /**\n     * Boolean if the `leftChildren` prop should not have each element cloned with additional\n     * class names.\n     */\n    noLeftChildrenClone: PropTypes.bool,\n\n    /**\n     * Boolean if the contextual header is currently visible.\n     */\n    visible: PropTypes.bool.isRequired,\n  };\n\n  static defaultProps = {\n    component: 'header',\n    transitionName: 'md-drop-down',\n    transitionEnterTimeout: 150,\n    transitionLeaveTimeout: 150,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = { animating: false };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { visible } = this.props;\n    const { visible: nVisible, transitionEnterTimeout, transitionLeaveTimeout } = nextProps;\n    const timeout = !nVisible ? transitionLeaveTimeout : transitionEnterTimeout;\n    if (visible !== nVisible) {\n      if (this._timeout) {\n        clearTimeout(this._timeout);\n      }\n\n      this._timeout = setTimeout(() => {\n        this._timeout = setTimeout(() => {\n          this._timeout = null;\n          this.setState({ animating: false });\n        }, timeout);\n      }, TICK);\n\n      if (!this.state.animating) {\n        this.setState({ animating: true });\n      }\n    }\n  }\n\n  _cloneCellRight(noAdjust, children) {\n    if (noAdjust || !children) {\n      return children;\n    }\n\n    return Children.map(Children.toArray(children), (child, i) => {\n      if (i === 0) {\n        return cloneElement(child, { className: cn('md-cell--right', child.props.className) });\n      }\n\n      return child;\n    });\n  }\n\n  _cloneLeftChildren(noClone, children) {\n    if (noClone || !children) {\n      return children;\n    }\n\n    return Children.map(Children.toArray(children), child => cloneElement(child, {\n      className: cn('md-btn--dialog', child.props.className),\n    }));\n  }\n\n  render() {\n    const { animating } = this.state;\n    const {\n      style,\n      className,\n      title,\n      titleId,\n      actions,\n      contextualTitleId,\n      contextualChildren,\n      noActionsAdjust,\n      noChildrenAdjust,\n      noLeftChildrenClone,\n      visible,\n      /* eslint-disable no-unused-vars */\n      children: propChildren,\n      leftChildren: propLeftChildren,\n      contextualTitle: propContextualTitle,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n\n    let { children, leftChildren, contextualTitle } = this.props;\n    children = this._cloneCellRight(noChildrenAdjust, children);\n    leftChildren = this._cloneLeftChildren(noLeftChildrenClone, leftChildren);\n\n    if (title) {\n      children = (\n        <div className=\"md-card-title\" key=\"main-title\">\n          <CardTitleBlock id={titleId} title={title} />\n          {children}\n        </div>\n      );\n    } else if (leftChildren) {\n      leftChildren = Children.toArray(leftChildren);\n\n      if (children) {\n        children = leftChildren.concat(Children.toArray(children));\n      } else {\n        children = leftChildren;\n      }\n    }\n\n    if (contextualTitle) {\n      contextualTitle = (\n        <h2\n          id={contextualTitleId}\n          className=\"md-card-title--title md-card-title--title-contextual\"\n          tabIndex={contextualTitleId ? -1 : null}\n        >\n          {contextualTitle}\n        </h2>\n      );\n    }\n\n    const contextualHeader = (\n      <div key=\"contextual-header\" className=\"md-card-title md-card-title--contextual\">\n        {contextualTitle}\n        {contextualChildren}\n        {this._cloneCellRight(noActionsAdjust, actions)}\n      </div>\n    );\n\n    let mergedStyles = style;\n    if (animating) {\n      mergedStyles = Object.assign({}, style, { overflow: 'hidden' });\n    }\n\n    return (\n      <CSSTransitionGroup\n        {...props}\n        style={mergedStyles}\n        className={cn('md-table-card-header', {\n          'md-table-card-header--no-title': !title,\n        }, className)}\n      >\n        {children}\n        {visible ? contextualHeader : null}\n      </CSSTransitionGroup>\n    );\n  }\n}\n"]}