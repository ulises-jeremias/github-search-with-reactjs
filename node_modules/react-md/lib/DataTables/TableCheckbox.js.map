{"version":3,"sources":["../../src/js/DataTables/TableCheckbox.js"],"names":["TableCheckbox","_td","_header","_handleMount","td","header","querySelector","index","parentNode","rowIndex","tagName","context","createCheckbox","removeCheckbox","props","checked","checkedIcon","uncheckedIcon","indeterminateIcon","indeterminate","footer","rowId","baseName","checkboxHeaderLabel","checkboxLabelTemplate","Cell","label","replace","content","fixedHeader","fixedFooter","cloneElement","className","undefined","propTypes","number","bool","contextTypes","oneOfType","string","isRequired","element","func"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAOqBA,a;;;;;;;;;;;;;;sMA6BnBC,G,GAAM,I,QACNC,O,GAAU,K,QAEVC,Y,GAAe,UAACC,EAAD,EAAQ;AACrB,YAAIA,EAAJ,EAAQ;AACN,cAAMC,SAAS,yBAAUD,EAAV,EAAcE,aAAd,CAA4B,OAA5B,CAAf;AACA,cAAMC,QAAQH,GAAGI,UAAH,CAAcC,QAAd,IAA0BJ,SAAS,CAAT,GAAa,CAAvC,CAAd;;AAEA,cAAID,GAAGI,UAAH,CAAcA,UAAd,CAAyBE,OAAzB,KAAqC,OAAzC,EAAkD;AAChD,kBAAKC,OAAL,CAAaC,cAAb,CAA4BL,KAA5B;AACD;AACD,gBAAKN,GAAL,GAAWG,EAAX;AACA,gBAAKF,OAAL,GAAeG,MAAf;AACD,SATD,MASO,IAAI,MAAKJ,GAAT,EAAc;AACnB,cAAMM,SAAQ,MAAKN,GAAL,CAASO,UAAT,CAAoBC,QAAlC;AACA,gBAAKE,OAAL,CAAaE,cAAb,CAA4BN,UAAS,MAAKL,OAAL,GAAe,CAAf,GAAmB,CAA5B,CAA5B;AACA,gBAAKD,GAAL,GAAW,IAAX;AACA,gBAAKC,OAAL,GAAe,KAAf;AACD;AACF,O;;;;;+BAEQ;AAAA,qBAC8B,KAAKY,KADnC;AAAA,YACCC,OADD,UACCA,OADD;AAAA,YACUR,KADV,UACUA,KADV;AAAA,YACoBO,KADpB;;AAAA,uBAaH,KAAKH,OAbF;AAAA,YAGLK,WAHK,YAGLA,WAHK;AAAA,YAILC,aAJK,YAILA,aAJK;AAAA,YAKLC,iBALK,YAKLA,iBALK;AAAA,YAMLC,aANK,YAMLA,aANK;AAAA,YAOLd,MAPK,YAOLA,MAPK;AAAA,YAQLe,MARK,YAQLA,MARK;AAAA,YASLC,KATK,YASLA,KATK;AAAA,YAULC,QAVK,YAULA,QAVK;AAAA,YAWLC,mBAXK,YAWLA,mBAXK;AAAA,YAYLC,qBAZK,YAYLA,qBAZK;;;AAeP,YAAMC,OAAOpB,SAAS,IAAT,GAAgB,IAA7B;AACA,YAAIqB,cAAJ;AACA,YAAIrB,MAAJ,EAAY;AACVqB,kBAAQH,mBAAR;AACD,SAFD,MAEO,IAAI,OAAOC,qBAAP,KAAiC,UAArC,EAAiD;AACtDE,kBAAQF,sBAAsBjB,KAAtB,CAAR;AACD,SAFM,MAEA;AACLmB,kBAAQF,sBAAsBG,OAAtB,CAA8B,UAA9B,EAA0CpB,KAA1C,CAAR;AACD;;AAED,YAAIqB,UACF,uEACMd,KADN;AAEE,cAAIO,KAFN;AAGE,gBAASC,QAAT,cAHF;AAIE,gBAAK,UAJP;AAKE,mBAASP,OALX;AAME,+BAAqBC,WANvB;AAOE,iCAAuBX,UAAUc,aAAV,GAA0BD,iBAA1B,GAA8CD,aAPvE;AAQE,wBAAYS;AARd,WADF;AAYA,YAAMG,cAAcxB,UAAU,KAAKM,OAAL,CAAakB,WAA3C;AACA,YAAMC,cAAcV,UAAU,KAAKT,OAAL,CAAamB,WAA3C;;AAEA,YAAID,WAAJ,EAAiB;AACfD,oBACE;AAAA;AAAA;AACE,yBAAW,0BAAG,wBAAH,EAA6B;AACtC,kDAAkCC,WADI;AAEtC,kDAAkCC;AAFI,eAA7B;AADb;AAMG,4BAAMC,YAAN,CAAmBH,OAAnB,EAA4B;AAC3BI,yBAAW,0BAAG;AACZ,6CAA6B3B,MADjB;AAEZ,6CAA6Be;AAFjB,eAAH;AADgB,aAA5B;AANH,WADF;AAeD;;AAGD,eACE;AAAC,cAAD;AAAA;AACE,uBAAW,0BAAG,mBAAH,EAAwB;AACjC,wCAA0BS;AADO,aAAxB,CADb;AAIE,mBAAOxB,SAAS,KAAT,GAAiB4B,SAJ1B;AAKE,iBAAK,KAAK9B;AALZ;AAOGyB;AAPH,SADF;AAWD;;;;;;AAxHkB5B,e,CACZkC,S,GAAY;AACjB3B,WAAO,oBAAU4B,MADA;AAEjBpB,aAAS,oBAAUqB;AAFF,G;AADApC,e,CAMZqC,Y,GAAe;AACpBhB,WAAO,oBAAUiB,SAAV,CAAoB,CACzB,oBAAUH,MADe,EAEzB,oBAAUI,MAFe,CAApB,EAGJC,UAJiB;AAKpBlB,cAAU,oBAAUiB,MAAV,CAAiBC,UALP;AAMpBrB,mBAAe,oBAAUiB,IANL;AAOpBpB,iBAAa,oBAAUyB,OAPH;AAQpBxB,mBAAe,oBAAUwB,OARL;AASpBvB,uBAAmB,oBAAUuB,OATT;AAUpBlB,yBAAqB,oBAAUgB,MAAV,CAAiBC,UAVlB;AAWpBhB,2BAAuB,oBAAUc,SAAV,CAAoB,CACzC,oBAAUI,IAD+B,EAEzC,oBAAUH,MAF+B,CAApB,EAGpBC,UAdiB;AAepB5B,oBAAgB,oBAAU8B,IAAV,CAAeF,UAfX;AAgBpB3B,oBAAgB,oBAAU6B,IAAV,CAAeF,UAhBX;AAiBpBnC,YAAQ,oBAAU+B,IAjBE;AAkBpBhB,YAAQ,oBAAUgB,IAlBE;AAmBpBP,iBAAa,oBAAUO,IAAV,CAAeI,UAnBR;AAoBpBV,iBAAa,oBAAUM,IAAV,CAAeI;AApBR,G;oBANHxC,a","file":"TableCheckbox.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport SelectionControl from '../SelectionControls/SelectionControl';\n\nimport findTable from './findTable';\n\nexport default class TableCheckbox extends Component {\n  static propTypes = {\n    index: PropTypes.number,\n    checked: PropTypes.bool,\n  };\n\n  static contextTypes = {\n    rowId: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]).isRequired,\n    baseName: PropTypes.string.isRequired,\n    indeterminate: PropTypes.bool,\n    checkedIcon: PropTypes.element,\n    uncheckedIcon: PropTypes.element,\n    indeterminateIcon: PropTypes.element,\n    checkboxHeaderLabel: PropTypes.string.isRequired,\n    checkboxLabelTemplate: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.string,\n    ]).isRequired,\n    createCheckbox: PropTypes.func.isRequired,\n    removeCheckbox: PropTypes.func.isRequired,\n    header: PropTypes.bool,\n    footer: PropTypes.bool,\n    fixedHeader: PropTypes.bool.isRequired,\n    fixedFooter: PropTypes.bool.isRequired,\n  };\n\n  _td = null;\n  _header = false;\n\n  _handleMount = (td) => {\n    if (td) {\n      const header = findTable(td).querySelector('thead');\n      const index = td.parentNode.rowIndex - (header ? 1 : 0);\n\n      if (td.parentNode.parentNode.tagName === 'TBODY') {\n        this.context.createCheckbox(index);\n      }\n      this._td = td;\n      this._header = header;\n    } else if (this._td) {\n      const index = this._td.parentNode.rowIndex;\n      this.context.removeCheckbox(index - (this._header ? 1 : 0));\n      this._td = null;\n      this._header = false;\n    }\n  };\n\n  render() {\n    const { checked, index, ...props } = this.props;\n    const {\n      checkedIcon,\n      uncheckedIcon,\n      indeterminateIcon,\n      indeterminate,\n      header,\n      footer,\n      rowId,\n      baseName,\n      checkboxHeaderLabel,\n      checkboxLabelTemplate,\n    } = this.context;\n\n    const Cell = header ? 'th' : 'td';\n    let label;\n    if (header) {\n      label = checkboxHeaderLabel;\n    } else if (typeof checkboxLabelTemplate === 'function') {\n      label = checkboxLabelTemplate(index);\n    } else {\n      label = checkboxLabelTemplate.replace(/{{row}}/g, index);\n    }\n\n    let content = (\n      <SelectionControl\n        {...props}\n        id={rowId}\n        name={`${baseName}-checkbox`}\n        type=\"checkbox\"\n        checked={checked}\n        checkedCheckboxIcon={checkedIcon}\n        uncheckedCheckboxIcon={header && indeterminate ? indeterminateIcon : uncheckedIcon}\n        aria-label={label}\n      />\n    );\n    const fixedHeader = header && this.context.fixedHeader;\n    const fixedFooter = footer && this.context.fixedFooter;\n\n    if (fixedHeader) {\n      content = (\n        <div\n          className={cn('md-table-column__fixed', {\n            'md-table-column__fixed--header': fixedHeader,\n            'md-table-column__fixed--footer': fixedFooter,\n          })}\n        >\n          {React.cloneElement(content, {\n            className: cn({\n              'md-table-checkbox--header': header,\n              'md-table-checkbox--footer': footer,\n            }),\n          })}\n        </div>\n      );\n    }\n\n\n    return (\n      <Cell\n        className={cn('md-table-checkbox', {\n          'md-table-column--fixed': fixedHeader,\n        })}\n        scope={header ? 'col' : undefined}\n        ref={this._handleMount}\n      >\n        {content}\n      </Cell>\n    );\n  }\n}\n"]}