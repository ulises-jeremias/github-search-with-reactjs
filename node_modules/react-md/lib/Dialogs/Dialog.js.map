{"version":3,"sources":["../../src/js/Dialogs/Dialog.js"],"names":["DIFF_KEYS","Dialog","props","height","width","styles","style","state","contentStyles","contentStyle","contentPadded","renderNode","_renderNode","pageX","pageY","setState","_getStyles","onOpen","nextProps","some","key","onLeave","id","className","contentClassName","title","Content","contentComponent","contentProps","actions","children","fullPage","centered","autopadContent","paddedContent","autosizeContent","stackedActions","containerX","containerY","labelledBy","titleId","padDefined","dialogChildren","_setContent","_handleContentResize","_setRenderNode","propTypes","oneOfType","number","string","object","func","isRequired","node","element","arrayOf","additionalFocusKeys","initialFocus","focusOnMount","containFocus","bool","zDepth","defaultProps","childContextTypes","transformOrigin","dialog","content","_content","querySelectorAll","length","scrollHeight","el","maxHeight","parentNode","querySelector","footer","totalHeight","offsetHeight","equalHeight"],"mappings":"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","file":"Dialog.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { findDOMNode } from 'react-dom';\nimport cn from 'classnames';\nimport isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';\n\nimport oneRequiredForA11y from '../utils/PropTypes/oneRequiredForA11y';\nimport FocusContainer from '../Helpers/FocusContainer';\nimport ResizeObserver from '../Helpers/ResizeObserver';\nimport Paper from '../Papers/Paper';\nimport DialogTitle from './DialogTitle';\nimport DialogFooter from './DialogFooter';\n\nconst DIFF_KEYS = ['style', 'height', 'width', 'contentStyle'];\n\n/**\n * The `Dialog` is just a static component for creating dialogs. Dialogs\n * seemed like they could be used outside of the `DialogContainer` component,\n * so it was exposed as well. In *most* cases, you will still want to use\n * the `DialogContainer` component.\n */\nexport default class Dialog extends PureComponent {\n  static propTypes = {\n    /**\n     * @see {@link Dialogs/DialogContainer#id}\n     */\n    id: isRequiredForA11y(PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ])),\n\n    /**\n     * @see {@link Dialogs/DialogContainer#aria-describedby}\n     */\n    'aria-describedby': oneRequiredForA11y(PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]), 'title', 'aria-labelledby', 'aria-label'),\n\n    /**\n     * @see {@link Dialogs/DialogContainer#aria-labelledby}\n     */\n    'aria-labelledby': PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * @see {@link Dialogs/DialogContainer#aria-label}\n     */\n    'aria-label': PropTypes.string,\n\n    /**\n     * An optional style to apply to the dialog.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply to the dialog.\n     */\n    className: PropTypes.string,\n\n    /**\n     * An optional style to apply to the dialog's content.\n     */\n    contentStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the dialog's content.\n     */\n    contentClassName: PropTypes.string,\n\n    /**\n     * The component to render the content as. This is helpful if you would like to use\n     * the CSSTransitionGroup. This really just saves a tiny bit of markup.\n     *\n     * ```js\n     * <Dialog\n     *   contentComponent={CSSTransitionGroup}\n     *   contentProps={{\n     *     transitionName: 'md-cross-fade',\n     *     transitionLeave: false,\n     *     transitionEnterTimeout: 150,\n     *   }}\n     * >\n     *   {dynamicContent}\n     * </Dialog>\n     * ```\n     */\n    contentComponent: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n    ]).isRequired,\n\n    /**\n     * Any additional props to pass to the content component.\n     */\n    contentProps: PropTypes.object,\n\n    /**\n     * An optional title to display in the dialog.\n     */\n    title: PropTypes.node,\n\n    /**\n     * Any children to display in the content of the dialog.\n     */\n    children: PropTypes.node,\n\n    /**\n     * A single action or a list of actions to display in the dialog. This can either be a list\n     * of `FlatButton` props or `<Button flat {...props} />` elements.\n     */\n    actions: PropTypes.oneOfType([\n      PropTypes.element,\n      PropTypes.object,\n      PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.element,\n        PropTypes.object,\n      ])),\n    ]),\n\n    /**\n     * @see {@link Helpers/FocusContainer#additionalFocusKeys}\n     */\n    additionalFocusKeys: FocusContainer.propTypes.additionalFocusKeys,\n\n    /**\n     * @see {@link Helpers/FocusContainer#initialFocus}\n     */\n    initialFocus: FocusContainer.propTypes.initialFocus,\n\n    /**\n     * @see {@link Helpers/FocusContainer#focusOnMount}\n     */\n    focusOnMount: FocusContainer.propTypes.focusOnMount,\n\n    /**\n     * @see {@link Helpers/FocusContainer#containFocus}\n     */\n    containFocus: FocusContainer.propTypes.containFocus,\n\n    /**\n     * An optional x coordinate on the page that caused a full page dialog\n     * to be created. This is really just used for a `transformOrigin` style.\n     */\n    pageX: PropTypes.number,\n\n    /**\n     * An optional y coordinate on the page that caused a full page dialog\n     * to be created. This is really just used for a `transformOrigin` style.\n     */\n    pageY: PropTypes.number,\n\n    /**\n     * An optional x scroll position of the container holding the dialog. This\n     * is really just used for a `transformOrigin` style on full page dialogs.\n     */\n    containerX: PropTypes.number,\n\n    /**\n     * An optional y scroll position of the container holding the dialog. This\n     * is really just used for a `transformOrigin` style on full page dialogs.\n     */\n    containerY: PropTypes.number,\n\n    /**\n     * Boolean if the dialog should be rendered as a full page dialog.\n     */\n    fullPage: PropTypes.bool,\n\n    /**\n     * The zDepth to use for the dialog.\n     */\n    zDepth: PropTypes.number.isRequired,\n\n    /**\n     * An optional function to call when the dialog has been opened. This is\n     * really just used for the `DialogContainer`.\n     */\n    onOpen: PropTypes.func,\n\n    /**\n     * An optional function to call when the dialog has been closed. This is\n     * really just used for the `DialogContainer`.\n     */\n    onLeave: PropTypes.func,\n\n    /**\n     * Boolean if the dialog should be centered in the page.\n     */\n    centered: PropTypes.bool,\n\n    /**\n     * Boolean if the content should be padded. This will take precedence\n     * over the `autopadContent` prop. So if this is defined, that value\n     * will be used instead of any thing that was was calculated in this\n     * component.\n     *\n     * @see {@link #autopadContent}\n     */\n    paddedContent: PropTypes.bool,\n\n    /**\n     * Boolean if the dialog should automatically try to determine if the content\n     * should be padded. It will be padded if the dialog does not contain a `List`.\n     */\n    autopadContent: PropTypes.bool,\n\n    /**\n     * Boolean if the dialog content's size should automatically be resized to overflow\n     * correctly when there is a lot of content. This will calculate and apply some `maxHeight`\n     * to the `contentStyle`.\n     */\n    autosizeContent: PropTypes.bool,\n\n    /**\n     * An optional height to apply to the dialog. This is used if it is easier to just apply height/width\n     * with for specific dialogs instead of in CSS.\n     *\n     * **This prop should not be used if the `fullPage` prop is enabled.**\n     *\n     * @see {@link #fullPage}\n     * @see {@link #width}\n     */\n    height: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * An optional width to apply to the dialog. This is used if it is easier to just apply height/width\n     * with for specific dialogs instead of in CSS.\n     *\n     * **This prop should not be used if the `fullPage` prop is enabled.**\n     *\n     * @see {@link #fullPage}\n     * @see {@link #height}\n     */\n    width: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * Boolean if the actions should be stacked on top of each other. If this value is `undefined`, it will\n     * automatically attempt to guess if the items should be stacked.\n     */\n    stackedActions: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    autopadContent: true,\n    autosizeContent: true,\n    contentComponent: 'section',\n    zDepth: 5,\n  };\n\n  static childContextTypes = {\n    renderNode: PropTypes.object,\n  };\n\n  constructor(props) {\n    super();\n\n    const { height, width } = props;\n    let styles = props.style;\n    if (height || width) {\n      styles = styles || {};\n      styles = { height, width, ...styles };\n    }\n\n    this.state = {\n      styles,\n      contentStyles: props.contentStyle,\n      contentPadded: false,\n    };\n  }\n\n  getChildContext() {\n    return { renderNode: this._renderNode };\n  }\n\n  componentWillMount() {\n    const { pageX, pageY } = this.props;\n    if (!pageX || !pageY) {\n      return;\n    }\n\n    this.setState({ styles: this._getStyles(this.props) });\n  }\n\n  componentDidMount() {\n    if (this.props.onOpen) {\n      this.props.onOpen();\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (DIFF_KEYS.some(key => nextProps[key] !== this.props[key])) {\n      this.setState({\n        styles: this._getStyles(nextProps),\n        contentStyles: { ...this.state.contentStyles, ...nextProps.contentStyle },\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.props.onLeave) {\n      this.props.onLeave();\n    }\n  }\n\n  _getStyles = ({ pageX, containerX, pageY, containerY, height, width, style } = this.props) => ({\n    height: typeof height !== 'undefined' ? height : null,\n    width: typeof width !== 'undefined' ? width : null,\n    transformOrigin: pageX || pageY ? `${pageX - containerX}px ${pageY - containerY}px` : null,\n    ...style,\n  });\n\n  _setRenderNode = (dialog) => {\n    this._renderNode = findDOMNode(dialog);\n  };\n\n  _setContent = (content) => {\n    if (content !== null) {\n      this._content = findDOMNode(content);\n      const contentPadded = this._content.querySelectorAll('.md-list').length === 0;\n\n      this.setState({ contentPadded });\n    }\n  };\n\n  _handleContentResize = ({ height, scrollHeight, el: content }) => {\n    if (height !== scrollHeight) {\n      const maxHeight = content.style.maxHeight;\n      const dialog = content.parentNode;\n      content.style.maxHeight = 'none';\n      const title = this.props.title ? dialog.querySelector('.md-title--dialog') : null;\n      const footer = this.props.actions ? dialog.querySelector('.md-dialog-footer') : null;\n\n      const totalHeight = dialog.offsetHeight - (title ? title.offsetHeight : 0) - (footer ? footer.offsetHeight : 0);\n      content.style.maxHeight = maxHeight;\n      const equalHeight = totalHeight === scrollHeight;\n      if (equalHeight) {\n        if (this.state.contentStyles && this.state.contentStyles.maxHeight) {\n          this.setState({ contentStyles: this.props.contentStyle });\n        }\n      } else {\n        this.setState({ contentStyles: { maxHeight: totalHeight, ...this.props.contentStyle } });\n      }\n    }\n  };\n\n  render() {\n    const { contentPadded, styles, contentStyles } = this.state;\n    const {\n      id,\n      className,\n      contentClassName,\n      title,\n      contentComponent: Content,\n      contentProps,\n      actions,\n      children,\n      fullPage,\n      centered,\n      autopadContent,\n      paddedContent,\n      autosizeContent,\n      stackedActions,\n      /* eslint-disable no-unused-vars */\n      style,\n      contentStyle,\n      pageX,\n      pageY,\n      containerX,\n      containerY,\n      onOpen,\n      onLeave,\n      height,\n      width,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n\n    let { 'aria-labelledby': labelledBy } = this.props;\n    const titleId = `${id}-title`;\n    if (!labelledBy && title) {\n      labelledBy = titleId;\n    }\n\n    const padDefined = typeof paddedContent !== 'undefined';\n    const dialogChildren = fullPage ? children : [\n      <DialogTitle key=\"title\" id={titleId}>{title}</DialogTitle>,\n      <Content\n        ref={!padDefined && autopadContent ? this._setContent : null}\n        key=\"content\"\n        {...contentProps}\n        style={contentStyles}\n        className={cn('md-dialog-content', {\n          'md-dialog-content--padded': padDefined ? paddedContent : contentPadded,\n        }, contentClassName)}\n      >\n        {autosizeContent ? <ResizeObserver watchHeight watchWidth onResize={this._handleContentResize} /> : null}\n        {children}\n      </Content>,\n      <DialogFooter key=\"footer\" actions={actions} stacked={stackedActions} />,\n    ];\n\n    return (\n      <Paper\n        {...props}\n        id={id}\n        component={FocusContainer}\n        ref={this._setRenderNode}\n        style={styles}\n        className={cn('md-dialog', {\n          'md-dialog--full-page': fullPage,\n          'md-dialog--centered': centered,\n        }, className)}\n        role=\"dialog\"\n        aria-labelledby={labelledBy}\n      >\n        {dialogChildren}\n      </Paper>\n    );\n  }\n}\n"]}