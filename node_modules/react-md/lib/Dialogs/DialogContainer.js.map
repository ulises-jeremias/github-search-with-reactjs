{"version":3,"sources":["../../src/js/Dialogs/DialogContainer.js"],"names":["DialogContainer","props","visible","isOpen","dialogVisible","defaultVisibleTransitionable","state","active","fullPage","overlay","portalVisible","_mountDialog","nextProps","el","context","window","pageX","scrollX","pageY","scrollY","scrollTop","scrollLeft","_pageX","_pageY","_activeElement","document","activeElement","_mountPortal","setState","prevProps","closeOnEsc","modal","escapable","prevEscapable","add","remove","addEventListener","_handleEscClose","removeEventListener","_inTimeout","clearTimeout","style","className","dialogStyle","dialogClassName","component","transitionEnterTimeout","transitionLeaveTimeout","lastChild","portal","propVisible","propRenderNode","renderNode","onShow","onHide","disableScrollLocking","close","actionLeft","actionRight","transitionName","transitionEnter","transitionLeave","dialog","_handleDialogMounting","_unmountPortal","container","_setContainer","_handleClick","propTypes","id","oneOfType","number","string","object","contentStyle","contentClassName","func","isRequired","contentComponent","children","node","actions","element","arrayOf","bool","propName","args","validator","componentName","componentNameSafe","err","title","Error","location","additionalFocusKeys","initialFocus","focusOnMount","containFocus","autopadContent","autosizeContent","height","width","stackedActions","defaultProps","contextTypes","_container","e","which","keyCode","setTimeout","target","focus","scrollEl","querySelector","parentNode","classList","contains"],"mappings":"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","file":"DialogContainer.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { findDOMNode } from 'react-dom';\nimport CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup';\nimport cn from 'classnames';\nimport deprecated from 'react-prop-types/lib/deprecated';\nimport isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';\n\nimport { ESC } from '../constants/keyCodes';\nimport TICK from '../constants/CSSTransitionGroupTick';\nimport getField from '../utils/getField';\nimport toggleScroll from '../utils/toggleScroll';\nimport oneRequiredForA11y from '../utils/PropTypes/oneRequiredForA11y';\nimport Dialog from './Dialog';\nimport Portal from '../Helpers/Portal';\n\n/**\n * The `DialogContainer` component is used for dynamically creating the `Dialog` with\n * transitions.\n */\nexport default class DialogContainer extends PureComponent {\n  /* eslint-disable max-len */\n  static propTypes = {\n    /**\n     * An id to use for the `Dialog` once it has been opened. This is used for the\n     * [dialog role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_dialog_role).\n     * This is used to generate an `id` for the `title` prop when it has been defined.\n     */\n    id: isRequiredForA11y(PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ])),\n    /* eslint-enable max-len */\n\n    /**\n     * An optional accessibility prop to use when the `Dialog` is opened. This should be an id\n     * pointing to some text that describes the content of the dialog. For accessibility\n     * reasons, one of the following props must be defined:\n     * - `title`\n     * - `aria-describedby`\n     * - `aria-labelledby`\n     * - `aria-label`\n     *\n     * An example usage:\n     *\n     * ```js\n     * <Dialog id=\"accessible-example\" visible aria-describedby=\"accessible-content\">\n     *   <p id=\"accessible-content\">This is some content that describes the dialog.</p>\n     * </Dialog>\n     * ```\n     */\n    'aria-describedby': oneRequiredForA11y(PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]), 'title', 'aria-labelledby', 'aria-label'),\n\n    /**\n     * An optional accessibility prop to use when the `title` prop is not given. This should be\n     * an id pointing to a `h` tag that labels the dialog.\n     *\n     * An example usage:\n     *\n     * ```js\n     * <Dialog visible id=\"accessible-example\" aria-labelledby=\"accessible-dialog-label\">\n     *   <h2 id=\"accessible-dialog-label\">Some Accessible Dialog</h2>\n     * </Dialog>\n     * ```\n     */\n    'aria-labelledby': PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * An optional accessibility prop to use when the `title` and `aria-labelledby` props are\n     * not defined. This should be a string that describes what is in the `Dialog`.\n     *\n     * An example usage:\n     *\n     * ```js\n     * <Dialog visible id=\"accessible-example\" aria-label=\"Some Accessible Dialog\">\n     *   <p>Lorem Ipsum</p>\n     * </Dialog>\n     * ```\n     */\n    'aria-label': PropTypes.string,\n\n    /**\n     * An optional style to apply to the dialog's container.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply to the dialog's container.\n     */\n    className: PropTypes.string,\n\n    /**\n     * An optional style to apply to the dialog itself when the `visible` prop is `true`.\n     */\n    dialogStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the dialog itself when the `visible` prop is `true`.\n     */\n    dialogClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to the dialog's content.\n     */\n    contentStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the dialog's content.\n     */\n    contentClassName: PropTypes.string,\n\n    /**\n     * The component to render the dialog's container in.\n     */\n    component: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.string,\n    ]).isRequired,\n\n    /**\n     * The component to render the dialog's content in.\n     */\n    contentComponent: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.string,\n    ]).isRequired,\n\n    /**\n     * The content to display in the dialog once open.\n     */\n    children: PropTypes.node,\n\n    /**\n     * A single action or a list of actions to display in the dialog. This can either be a list\n     * of `FlatButton` props or `<Button flat {...props} />` elements.\n     */\n    actions: PropTypes.oneOfType([\n      PropTypes.element,\n      PropTypes.object,\n      PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.element,\n        PropTypes.object,\n      ])),\n    ]),\n\n    /**\n     * Boolean if the `Dialog` is current visible.\n     */\n    visible: PropTypes.bool.isRequired,\n\n    /**\n     * An optional function to call when the `visible` prop is changed from `false` to `true`.\n     */\n    onShow: PropTypes.func,\n\n    /**\n     * A function to call that will close the dialog. This is required when the `modal` and `fullPage`\n     * props are not `true`.\n     */\n    onHide: (props, propName, ...args) => {\n      let validator = PropTypes.func;\n      if (!props.modal && !props.fullPage) {\n        validator = validator.isRequired;\n      }\n\n      return validator(props, propName, ...args);\n    },\n\n    /**\n     * Boolean if the dialog should behave like a modal. This means that the dialog can only\n     * be closed by clicking on an action instead of also clicking on the overlay.\n     */\n    modal: PropTypes.bool,\n\n    /**\n     * Boolean if the dialog should be displayed as a full page dialog.\n     */\n    fullPage: (props, propName, componentName, ...args) => {\n      if (typeof props[propName] === 'undefined') {\n        return null;\n      }\n      const componentNameSafe = componentName || '<<anonymous>>';\n\n      let err = PropTypes.bool(props, propName, componentName, ...args);\n\n      if (!err && typeof props.title !== 'undefined') {\n        err = new Error(\n          `You provided a \\`title\\` ${location} to the \\`${componentNameSafe}\\` when \\`fullPage\\` ` +\n          'has been set to true. A title for a full page dialog should be rendered as a child instead.'\n        );\n      }\n\n      return err;\n    },\n\n    /**\n     * An optional pageX location to use when rendering a full page dialog. This is used to set the location\n     * the dialog should appear from.\n     */\n    pageX: PropTypes.number,\n\n    /**\n     * An optional pageY location to use when rendering a full page dialog. This is used to set the location\n     * the dialog should appear from.\n     */\n    pageY: PropTypes.number,\n\n    /**\n     * @see {@link Helpers/FocusContainer#additionalFocusKeys}\n     */\n    additionalFocusKeys: Dialog.propTypes.additionalFocusKeys,\n\n    /**\n     * @see {@link Helpers/FocusContainer#initialFocus}\n     */\n    initialFocus: Dialog.propTypes.initialFocus,\n\n    /**\n     * @see {@link Helpers/FocusContainer#focusOnMount}\n     */\n    focusOnMount: Dialog.propTypes.focusOnMount,\n\n    /**\n     * @see {@link Helpers/FocusContainer#containFocus}\n     */\n    containFocus: Dialog.propTypes.containFocus,\n\n    /**\n     * The transition enter timeout for the dialog.\n     */\n    transitionEnterTimeout: PropTypes.number.isRequired,\n\n    /**\n     * The transition leave timeout for the dialog.\n     */\n    transitionLeaveTimeout: PropTypes.number.isRequired,\n\n    /**\n     * Boolean if the dialog should be closable by pressing the escape key.\n     * This will always be considered `false` of the `modal` props is `true`.\n     */\n    closeOnEsc: PropTypes.bool,\n\n    /**\n     * Boolean if the Portal's functionality of rendering in a separate react tree should be applied\n     * to the dialog.\n     *\n     * @see {@link Helpers/Portal}\n     */\n    portal: PropTypes.bool,\n\n    /**\n     * Since the `Dialog` uses the `Portal` component, you can pass an optional HTML Node to render\n     * the dialog in instead of the `document.body`.\n     */\n    renderNode: PropTypes.object,\n\n    /**\n     * Boolean if the dialog should be rendered as the last child in the `renderNode` or `body` instead\n     * of as the first.\n     */\n    lastChild: PropTypes.bool,\n\n    /**\n     * An optional title for the dialog.\n     */\n    title: PropTypes.node,\n\n    /**\n     * Boolean if the dialog should animate into view if it is constructed with `visible` enabled.\n     *\n     * This basically means that if the `Dialog` has `visible` enabled on initial page load, does it animate?\n     * In some cases, it can also mean if the `Dialog` is added to the render tree with `visible` enabled,\n     * does it animate?\n     */\n    defaultVisibleTransitionable: PropTypes.bool,\n\n    /**\n     * Boolean if the Dialog should no longer try to prevent the parent container from scrolling while visible.\n     * In most cases, this will attempt to prevent the main window scrolling. If this dialog is nested in another\n     * dialog, it will attempt to prevent the parent dialog from scrolling.\n     */\n    disableScrollLocking: PropTypes.bool,\n\n    /**\n     * Boolean if the dialog should automatically try to determine if the content\n     * should be padded. It will be padded if the dialog does not contain a `List`.\n     */\n    autopadContent: PropTypes.bool,\n\n    /**\n     * Boolean if the dialog content's size should automatically be resized to overflow\n     * correctly when there is a lot of content. This will calculate and apply some `maxHeight`\n     * to the `contentStyle`.\n     */\n    autosizeContent: PropTypes.bool,\n\n    /**\n     * An optional height to apply to the dialog. This is used if it is easier to just apply height/width\n     * with for specific dialogs instead of in CSS.\n     *\n     * **This prop should not be used if the `fullPage` prop is enabled.**\n     *\n     * @see {@link #fullPage}\n     * @see {@link #width}\n     */\n    height: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * An optional width to apply to the dialog. This is used if it is easier to just apply height/width\n     * with for specific dialogs instead of in CSS.\n     *\n     * **This prop should not be used if the `fullPage` prop is enabled.**\n     *\n     * @see {@link #fullPage}\n     * @see {@link #height}\n     */\n    width: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * Boolean if the actions should be stacked on top of each other. If this value is `undefined`, it will\n     * automatically attempt to guess if the items should be stacked.\n     */\n    stackedActions: PropTypes.bool,\n\n    isOpen: deprecated(PropTypes.bool, 'Use `visible` instead'),\n    transitionName: deprecated(PropTypes.string, 'The transition name will be managed by the component'),\n    transitionEnter: deprecated(PropTypes.bool, 'The transition will always be enforced'),\n    transitionLeave: deprecated(PropTypes.bool, 'The transition will always be enforced'),\n    actionLeft: deprecated(PropTypes.node, 'Use the `fullPage` prop instead'),\n    actionRight: deprecated(PropTypes.node, 'Use the `fullPage` prop instead'),\n    close: deprecated(PropTypes.func, 'Use `onHide` instead.'),\n  };\n\n  static defaultProps = {\n    autopadContent: true,\n    autosizeContent: true,\n    component: 'span',\n    closeOnEsc: true,\n    contentComponent: 'section',\n    focusOnMount: true,\n    transitionEnterTimeout: 300,\n    transitionLeaveTimeout: 300,\n    defaultVisibleTransitionable: false,\n  };\n\n  static contextTypes = {\n    renderNode: PropTypes.object,\n  };\n\n  constructor(props) {\n    super(props);\n\n    const visible = typeof props.isOpen !== 'undefined' ? props.isOpen : props.visible;\n    const dialogVisible = visible && !props.defaultVisibleTransitionable;\n\n    this.state = {\n      active: visible && !props.fullPage,\n      overlay: visible && !props.fullPage,\n      portalVisible: visible,\n      dialogVisible,\n    };\n  }\n\n  componentDidMount() {\n    if (!this.props.isOpen && !this.props.visible) {\n      return;\n    }\n\n    this._mountDialog(this.props);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const visible = typeof nextProps.isOpen !== 'undefined' ? nextProps.isOpen : nextProps.visible;\n    if (this.props.isOpen === visible || this.props.visible === visible) {\n      return;\n    }\n\n    const el = getField(this.props, this.context, 'renderNode') || window;\n    let { scrollX: pageX, scrollY: pageY } = el;\n    if (typeof el.scrollTop !== 'undefined' && typeof el.scrollLeft !== 'undefined') {\n      pageX = el.scrollLeft;\n      pageY = el.scrollTop;\n    } else if (typeof el.scrollY !== 'undefined' && typeof el.scrollX !== 'undefined') {\n      pageX = el.scrollX;\n      pageY = el.scrollY;\n    }\n\n    this._pageX = pageX;\n    this._pageY = pageY;\n\n    if (visible) {\n      this._activeElement = document.activeElement;\n      this._mountPortal(nextProps);\n    } else {\n      this.setState({ dialogVisible: false, active: false });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { visible, closeOnEsc, modal } = this.props;\n    const escapable = !modal && closeOnEsc;\n    const prevEscapable = !prevProps.modal && prevProps.closeOnEsc;\n\n    // Only going to support visible here since it was not implemented before.\n    if (visible === prevProps.visible && escapable === prevEscapable) {\n      return;\n    }\n\n    let add = false;\n    let remove = false;\n\n    if (escapable !== prevEscapable) {\n      add = visible && escapable;\n      remove = !visible || (prevEscapable && !escapable);\n    } else if (escapable) {\n      add = visible;\n      remove = !visible;\n    }\n\n    if (add) {\n      window.addEventListener('keydown', this._handleEscClose);\n    } else if (remove) {\n      window.removeEventListener('keydown', this._handleEscClose);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.props.isOpen || this.props.visible) {\n      toggleScroll(false);\n    }\n\n    if (this.props.visible && (this.props.closeOnEsc && !this.props.modal)) {\n      window.removeEventListener('keydown', this._handleEscClose);\n    }\n\n    if (this._inTimeout) {\n      clearTimeout(this._inTimeout);\n    }\n  }\n\n  _setContainer = (container) => {\n    if (container !== null) {\n      this._container = findDOMNode(container);\n    }\n  };\n\n  _handleEscClose = (e) => {\n    if ((e.which || e.keyCode) === ESC) {\n      (this.props.onHide || this.props.close)(e);\n    }\n  };\n\n  _mountPortal = (props) => {\n    this._mountDialog(props);\n    this.setState({ portalVisible: true });\n  };\n\n  _mountDialog = (props) => {\n    const { fullPage, onShow } = props;\n    this._inTimeout = setTimeout(() => {\n      this._inTimeout = fullPage ? null : setTimeout(() => {\n        this._inTimeout = null;\n        this.setState({ active: true });\n      }, TICK);\n      this.setState({ dialogVisible: true, overlay: !fullPage }, onShow);\n    }, TICK);\n  };\n\n  _unmountPortal = () => {\n    this.setState({ portalVisible: false });\n  };\n\n  _handleClick = (e) => {\n    const visible = typeof this.props.isOpen !== 'undefined' ? this.props.isOpen : this.props.visible;\n    if (this.props.modal || !visible || e.target !== this._container) {\n      return;\n    }\n\n    (this.props.onHide || this.props.close)(e);\n  };\n\n  _handleDialogMounting = (dialog) => {\n    const { disableScrollLocking } = this.props;\n    if (dialog === null) {\n      if (this._activeElement) {\n        this._activeElement.focus();\n      }\n\n      if (!disableScrollLocking) {\n        toggleScroll(false, this.scrollEl);\n      }\n\n      this._activeElement = null;\n      this.setState({ overlay: false });\n    } else {\n      const container = document.querySelector(`#${this.props.id}`);\n      if (!container || disableScrollLocking) {\n        return;\n      }\n\n      let el = getField(this.props, this.context, 'renderNode');\n      let node = container.parentNode;\n      while (node && node.classList && !el) {\n        if (node.classList.contains('md-dialog')) {\n          el = node;\n        }\n\n        node = node.parentNode;\n      }\n\n      this.scrollEl = el;\n      toggleScroll(true, el);\n    }\n  };\n\n  render() {\n    const { overlay, active, dialogVisible, portalVisible } = this.state;\n    const {\n      style,\n      className,\n      dialogStyle,\n      dialogClassName,\n      modal,\n      fullPage,\n      component,\n      transitionEnterTimeout,\n      transitionLeaveTimeout,\n      lastChild,\n      portal,\n      /* eslint-disable no-unused-vars */\n      visible: propVisible,\n      renderNode: propRenderNode,\n      closeOnEsc,\n      onShow,\n      onHide,\n      disableScrollLocking,\n      defaultVisibleTransitionable,\n\n      // deprecated\n      close,\n      isOpen,\n      actionLeft,\n      actionRight,\n      transitionName,\n      transitionEnter,\n      transitionLeave,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n\n    const renderNode = getField(this.props, this.context, 'renderNode');\n    const dialog = (\n      <Dialog\n        key=\"dialog\"\n        style={dialogStyle}\n        className={cn('md-background--card', dialogClassName)}\n        ref={this._handleDialogMounting}\n        centered={!fullPage}\n        fullPage={fullPage}\n        {...props}\n        containerX={this._pageX}\n        containerY={this._pageY}\n        onLeave={this._unmountPortal}\n      />\n    );\n\n    const container = (\n      <CSSTransitionGroup\n        component={component}\n        ref={this._setContainer}\n        style={style}\n        className={cn('md-dialog-container', {\n          'md-overlay': !fullPage && overlay,\n          'md-pointer--hover': !fullPage && overlay && !modal,\n          'md-overlay--active': !fullPage && active && overlay,\n        }, className)}\n        transitionName={`md-dialog--${fullPage ? 'full-page' : 'centered'}`}\n        transitionEnterTimeout={transitionEnterTimeout}\n        transitionLeaveTimeout={transitionLeaveTimeout}\n        tabIndex={-1}\n        onClick={this._handleClick}\n      >\n        {dialogVisible ? dialog : null}\n      </CSSTransitionGroup>\n    );\n\n    if (!portal) {\n      return portalVisible ? container : null;\n    }\n\n    return (\n      <Portal visible={portalVisible} renderNode={renderNode} lastChild={lastChild}>\n        {container}\n      </Portal>\n    );\n  }\n}\n"]}