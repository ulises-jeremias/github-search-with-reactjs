{"version":3,"sources":["../../src/js/Drawers/Drawer.js"],"names":["oneOfDrawerTypes","oneOf","FULL_HEIGHT","CLIPPED","FLOATING","PERSISTENT","PERSISTENT_MINI","TEMPORARY","TEMPORARY_MINI","Drawer","props","defaultProps","mobileMinWidth","tabletMinWidth","desktopMinWidth","mobileType","tabletType","desktopType","constantType","window","type","mobile","tablet","desktop","matchesMedia","min","max","media","matchMedia","matches","defaultVisible","defaultMedia","overlay","state","animating","overlayActive","drawerActive","_initialFix","visible","_updateType","addEventListener","_updateMedia","nextProps","transitionDuration","_animate","nextState","_timeout","clearTimeout","_closeTimeout","removeEventListener","id","style","className","navStyle","navClassName","component","navItems","header","children","inline","position","clickableDesktopOverlay","lastChild","portal","overlayStyle","overlayClassName","propType","propVisible","propRenderNode","renderNode","propNavItemsId","navItemsId","onMediaTypeChange","onVisibilityChange","autoclose","autocloseAfterInk","onVisibilityToggle","closeOnNavItemClick","context","mini","temporary","floating","permanent","Component","navigation","_setNavigation","_handleNavClick","map","zDepth","overlayVisible","drawer","_closeDrawer","DrawerTypes","propTypes","oneOfType","number","string","object","func","element","arrayOf","shape","divider","bool","subheader","primaryText","node","isRequired","propName","others","err","Error","contextTypes","getCurrentMedia","diffType","diffMedia","prevVisible","realState","setState","timeout","setTimeout","_navigation","e","enabled","target","contains","classList","getAttribute","parentNode","callback"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA,MAAMA,mBAAmB,oBAAUC,KAAV,CAAgB,CACvC,sBAAYC,WAD2B,EAEvC,sBAAYC,OAF2B,EAGvC,sBAAYC,QAH2B,EAIvC,sBAAYC,UAJ2B,EAKvC,sBAAYC,eAL2B,EAMvC,sBAAYC,SAN2B,EAOvC,sBAAYC,cAP2B,CAAhB,CAAzB;;AAUA;;;;;;;;;MAQqBC,M;;;;;wCAuTiC;AAAA,YAA7BC,KAA6B,uEAArBD,OAAOE,YAAc;AAAA,YAEhDC,cAFgD,GAS9CF,KAT8C,CAEhDE,cAFgD;AAAA,YAGhDC,cAHgD,GAS9CH,KAT8C,CAGhDG,cAHgD;AAAA,YAIhDC,eAJgD,GAS9CJ,KAT8C,CAIhDI,eAJgD;AAAA,YAKhDC,UALgD,GAS9CL,KAT8C,CAKhDK,UALgD;AAAA,YAMhDC,UANgD,GAS9CN,KAT8C,CAMhDM,UANgD;AAAA,YAOhDC,WAPgD,GAS9CP,KAT8C,CAOhDO,WAPgD;AAAA,YAQhDC,YARgD,GAS9CR,KAT8C,CAQhDQ,YARgD;;AAUlD,YAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjC,cAAMC,QAAOF,gBAAgBR,MAAMU,IAAtB,GAA6BV,MAAMU,IAAnC,GAA0CL,UAAvD;AACA,iBAAO,EAAEM,QAAQ,IAAV,EAAgBC,QAAQ,KAAxB,EAA+BC,SAAS,KAAxC,EAA+CH,WAA/C,EAAP;AACD;;AAED,YAAMC,SAASZ,OAAOe,YAAP,CAAoBZ,cAApB,EAAoCC,iBAAiB,CAArD,CAAf;AACA,YAAMS,SAASb,OAAOe,YAAP,CAAoBX,cAApB,EAAoCC,eAApC,CAAf;AACA,YAAMS,UAAUd,OAAOe,YAAP,CAAoBV,eAApB,CAAhB;;AAEA,YAAIM,aAAJ;AACA,YAAIF,gBAAgBR,MAAMU,IAAtB,IAA8B,yBAAYV,MAAMU,IAAlB,CAAlC,EAA2D;AACzDA,iBAAOV,MAAMU,IAAb;AACD,SAFD,MAEO,IAAIG,OAAJ,EAAa;AAClBH,iBAAOH,WAAP;AACD,SAFM,MAEA,IAAIK,MAAJ,EAAY;AACjBF,iBAAOJ,UAAP;AACD,SAFM,MAEA;AACLI,iBAAOL,UAAP;AACD;;AAED,eAAO,EAAEK,UAAF,EAAQC,cAAR,EAAgBC,cAAhB,EAAwBC,gBAAxB,EAAP;AACD;;;mCAUmBE,G,EAAKC,G,EAAK;AAC5B,YAAIC,oCAAkCF,GAAlC,QAAJ;AACA,YAAIC,GAAJ,EAAS;AACPC,yCAA6BD,GAA7B;AACD;;AAED,eAAOP,OAAOS,UAAP,CAAkBD,KAAlB,EAAyBE,OAAhC;AACD;;;AAMD,oBAAYnB,KAAZ,EAAmB;AAAA;;AAAA,kHACXA,KADW;;AAAA;;AAAA,UAGToB,cAHS,GAGiCpB,KAHjC,CAGToB,cAHS;AAAA,UAGOC,YAHP,GAGiCrB,KAHjC,CAGOqB,YAHP;AAAA,UAGqBC,OAHrB,GAGiCtB,KAHjC,CAGqBsB,OAHrB;;;AAKjB,YAAKC,KAAL,GAAa;AACXZ,gBAAQU,iBAAiB,QADd;AAEXT,gBAAQS,iBAAiB,QAFd;AAGXR,iBAASQ,iBAAiB,SAHf;AAIXG,mBAAW,KAJA;AAKXC,uBAAe,KALJ;AAMXC,sBAAc;AANH,OAAb;;AASA,UAAI,OAAO1B,MAAMU,IAAb,KAAsB,WAA1B,EAAuC;AACrC,cAAKa,KAAL,CAAWb,IAAX,GAAkBV,MAASqB,YAAT,UAAlB;AACD;;AAED,UAAMX,OAAO,wBAASV,KAAT,EAAgB,MAAKuB,KAArB,EAA4B,MAA5B,CAAb;AACA,YAAKI,WAAL,GAAmB,IAAnB;;AAEA,UAAI,OAAO3B,MAAM4B,OAAb,KAAyB,WAA7B,EAA0C;AACxC,YAAIA,WAAU,yBAAYlB,IAAZ,KAAqB,oBAAOA,IAAP,CAAnC;AACA,YAAI,CAACkB,QAAD,IAAY,OAAOR,cAAP,KAA0B,WAA1C,EAAuD;AACrDQ,qBAAUR,cAAV;AACD;;AAED,cAAKG,KAAL,CAAWK,OAAX,GAAqBA,QAArB;AACD;;AAED,UAAMA,UAAU,wBAAS5B,KAAT,EAAgB,MAAKuB,KAArB,EAA4B,SAA5B,CAAhB;;AAEA,YAAKA,KAAL,CAAWE,aAAX,GAA2B,CAAC,OAAOH,OAAP,KAAmB,WAAnB,GAAiCA,OAAjC,GAA2C,yBAAYZ,IAAZ,KAAqB,CAAC,MAAKa,KAAL,CAAWV,OAA7E,KACtBe,OADL;AAEA,YAAKL,KAAL,CAAWG,YAAX,GAA0BE,OAA1B;AAlCiB;AAmClB;;;;2CAEoB;AACnB,YAAI,OAAOnB,MAAP,KAAkB,WAAtB,EAAmC;AACjC,eAAKoB,WAAL,CAAiB,KAAK7B,KAAtB;AACD;AACF;;;0CAEmB;AAClB,YAAI,CAAC,oBAAO,wBAAS,KAAKA,KAAd,EAAqB,KAAKuB,KAA1B,EAAiC,MAAjC,CAAP,CAAL,EAAuD;AACrDd,iBAAOqB,gBAAP,CAAwB,QAAxB,EAAkC,KAAKC,YAAvC;AACD;AACF;;;gDAEyBC,S,EAAW;AAAA,qBAQ/B,KAAKhC,KAR0B;AAAA,YAEjCE,cAFiC,UAEjCA,cAFiC;AAAA,YAGjCG,UAHiC,UAGjCA,UAHiC;AAAA,YAIjCF,cAJiC,UAIjCA,cAJiC;AAAA,YAKjCG,UALiC,UAKjCA,UALiC;AAAA,YAMjCF,eANiC,UAMjCA,eANiC;AAAA,YAOjCG,WAPiC,UAOjCA,WAPiC;;;AAUnC,YAAIyB,UAAU9B,cAAV,KAA6BA,cAA7B,IAA+C8B,UAAU3B,UAAV,KAAyBA,UAAxE,IACC2B,UAAU7B,cAAV,KAA6BA,cAD9B,IACgD6B,UAAU1B,UAAV,KAAyBA,UADzE,IAEC0B,UAAU5B,eAAV,KAA8BA,eAF/B,IAEkD4B,UAAUzB,WAAV,KAA0BA,WAFhF,EAE6F;AAC3F,eAAKsB,WAAL,CAAiBG,SAAjB;AACD;;AAdkC,YAgB3BJ,OAhB2B,GAgBcI,SAhBd,CAgB3BJ,OAhB2B;AAAA,YAgBlBK,kBAhBkB,GAgBcD,SAhBd,CAgBlBC,kBAhBkB;AAAA,YAgBEX,OAhBF,GAgBcU,SAhBd,CAgBEV,OAhBF;;AAiBnC,YAAI,KAAKtB,KAAL,CAAW4B,OAAX,KAAuBI,UAAUJ,OAArC,EAA8C;AAC5C;AACD;;AAED,YAAMlB,OAAO,wBAASsB,SAAT,EAAoB,KAAKT,KAAzB,EAAgC,MAAhC,CAAb;AACA,aAAKW,QAAL,CAAcN,OAAd,EAAuBlB,IAAvB,EAA6BuB,kBAA7B,EAAiDX,OAAjD,EAA0D,KAAKC,KAAL,CAAWV,OAArE;AACD;;;0CAEmBmB,S,EAAWG,S,EAAW;AAAA,YAChCP,OADgC,GACpBO,SADoB,CAChCP,OADgC;;AAExC,YAAI,OAAOI,UAAUJ,OAAjB,KAA6B,WAA7B,IAA4C,KAAKL,KAAL,CAAWK,OAAX,KAAuBA,OAAvE,EAAgF;AAC9E;AACD;AACD,YAAMlB,OAAO,wBAASsB,SAAT,EAAoBG,SAApB,EAA+B,MAA/B,CAAb;AACA,aAAKD,QAAL,CAAcN,OAAd,EAAuBlB,IAAvB,EAA6BsB,UAAUC,kBAAvC,EAA2DD,UAAUV,OAArE,EAA8Ea,UAAUtB,OAAxF;AACD;;;6CAEsB;AACrB,YAAI,KAAKuB,QAAT,EAAmB;AACjBC,uBAAa,KAAKD,QAAlB;AACD;;AAED,YAAI,KAAKE,aAAT,EAAwB;AACtBD,uBAAa,KAAKC,aAAlB;AACD;;AAED7B,eAAO8B,mBAAP,CAA2B,QAA3B,EAAqC,KAAKR,YAA1C;AACD;;;+BAwHQ;AAAA;;AAAA,qBAC4C,KAAKR,KADjD;AAAA,YACCE,aADD,UACCA,aADD;AAAA,YACgBC,YADhB,UACgBA,YADhB;AAAA,YAC8BF,SAD9B,UAC8BA,SAD9B;;AAAA,sBA4CH,KAAKxB,KA5CF;AAAA,YAGLwC,EAHK,WAGLA,EAHK;AAAA,YAILC,KAJK,WAILA,KAJK;AAAA,YAKLC,SALK,WAKLA,SALK;AAAA,YAMLC,QANK,WAMLA,QANK;AAAA,YAOLC,YAPK,WAOLA,YAPK;AAAA,YAQLC,SARK,WAQLA,SARK;AAAA,YASLC,QATK,WASLA,QATK;AAAA,YAULC,MAVK,WAULA,MAVK;AAAA,YAWLC,QAXK,WAWLA,QAXK;AAAA,YAYLC,MAZK,WAYLA,MAZK;AAAA,YAaLC,QAbK,WAaLA,QAbK;AAAA,YAcL5B,OAdK,WAcLA,OAdK;AAAA,YAeL6B,uBAfK,WAeLA,uBAfK;AAAA,YAgBLC,SAhBK,WAgBLA,SAhBK;AAAA,YAiBLC,MAjBK,WAiBLA,MAjBK;AAAA,YAkBLC,YAlBK,WAkBLA,YAlBK;AAAA,YAmBLC,gBAnBK,WAmBLA,gBAnBK;AAAA,YAqBCC,QArBD,WAqBL9C,IArBK;AAAA,YAsBI+C,WAtBJ,WAsBL7B,OAtBK;AAAA,YAuBO8B,cAvBP,WAuBLC,UAvBK;AAAA,YAwBOC,cAxBP,WAwBLC,UAxBK;AAAA,YAyBLrD,YAzBK,WAyBLA,YAzBK;AAAA,YA0BLY,cA1BK,WA0BLA,cA1BK;AAAA,YA2BLC,YA3BK,WA2BLA,YA3BK;AAAA,YA4BLhB,UA5BK,WA4BLA,UA5BK;AAAA,YA6BLH,cA7BK,WA6BLA,cA7BK;AAAA,YA8BLI,UA9BK,WA8BLA,UA9BK;AAAA,YA+BLH,cA/BK,WA+BLA,cA/BK;AAAA,YAgCLI,WAhCK,WAgCLA,WAhCK;AAAA,YAiCLH,eAjCK,WAiCLA,eAjCK;AAAA,YAkCL6B,kBAlCK,WAkCLA,kBAlCK;AAAA,YAmCL6B,iBAnCK,WAmCLA,iBAnCK;AAAA,YAoCLC,kBApCK,WAoCLA,kBApCK;AAAA,YAqCLC,SArCK,WAqCLA,SArCK;AAAA,YAsCLC,iBAtCK,WAsCLA,iBAtCK;AAAA,YAwCLC,kBAxCK,WAwCLA,kBAxCK;AAAA,YAyCLC,mBAzCK,WAyCLA,mBAzCK;AAAA,YA2CFnE,KA3CE;;AAAA,YA8CD6D,UA9CC,GA8Cc,KAAK7D,KA9CnB,CA8CD6D,UA9CC;;AA+CP,YAAI,CAACA,UAAD,IAAerB,EAAnB,EAAuB;AACrBqB,uBAAgBrB,EAAhB;AACD;;AAjDM,YAmDC3B,OAnDD,GAmDa,KAAKU,KAnDlB,CAmDCV,OAnDD;;AAoDP,YAAM8C,aAAa,wBAAS,KAAK3D,KAAd,EAAqB,KAAKoE,OAA1B,EAAmC,YAAnC,CAAnB;AACA,YAAM1D,OAAO,wBAAS,KAAKV,KAAd,EAAqB,KAAKuB,KAA1B,EAAiC,MAAjC,CAAb;AACA,YAAMK,UAAU,wBAAS,KAAK5B,KAAd,EAAqB,KAAKuB,KAA1B,EAAiC,SAAjC,CAAhB;AACA,YAAM8C,OAAO,oBAAO3D,IAAP,CAAb;AACA,YAAM4D,YAAY,yBAAY5D,IAAZ,CAAlB;AACA,YAAM6D,WAAW,sBAAY7E,QAAZ,KAAyBgB,IAA1C;AACA,YAAM8D,YAAY,yBAAY9D,IAAZ,CAAlB;;AAEA,YAAI+D,kBAAJ;AACA,YAAI5B,SAAJ,EAAe;AACb4B,sBAAY5B,SAAZ;AACD,SAFD,MAEO,IAAIC,QAAJ,EAAc;AACnB2B,sBAAY,KAAZ;AACD,SAFM,MAEA;AACLA,sBAAY,OAAZ;AACD;;AAED,YAAIC,mBAAJ;AACA,YAAI5B,QAAJ,EAAc;AACZ4B,uBACE;AAAA;AAAA;AACE,mBAAK,KAAKC,cADZ;AAEE,mBAAI,YAFN;AAGE,kBAAId,UAHN;AAIE,qBAAOlB,QAJT;AAKE,yBAAW,0BAAG,iBAAH,EAAsB;AAC/B,uCAAuB0B,QAAQ,CAACzC,OADD;AAE/B,iCAAiB2C;AAFc,eAAtB,EAGR3B,YAHQ,CALb;AASE,uBAAS,KAAKgC;AAThB;AAWG9B,qBAAS+B,GAAT;AAXH,WADF;AAeD;AACD,YAAIC,SAAS,CAAb;AACA,YAAIP,YAAYtB,MAAhB,EAAwB;AACtB6B,mBAAS,CAAT;AACD,SAFD,MAEO,IAAI,CAACT,IAAD,IAASC,SAAT,IAAsB1C,OAA1B,EAAmC;AACxCkD,mBAAS,CAAT;AACD;;AAED,YAAMC,iBAAiB,CAACV,IAAD,KAAU,CAACxD,OAAD,IAAYsC,uBAAtB,MACjB7B,WAAWgD,SADM,MAEjB9C,aAAaI,OAFI,CAAvB;;AAIA,YAAMoD,SACJ;AAAA;AAAA,uBACMhF,KADN;AAEE,gBAAIwC,EAFN;AAGE,iBAAI,QAHN;AAIE,uBAAWiC,SAJb;AAKE,oBAAQK,MALV;AAME,0BAAc,KANhB;AAOE,mBAAOrC,KAPT;AAQE,uBAAW,0BAAG,WAAH,kDACMS,QADN,EACmB,CAACD,MADpB,wBAET,kBAFS,EAEW,CAACA,MAFZ,wBAGT,mBAHS,EAGYA,MAHZ,wBAIT,mBAJS,EAIYoB,QAAQ3C,YAJpB,wBAKT,iBALS,EAKU2C,IALV,wBAMT,6BANS,EAMsB,CAACA,IAAD,IAAS,CAACG,SAAV,IAAuB5C,OAN7C,wBAOT,6BAPS,EAOsB,CAACyC,IAAD,IAAS,CAACG,SAAV,IAAuB,CAAC5C,OAP9C,wBAQT,eARS,EAQQqB,UAAUsB,QARlB,wBAST,qBATS,EASc,CAACA,QAAD,IAAa,CAACtB,MAT5B,SAURP,SAVQ;AARb;AAoBGK,gBApBH;AAqBG2B,oBArBH;AAsBG1B,kBAtBH;AAuBE;AACE,mBAAOM,YADT;AAEE,uBAAWC,gBAFb;AAGE,oBAAQ9B,aAHV;AAIE,qBAAS,KAAKwD,YAJhB;AAKE,qBAASF,cALX;AAME,wBAAYpB;AANd;AAvBF,SADF;;AAmCA,YAAIV,UAAUuB,SAAd,EAAyB;AACvB,iBAAOQ,MAAP;AACD,SAFD,MAEO,IAAI,CAAC3B,MAAL,EAAa;AAClB,iBAAOgB,QAAQ7C,SAAR,IAAqBI,OAArB,GAA+BoD,MAA/B,GAAwC,IAA/C;AACD;;AAED,eACE;AAAA;AAAA,YAAQ,SAASxD,aAAaI,OAA9B,EAAuC,YAAY+B,UAAnD,EAA+D,WAAWP,SAA1E;AACG4B;AADH,SADF;AAKD;;;;;;AAltBkBjF,Q,CACZmF,W;AADYnF,Q,CAEZoF,S,GAAY;AACjB;;;;;;AAMA3C,QAAI,oBAAU4C,SAAV,CAAoB,CACtB,oBAAUC,MADY,EAEtB,oBAAUC,MAFY,CAApB,CAPa;;AAYjB;;;;AAIAzB,gBAAY,oBAAUuB,SAAV,CAAoB,CAC9B,oBAAUC,MADoB,EAE9B,oBAAUC,MAFoB,CAApB,CAhBK;;AAqBjB;;;AAGA7C,WAAO,oBAAU8C,MAxBA;;AA0BjB;;;AAGA7C,eAAW,oBAAU4C,MA7BJ;;AA+BjB;;;AAGA3C,cAAU,oBAAU4C,MAlCH;;AAoCjB;;;AAGA3C,kBAAc,oBAAU0C,MAvCP;;AAyCjB;;;AAGAhC,kBAAc,oBAAUiC,MA5CP;;AA8CjB;;;AAGAhC,sBAAkB,oBAAU+B,MAjDX;;AAmDjB;;;;AAIAzC,eAAW,oBAAUuC,SAAV,CAAoB,CAC7B,oBAAUI,IADmB,EAE7B,oBAAUC,OAFmB,CAApB,CAvDM;;AA4DjB;;;;;;;;;;;AAWA3C,cAAU,oBAAU4C,OAAV,CAAkB,oBAAUN,SAAV,CAAoB,CAC9C,oBAAUK,OADoC,EAE9C,oBAAUE,KAAV,CAAgB;AACdC,eAAS,oBAAUC,IADL;AAEdC,iBAAW,oBAAUD,IAFP;AAGdE,mBAAa,oBAAUC;AAHT,KAAhB,CAF8C,CAApB,CAAlB,CAvEO;;AAgFjB;;;AAGAhC,eAAW,oBAAU6B,IAnFJ;;AAqFjB;;;AAGA9C,YAAQ,oBAAUiD,IAxFD;;AA0FjB;;;AAGAhD,cAAU,oBAAUgD,IA7FH;;AA+FjB;;;;AAIA3F,gBAAY,oBAAUd,KAAV,CAAgB,CAC1BQ,OAAOmF,WAAP,CAAmBrF,SADO,EAE1BE,OAAOmF,WAAP,CAAmBpF,cAFO,CAAhB,EAGTmG,UAtGc;;AAwGjB;;;AAGA/F,oBAAgB,oBAAUmF,MAAV,CAAiBY,UA3GhB;;AA6GjB;;;;AAIA3F,gBAAYhB,iBAAiB2G,UAjHZ;;AAmHjB;;;AAGA9F,oBAAgB,oBAAUkF,MAAV,CAAiBY,UAtHhB;;AAwHjB;;;;AAIA1F,iBAAajB,iBAAiB2G,UA5Hb;;AA8HjB;;;AAGA7F,qBAAiB,oBAAUiF,MAAV,CAAiBY,UAjIjB;;AAmIjB;;;;;;;AAOAvF,UAAM,cAACV,KAAD,EAAQkG,QAAR,EAAkBrD,SAAlB,EAA2C;AAAA,wCAAXsD,MAAW;AAAXA,cAAW;AAAA;;AAC/C,UAAMzF,OAAOV,MAAMkG,QAAN,CAAb;AACA,UAAI,yBAAYxF,IAAZ,CAAJ,EAAuB;AACrB,eAAOpB,mCAAiBU,KAAjB,EAAwBkG,QAAxB,EAAkCrD,SAAlC,SAAgDsD,MAAhD,EAAP;AACD;;AAED,UAAIC,MAAM9G,mCAAiBU,KAAjB,EAAwBkG,QAAxB,EAAkCrD,SAAlC,SAAgDsD,MAAhD,EAAV;AACA,UAAI,CAACC,GAAD,IAAQ,OAAO1F,IAAP,KAAgB,WAAxB,IAAuC,CAAC,oBAAOA,IAAP,CAAxC,IAAwD,OAAOV,MAAM8D,iBAAb,KAAmC,WAA/F,EAA4G;AAC1GsC,cAAM,IAAIC,KAAJ,CACJ,qBAAoBH,QAApB,sBAA8CrD,SAA9C,iHACwEqD,QADxE,kBAEA,+BAHI,CAAN;AAKD;;AAED,aAAOE,GAAP;AACD,KA1JgB;;AA4JjB;;;;;;;;;;;;;AAaAtC,uBAAmB,oBAAU0B,IAzKZ;;AA2KjB;;;;;AAKAnE,kBAAc,oBAAU9B,KAAV,CAAgB,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,CAAhB,EAAiD0G,UAhL9C;;AAkLjB;;;;;AAKA3E,aAAS,oBAAUuE,IAvLF;;AAyLjB;;;;;;;AAOAxC,YAAQ,oBAAUwC,IAhMD;;AAkMjB;;;;;;;AAOAlC,gBAAY,oBAAU4B,MAzML;;AA2MjB;;;;;;;AAOAnC,eAAW,oBAAUyC,IAlNJ;;AAoNjB;;;;;;;AAOAzE,oBAAgB,oBAAUyE,IA3NT;;AA6NjB;;;;AAIAjE,aAAS,0BAAW,oBAAUiE,IAArB,EAA2B,oBAA3B,EAAiD,gBAAjD,CAjOQ;;AAmOjB;;;;;;;;AAQA9B,wBAAoB,oBAAUyB,IA3Ob;;AA6OjB;;;;;;;AAOAtC,cAAU,oBAAU3D,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,CAAhB,EAAmC0G,UApP5B;;AAsPjB;;;;AAIAhD,YAAQ,oBAAU4C,IA1PD;;AA4PjB;;;AAGA5D,wBAAoB,oBAAUoD,MAAV,CAAiBY,UA/PpB;;AAiQjB;;;;AAIA9C,6BAAyB,oBAAU0C,IArQlB;;AAuQjB;;;;;;AAMA5B,uBAAmB,oBAAU4B,IA7QZ;;AA+QjB;;;;;;;AAOArF,kBAAc,oBAAUqF,IAAV,CAAeI,UAtRZ;;AAwRjB9B,yBAAqB,0BAAW,oBAAU0B,IAArB,EAA2B,yBAA3B,CAxRJ;AAyRjB3B,wBAAoB,0BAAW,oBAAUsB,IAArB,EAA2B,kCAA3B;AAzRH,G;AAFAzF,Q,CA8RZE,Y,GAAe;AACpBoB,kBAAc,QADM;AAEpBhB,gBAAYN,OAAOmF,WAAP,CAAmBrF,SAFX;AAGpBK,2CAHoB;AAIpBI,gBAAYP,OAAOmF,WAAP,CAAmBvF,UAJX;AAKpBQ,2CALoB;AAMpBI,iBAAaR,OAAOmF,WAAP,CAAmB1F,WANZ;AAOpBY,6CAPoB;AAQpB8C,cAAU,MARU;AASpBjB,wBAAoB,GATA;AAUpB+B,eAAW,IAVS;AAWpBb,6BAAyB,IAXL;AAYpB3C,kBAAc;AAZM,G;AA9RHT,Q,CAyWZuG,Y,GAAe;AACpB3C,gBAAY,oBAAU4B;AADF,G;;;;;SAmGtB1D,W,GAAc,UAAC7B,KAAD,EAAW;AAAA,UAErB8D,iBAFqB,GAInB9D,KAJmB,CAErB8D,iBAFqB;AAAA,UAGrBxC,OAHqB,GAInBtB,KAJmB,CAGrBsB,OAHqB;;;AAMvB,UAAMyC,qBAAqB/D,MAAMkE,kBAAN,IAA4BlE,MAAM+D,kBAA7D;;AAEA,UAAIxC,QAAQxB,OAAOwG,eAAP,CAAuBvG,KAAvB,CAAZ;AACA,UAAMwG,WAAW,wBAASxG,KAAT,EAAgB,OAAKuB,KAArB,EAA4B,MAA5B,MAAwCA,MAAMb,IAA/D;AACA,UAAM+F,YAAYlF,MAAMZ,MAAN,KAAiB,OAAKY,KAAL,CAAWZ,MAA5B,IACbY,MAAMX,MAAN,KAAiB,OAAKW,KAAL,CAAWX,MADf,IAEbW,MAAMV,OAAN,KAAkB,OAAKU,KAAL,CAAWV,OAFlC;;AAIA,UAAIiD,sBAAsB0C,YAAYC,SAAlC,CAAJ,EAAkD;AAChD3C,0BAAkBvC,MAAMb,IAAxB,EAA8B,EAAEC,QAAQY,MAAMZ,MAAhB,EAAwBC,QAAQW,MAAMX,MAAtC,EAA8CC,SAASU,MAAMV,OAA7D,EAA9B;AACD;;AAED,UAAI2F,QAAJ,EAAc;AACZ,YAAI5E,UAAU,yBAAYL,MAAMb,IAAlB,CAAd;AACA,YAAI,OAAKiB,WAAT,EAAsB;AACpB,cAAI3B,MAAMoB,cAAV,EAA0B;AACxBQ,sBAAU5B,MAAMoB,cAAhB;AACD,WAFD,MAEO,IAAIpB,MAAM4B,OAAV,EAAmB;AACxBA,sBAAU5B,MAAM4B,OAAhB;AACD;AACF;;AAED,YAAM8E,cAAc,wBAAS1G,KAAT,EAAgB,OAAKuB,KAArB,EAA4B,SAA5B,CAApB;AACA,YAAIwC,sBAAuBnC,YAAY8E,WAAvC,EAAqD;AACnD3C,6BAAmBnC,OAAnB;AACD;;AAED,YAAI,OAAO5B,MAAM4B,OAAb,KAAyB,WAA7B,EAA0C;AACxCL,gBAAMK,OAAN,GAAgBA,OAAhB;AACD;AACF,OAlBD,MAkBO,IAAI,OAAKD,WAAL,IAAoB8E,SAAxB,EAAmC;AACxClF,cAAME,aAAN,GAAsB,CAAC,OAAOH,OAAP,KAAmB,WAAnB,GAAiCA,OAAjC,GAA2C,yBAAYC,MAAMb,IAAlB,KAA2B,CAACa,MAAMV,OAA9E,KACjB,wBAASb,KAAT,EAAgB,OAAKuB,KAArB,EAA4B,SAA5B,CADL;AAED;;AAED,UAAI,OAAOvB,MAAMU,IAAb,KAAsB,WAA1B,EAAuC;AAAA,sBACNa,KADM;AAAA,YAC7Bb,IAD6B,WAC7BA,IAD6B;AAAA,YACpBiG,SADoB;;AACC;AACtCpF,gBAAQoF,SAAR;AACD;;AAED,aAAKhF,WAAL,GAAmB,KAAnB;AACA,aAAKiF,QAAL,CAAcrF,KAAd;AACD,K;;SAEDQ,Y,GAAe,YAAM;AACnB,aAAKF,WAAL,CAAiB,OAAK7B,KAAtB;AACD,K;;SAEDkC,Q,GAAW,UAACN,OAAD,EAAUlB,IAAV,EAAgBmG,OAAhB,EAAyBvF,OAAzB,EAAkCT,OAAlC,EAA8C;AACvD,UAAIe,OAAJ,EAAa;AACX,eAAKiF,OAAL,GAAeC,WAAW,YAAM;AAC9B,iBAAKD,OAAL,GAAe,IAAf;;AAEA,iBAAKD,QAAL,CAAc;AACZnF,2BAAeH,WAAY,yBAAYZ,IAAZ,KAAqB,CAACG,OADrC;AAEZa,0BAAc,IAFF;AAGZF,uBAAW;AAHC,WAAd;AAKD,SARc,mCAAf;AASD,OAVD,MAUO;AACL,eAAKY,QAAL,GAAgB0E,WAAW,YAAM;AAC/B,iBAAK1E,QAAL,GAAgB,IAAhB;;AAEA,iBAAKwE,QAAL,CAAc,EAAEpF,WAAW,KAAb,EAAd;AACD,SAJe,EAIbqF,OAJa,CAAhB;AAKA,eAAKD,QAAL,CAAc,EAAEpF,WAAW,IAAb,EAAmBC,eAAe,KAAlC,EAAyCC,cAAc,KAAvD,EAAd;AACD;AACF,K;;SAEDiD,c,GAAiB,UAACD,UAAD,EAAgB;AAC/B,aAAKqC,WAAL,GAAmB,2BAAYrC,UAAZ,CAAnB;AACD,K;;SAEDE,e,GAAkB,UAACoC,CAAD,EAAO;AAAA,oBACuC,OAAKhH,KAD5C;AAAA,UACfmE,mBADe,WACfA,mBADe;AAAA,UACMH,SADN,WACMA,SADN;AAAA,UACiBC,iBADjB,WACiBA,iBADjB;;AAEvB,UAAMgD,UAAU,OAAO9C,mBAAP,KAA+B,WAA/B,GAA6CA,mBAA7C,GAAmEH,SAAnF;AACA,UAAI,CAACiD,OAAD,IAAY,CAAC,yBAAY,wBAAS,OAAKjH,KAAd,EAAqB,OAAKuB,KAA1B,EAAiC,MAAjC,CAAZ,CAAjB,EAAwE;AACtE;AACD;;AALsB,UAOjB2F,MAPiB,GAONF,CAPM,CAOjBE,MAPiB;;AAQvB,aAAOA,UAAU,OAAKH,WAAL,CAAiBI,QAAjB,CAA0BD,MAA1B,CAAjB,EAAoD;AAClD,YAAIA,OAAOE,SAAP,CAAiBD,QAAjB,CAA0B,cAA1B,CAAJ,EAA+C;AAC7C;AACA,cAAID,OAAOG,YAAP,CAAoB,eAApB,MAAyC,IAA7C,EAAmD;AACjD;AACD;;AAED,iBAAK/E,aAAL,GAAqBwE,WAAW,YAAM;AACpC,mBAAKxE,aAAL,GAAqB,IAArB;;AAEA,mBAAK2C,YAAL,CAAkB+B,CAAlB;AACD,WAJoB,EAIlB/C,oBAAoB,GAApB,mCAJkB,CAArB;AAKA;AACD;;AAEDiD,iBAASA,OAAOI,UAAhB;AACD;AACF,K;;SAEDrC,Y,GAAe,YAAM;AAAA,oBACgC,OAAKjF,KADrC;AAAA,UACX+D,kBADW,WACXA,kBADW;AAAA,UACSG,kBADT,WACSA,kBADT;;AAEnB,UAAMqD,WAAWrD,sBAAsBH,kBAAvC;AACA,UAAIwD,QAAJ,EAAc;AACZA,iBAAS,KAAT;AACD;;AAED,UAAI,OAAO,OAAKvH,KAAL,CAAW4B,OAAlB,KAA8B,WAAlC,EAA+C;AAC7C,eAAKgF,QAAL,CAAc,EAAEhF,SAAS,KAAX,EAAd;AACD;AACF,K;;;oBAhkBkB7B,M","file":"Drawer.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { findDOMNode } from 'react-dom';\nimport cn from 'classnames';\nimport deprecated from 'react-prop-types/lib/deprecated';\n\nimport { MOBILE_MIN_WIDTH, TABLET_MIN_WIDTH, DESKTOP_MIN_WIDTH } from '../constants/media';\nimport TICK from '../constants/CSSTransitionGroupTick';\nimport getField from '../utils/getField';\nimport mapToListParts from '../utils/mapToListParts';\nimport controlled from '../utils/PropTypes/controlled';\nimport Paper from '../Papers/Paper';\nimport Portal from '../Helpers/Portal';\nimport List from '../Lists/List';\nimport Overlay from './Overlay';\n\nimport { isTemporary, isPermanent, isMini } from './isType';\nimport DrawerTypes from './DrawerTypes';\n\nconst oneOfDrawerTypes = PropTypes.oneOf([\n  DrawerTypes.FULL_HEIGHT,\n  DrawerTypes.CLIPPED,\n  DrawerTypes.FLOATING,\n  DrawerTypes.PERSISTENT,\n  DrawerTypes.PERSISTENT_MINI,\n  DrawerTypes.TEMPORARY,\n  DrawerTypes.TEMPORARY_MINI,\n]);\n\n/**\n * The `Drawer` component is used for having a sliding panel of content or navigation\n * that appears from the side of a screen.\n *\n * If the `Drawer` uses any of the `_MINI` drawer types, you will need to also create another\n * `Drawer` that is not `_MINI`. Transitioning the `width` on mobile devices is very sluggish,\n * and it isn't much more work to create another drawer.\n */\nexport default class Drawer extends PureComponent {\n  static DrawerTypes = DrawerTypes;\n  static propTypes = {\n    /**\n     * An optional id to provide to the drawer. This is generally a good idea to provide if\n     * there are any `navItems` defined.\n     *\n     * @see {@link #navItemsId}\n     */\n    id: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * An optional id to provide to the navItems list. If this is omitted and the `id` prop is\n     * defined, it will be defaulted to `${id}-nav-items`.\n     */\n    navItemsId: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * An optional style to apply.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply.\n     */\n    className: PropTypes.string,\n\n    /**\n     * An optional style to apply to the `List` surrounding the `navItems`.\n     */\n    navStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the `List` surrounding the `navItems`.\n     */\n    navClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to the overlay.\n     */\n    overlayStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the overlay.\n     */\n    overlayClassName: PropTypes.string,\n\n    /**\n     * An optional component to render the drawer in. When this prop is undefined, the drawer\n     * will be rendered as a `nav` if the `navItems` prop is defined, otherwise an `aside`.\n     */\n    component: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.element,\n    ]),\n\n    /**\n     * An optional list of navigation items to display in the drawer. This list can either contain\n     * a valid child component for a `List` or an object used to create a `Divider`, `Subheader`,\n     * or `ListItem`.\n     *\n     * - To create a divider in the list, set a `divider` key to `true`. Any other keys will be\n     * passed to the `Divider` component.\n     * - To create a subheader in the list, set the `subheader` key to `true`. Any other keys will\n     * be passed to the `Subheader` component.\n     * - To create a list item, just create an object with any normal `ListItem` props.\n     */\n    navItems: PropTypes.arrayOf(PropTypes.oneOfType([\n      PropTypes.element,\n      PropTypes.shape({\n        divider: PropTypes.bool,\n        subheader: PropTypes.bool,\n        primaryText: PropTypes.node,\n      }),\n    ])),\n\n    /**\n     * Boolean if a temporary drawer should close when a nav item is clicked.\n     */\n    autoclose: PropTypes.bool,\n\n    /**\n     * An optional header to display. This _should_ normally be a toolbar.\n     */\n    header: PropTypes.node,\n\n    /**\n     * Any additional children to display after the `header` and `navItems`.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The drawer type to use when the current device matches the mobile\n     * media query.\n     */\n    mobileType: PropTypes.oneOf([\n      Drawer.DrawerTypes.TEMPORARY,\n      Drawer.DrawerTypes.TEMPORARY_MINI,\n    ]).isRequired,\n\n    /**\n     * The min-width to use for the mobile media query.\n     */\n    mobileMinWidth: PropTypes.number.isRequired,\n\n    /**\n     * The drawer type to use when the current device matches the tablet\n     * media query.\n     */\n    tabletType: oneOfDrawerTypes.isRequired,\n\n    /**\n     * The min-width to use for the tablet media query.\n     */\n    tabletMinWidth: PropTypes.number.isRequired,\n\n    /**\n     * The drawer type to use when the current device matches the desktop media\n     * query.\n     */\n    desktopType: oneOfDrawerTypes.isRequired,\n\n    /**\n     * The min-width for a desktop screen.\n     */\n    desktopMinWidth: PropTypes.number.isRequired,\n\n    /**\n     * An optional type to enforce across all media sizes. Since `mobile` devices are\n     * included, you are required to manually specify when the `type` should be `temporary`.\n     *\n     * When the `type` is not one of the `temporary` types, the `onMediaTypeChange` prop\n     * must be provided.\n     */\n    type: (props, propName, component, ...others) => {\n      const type = props[propName];\n      if (isTemporary(type)) {\n        return oneOfDrawerTypes(props, propName, component, ...others);\n      }\n\n      let err = oneOfDrawerTypes(props, propName, component, ...others);\n      if (!err && typeof type !== 'undefined' && !isMini(type) && typeof props.onMediaTypeChange === 'undefined') {\n        err = new Error(\n          `You provided a \\`${propName}\\` prop to the ${component} without the \\`onMediaTypeChange\\` ` +\n          `handler. The \\`onMediaTypeChange\\` prop must be specified when the \\`${propName}\\` is not ` +\n          'one of the `temporary` types.'\n        );\n      }\n\n      return err;\n    },\n\n    /**\n     * An optional function to call when the drawer's type changes when the screen resizes.\n     * The callback will include the new `type` that should be used for the screen size,\n     * and an object containing the media matches for `mobile`, `tablet`, and `desktop`.\n     *\n     * ```js\n     * this.props.onMediaTypeChange(Drawer.DrawerTypes.TEMPORARY, {\n     *   mobile: true,\n     *   tablet: false,\n     *   desktop: false,\n     * });\n     * ```\n     */\n    onMediaTypeChange: PropTypes.func,\n\n    /**\n     * The default drawer type to display on initial render. The drawer will automatically\n     * adjust itself to the correct media once it has mounted. This prop is really only useful\n     * for server side rendering.\n     */\n    defaultMedia: PropTypes.oneOf(['mobile', 'tablet', 'desktop']).isRequired,\n\n    /**\n     * Boolean if there should be a visible overlay when the drawer is visible. The default behavior\n     * is to only include a visible overlay when the `type` is `TEMPORARY` or `TEMPORARY_MINI` and\n     * the device is not a desktop.\n     */\n    overlay: PropTypes.bool,\n\n    /**\n     * Boolean if the Portal's functionality of rendering in a separate react tree should be applied\n     * to the drawer. The overlay that appears for temporary type drawers will still appear in the\n     * separate subtree.\n     *\n     * @see {@link Helpers/Portal}\n     */\n    portal: PropTypes.bool,\n\n    /**\n     * An optional DOM Node to render the drawer into. The default is to render as\n     * the first child in the `body`.\n     *\n     * > This prop will not be used when the drawer is of the permanent type or `inline` is specified\n     * since the `Portal` component will not be used.\n     */\n    renderNode: PropTypes.object,\n\n    /**\n     * Boolean if the drawer should be rendered as the last child instead of the first child\n     * in the `renderNode` or `body`.\n     *\n     * > This prop will not be used when the drawer is of the permanent type or `inline` is specified\n     * since the `Portal` component will not be used.\n     */\n    lastChild: PropTypes.bool,\n\n    /**\n     * Boolean if the drawer is visible by default. If this is omitted, the drawer will be visible\n     * if the current drawer type is NOT `Drawer.DrawerTypes.TEMPORARY` or `Drawer.DrawerTypes.TEMPORARY_MINI`.\n     *\n     * This basically means that if you are using the default configuration, a mobile device's drawer\n     * will be hidden while tablets and desktops will be visible.\n     */\n    defaultVisible: PropTypes.bool,\n\n    /**\n     * Boolean if the drawer is visible. This will force the component to define the `onVisibilityChange`\n     * prop as well as manually updating the drawer's visibility.\n     */\n    visible: controlled(PropTypes.bool, 'onVisibilityChange', 'defaultVisible'),\n\n    /**\n     * An optional function to call when the visibility of the drawer is changed. The function will\n     * be called with the new visibility state.\n     *\n     * ```js\n     * onVisibilityChange(!currentlyVisible);\n     * ```\n     */\n    onVisibilityChange: PropTypes.func,\n\n    /**\n     * The drawer's position on the page when it is not `inline`. When the drawer's position is `left`,\n     * the width will be `calc(100vw - 56px)` on mobile devices and `$md-drawer-desktop-width` on desktops.\n     *\n     * When the position is `right`, the width will be `100vw` for mobile devices and scaling to the drawer's\n     * children width on desktops.\n     */\n    position: PropTypes.oneOf(['left', 'right']).isRequired,\n\n    /**\n     * Boolean if the drawer should be displayed inline instead of fixed to the page. When this prop\n     * is enabled, the `position` prop will not be used.\n     */\n    inline: PropTypes.bool,\n\n    /**\n     * The `$md-drawer-transition-time` value from sass.\n     */\n    transitionDuration: PropTypes.number.isRequired,\n\n    /**\n     * Boolean if the temporary drawer's overlay should be created on desktop screens. This is really used so that\n     * the drawer will close when a user clicks anywhere on the page except in the drawer.\n     */\n    clickableDesktopOverlay: PropTypes.bool,\n\n    /**\n     * Boolean if the `autoclose` feature should wait for the ink transition to finish before automatically\n     * closing the drawer. This will add a `300ms` delay. If this is `false`, there will only be a `17ms` delay.\n     *\n     * > The delay is required so that any event listeners will still be correctly invoked when an item is clicked.\n     */\n    autocloseAfterInk: PropTypes.bool,\n\n    /**\n     * Boolean if the `type` prop should be constant across all media sizes. This is only valid if the `type` is\n     * one of the temporary types.\n     *\n     * This will basically mean that when attempting to do a media adjustment, it will use the `type` prop instead of\n     * `mobileType`, `tabletType`, and `desktopType` to determine the next drawer type.\n     */\n    constantType: PropTypes.bool.isRequired,\n\n    closeOnNavItemClick: deprecated(PropTypes.bool, 'Use `autoclose` instead'),\n    onVisibilityToggle: deprecated(PropTypes.func, 'Use `onVisibilityChange` instead'),\n  };\n\n  static defaultProps = {\n    defaultMedia: 'mobile',\n    mobileType: Drawer.DrawerTypes.TEMPORARY,\n    mobileMinWidth: MOBILE_MIN_WIDTH,\n    tabletType: Drawer.DrawerTypes.PERSISTENT,\n    tabletMinWidth: TABLET_MIN_WIDTH,\n    desktopType: Drawer.DrawerTypes.FULL_HEIGHT,\n    desktopMinWidth: DESKTOP_MIN_WIDTH,\n    position: 'left',\n    transitionDuration: 300,\n    autoclose: true,\n    clickableDesktopOverlay: true,\n    constantType: true,\n  };\n\n  /**\n   * Determines the current media and returns an object containing matches for `mobile`, `tablet`, `desktop`,\n   * and the current drawer type. This expects a `props` object of the drawer.\n   *\n   * If this is used server side, it will default to only matching mobile.\n   *\n   * @param {Object=} props - The current drawer's prop shape to extract the mobile, tablet,\n   *    and desktop type/min widths. This defaults to the drawer's default props.\n   * @return {Object} an object containing the media matches and the current type to use for the drawer.\n   */\n  static getCurrentMedia(props = Drawer.defaultProps) {\n    const {\n      mobileMinWidth,\n      tabletMinWidth,\n      desktopMinWidth,\n      mobileType,\n      tabletType,\n      desktopType,\n      constantType,\n    } = props;\n    if (typeof window === 'undefined') {\n      const type = constantType && props.type ? props.type : mobileType;\n      return { mobile: true, tablet: false, desktop: false, type };\n    }\n\n    const mobile = Drawer.matchesMedia(mobileMinWidth, tabletMinWidth - 1);\n    const tablet = Drawer.matchesMedia(tabletMinWidth, desktopMinWidth);\n    const desktop = Drawer.matchesMedia(desktopMinWidth);\n\n    let type;\n    if (constantType && props.type && isTemporary(props.type)) {\n      type = props.type;\n    } else if (desktop) {\n      type = desktopType;\n    } else if (tablet) {\n      type = tabletType;\n    } else {\n      type = mobileType;\n    }\n\n    return { type, mobile, tablet, desktop };\n  }\n\n  /**\n   * Simply does a `window.matchMedia(query)` where the query gets defined as a min width\n   * and optional max width.\n   *\n   * @param {number} min - The min width for the media query.\n   * @param {number=} max - An optional max width to include for the media query.\n   * @return {boolean} true if the media matches.\n   */\n  static matchesMedia(min, max) {\n    let media = `screen and (min-width: ${min}px)`;\n    if (max) {\n      media += ` and (max-width: ${max}px)`;\n    }\n\n    return window.matchMedia(media).matches;\n  }\n\n  static contextTypes = {\n    renderNode: PropTypes.object,\n  };\n\n  constructor(props) {\n    super(props);\n\n    const { defaultVisible, defaultMedia, overlay } = props;\n\n    this.state = {\n      mobile: defaultMedia === 'mobile',\n      tablet: defaultMedia === 'tablet',\n      desktop: defaultMedia === 'desktop',\n      animating: false,\n      overlayActive: false,\n      drawerActive: false,\n    };\n\n    if (typeof props.type === 'undefined') {\n      this.state.type = props[`${defaultMedia}Type`];\n    }\n\n    const type = getField(props, this.state, 'type');\n    this._initialFix = true;\n\n    if (typeof props.visible === 'undefined') {\n      let visible = isPermanent(type) || isMini(type);\n      if (!visible && typeof defaultVisible !== 'undefined') {\n        visible = defaultVisible;\n      }\n\n      this.state.visible = visible;\n    }\n\n    const visible = getField(props, this.state, 'visible');\n\n    this.state.overlayActive = (typeof overlay !== 'undefined' ? overlay : isTemporary(type) && !this.state.desktop)\n      && visible;\n    this.state.drawerActive = visible;\n  }\n\n  componentWillMount() {\n    if (typeof window !== 'undefined') {\n      this._updateType(this.props);\n    }\n  }\n\n  componentDidMount() {\n    if (!isMini(getField(this.props, this.state, 'type'))) {\n      window.addEventListener('resize', this._updateMedia);\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const {\n      mobileMinWidth,\n      mobileType,\n      tabletMinWidth,\n      tabletType,\n      desktopMinWidth,\n      desktopType,\n    } = this.props;\n\n    if (nextProps.mobileMinWidth !== mobileMinWidth || nextProps.mobileType !== mobileType\n      || nextProps.tabletMinWidth !== tabletMinWidth || nextProps.tabletType !== tabletType\n      || nextProps.desktopMinWidth !== desktopMinWidth || nextProps.desktopType !== desktopType) {\n      this._updateType(nextProps);\n    }\n\n    const { visible, transitionDuration, overlay } = nextProps;\n    if (this.props.visible === nextProps.visible) {\n      return;\n    }\n\n    const type = getField(nextProps, this.state, 'type');\n    this._animate(visible, type, transitionDuration, overlay, this.state.desktop);\n  }\n\n  componentWillUpdate(nextProps, nextState) {\n    const { visible } = nextState;\n    if (typeof nextProps.visible !== 'undefined' || this.state.visible === visible) {\n      return;\n    }\n    const type = getField(nextProps, nextState, 'type');\n    this._animate(visible, type, nextProps.transitionDuration, nextProps.overlay, nextState.desktop);\n  }\n\n  componentWillUnmount() {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n\n    if (this._closeTimeout) {\n      clearTimeout(this._closeTimeout);\n    }\n\n    window.removeEventListener('resize', this._updateMedia);\n  }\n\n  _updateType = (props) => {\n    const {\n      onMediaTypeChange,\n      overlay,\n    } = props;\n\n    const onVisibilityChange = props.onVisibilityToggle || props.onVisibilityChange;\n\n    let state = Drawer.getCurrentMedia(props);\n    const diffType = getField(props, this.state, 'type') !== state.type;\n    const diffMedia = state.mobile !== this.state.mobile\n      || state.tablet !== this.state.tablet\n      || state.desktop !== this.state.desktop;\n\n    if (onMediaTypeChange && (diffType || diffMedia)) {\n      onMediaTypeChange(state.type, { mobile: state.mobile, tablet: state.tablet, desktop: state.desktop });\n    }\n\n    if (diffType) {\n      let visible = isPermanent(state.type);\n      if (this._initialFix) {\n        if (props.defaultVisible) {\n          visible = props.defaultVisible;\n        } else if (props.visible) {\n          visible = props.visible;\n        }\n      }\n\n      const prevVisible = getField(props, this.state, 'visible');\n      if (onVisibilityChange && (visible !== prevVisible)) {\n        onVisibilityChange(visible);\n      }\n\n      if (typeof props.visible === 'undefined') {\n        state.visible = visible;\n      }\n    } else if (this._initialFix && diffMedia) {\n      state.overlayActive = (typeof overlay !== 'undefined' ? overlay : isTemporary(state.type) && !state.desktop)\n        && getField(props, this.state, 'visible');\n    }\n\n    if (typeof props.type !== 'undefined') {\n      const { type, ...realState } = state; // eslint-disable-line no-unused-vars\n      state = realState;\n    }\n\n    this._initialFix = false;\n    this.setState(state);\n  };\n\n  _updateMedia = () => {\n    this._updateType(this.props);\n  };\n\n  _animate = (visible, type, timeout, overlay, desktop) => {\n    if (visible) {\n      this.timeout = setTimeout(() => {\n        this.timeout = null;\n\n        this.setState({\n          overlayActive: overlay || (isTemporary(type) && !desktop),\n          drawerActive: true,\n          animating: true,\n        });\n      }, TICK);\n    } else {\n      this._timeout = setTimeout(() => {\n        this._timeout = null;\n\n        this.setState({ animating: false });\n      }, timeout);\n      this.setState({ animating: true, overlayActive: false, drawerActive: false });\n    }\n  };\n\n  _setNavigation = (navigation) => {\n    this._navigation = findDOMNode(navigation);\n  };\n\n  _handleNavClick = (e) => {\n    const { closeOnNavItemClick, autoclose, autocloseAfterInk } = this.props;\n    const enabled = typeof closeOnNavItemClick !== 'undefined' ? closeOnNavItemClick : autoclose;\n    if (!enabled || !isTemporary(getField(this.props, this.state, 'type'))) {\n      return;\n    }\n\n    let { target } = e;\n    while (target && this._navigation.contains(target)) {\n      if (target.classList.contains('md-list-tile')) {\n        // Clicked a nav item that has a nested list\n        if (target.getAttribute('aria-expanded') !== null) {\n          return;\n        }\n\n        this._closeTimeout = setTimeout(() => {\n          this._closeTimeout = null;\n\n          this._closeDrawer(e);\n        }, autocloseAfterInk ? 300 : TICK);\n        return;\n      }\n\n      target = target.parentNode;\n    }\n  };\n\n  _closeDrawer = () => {\n    const { onVisibilityChange, onVisibilityToggle } = this.props;\n    const callback = onVisibilityToggle || onVisibilityChange;\n    if (callback) {\n      callback(false);\n    }\n\n    if (typeof this.props.visible === 'undefined') {\n      this.setState({ visible: false });\n    }\n  };\n\n  render() {\n    const { overlayActive, drawerActive, animating } = this.state;\n    const {\n      id,\n      style,\n      className,\n      navStyle,\n      navClassName,\n      component,\n      navItems,\n      header,\n      children,\n      inline,\n      position,\n      overlay,\n      clickableDesktopOverlay,\n      lastChild,\n      portal,\n      overlayStyle,\n      overlayClassName,\n      /* eslint-disable no-unused-vars */\n      type: propType,\n      visible: propVisible,\n      renderNode: propRenderNode,\n      navItemsId: propNavItemsId,\n      constantType,\n      defaultVisible,\n      defaultMedia,\n      mobileType,\n      mobileMinWidth,\n      tabletType,\n      tabletMinWidth,\n      desktopType,\n      desktopMinWidth,\n      transitionDuration,\n      onMediaTypeChange,\n      onVisibilityChange,\n      autoclose,\n      autocloseAfterInk,\n      // deprecated\n      onVisibilityToggle,\n      closeOnNavItemClick,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n\n    let { navItemsId } = this.props;\n    if (!navItemsId && id) {\n      navItemsId = `${id}-nav-items`;\n    }\n\n    const { desktop } = this.state;\n    const renderNode = getField(this.props, this.context, 'renderNode');\n    const type = getField(this.props, this.state, 'type');\n    const visible = getField(this.props, this.state, 'visible');\n    const mini = isMini(type);\n    const temporary = isTemporary(type);\n    const floating = DrawerTypes.FLOATING === type;\n    const permanent = isPermanent(type);\n\n    let Component;\n    if (component) {\n      Component = component;\n    } else if (navItems) {\n      Component = 'nav';\n    } else {\n      Component = 'aside';\n    }\n\n    let navigation;\n    if (navItems) {\n      navigation = (\n        <List\n          ref={this._setNavigation}\n          key=\"navigation\"\n          id={navItemsId}\n          style={navStyle}\n          className={cn('md-list--drawer', {\n            'md-toolbar-relative': mini && !visible,\n            'md-background': floating,\n          }, navClassName)}\n          onClick={this._handleNavClick}\n        >\n          {navItems.map(mapToListParts)}\n        </List>\n      );\n    }\n    let zDepth = 1;\n    if (floating || inline) {\n      zDepth = 0;\n    } else if (!mini && temporary && visible) {\n      zDepth = 5;\n    }\n\n    const overlayVisible = !mini && (!desktop || clickableDesktopOverlay)\n      && (overlay || temporary)\n      && (animating || visible);\n\n    const drawer = (\n      <Paper\n        {...props}\n        id={id}\n        key=\"drawer\"\n        component={Component}\n        zDepth={zDepth}\n        raiseOnHover={false}\n        style={style}\n        className={cn('md-drawer', {\n          [`md-drawer--${position}`]: !inline,\n          'md-drawer--fixed': !inline,\n          'md-drawer--inline': inline,\n          'md-drawer--active': mini || drawerActive,\n          'md-drawer--mini': mini,\n          'md-transition--deceleration': !mini && !permanent && visible,\n          'md-transition--acceleration': !mini && !permanent && !visible,\n          'md-background': inline || floating,\n          'md-background--card': !floating && !inline,\n        }, className)}\n      >\n        {header}\n        {navigation}\n        {children}\n        <Overlay\n          style={overlayStyle}\n          className={overlayClassName}\n          active={overlayActive}\n          onClick={this._closeDrawer}\n          visible={overlayVisible}\n          renderNode={renderNode}\n        />\n      </Paper>\n    );\n\n    if (inline || permanent) {\n      return drawer;\n    } else if (!portal) {\n      return mini || animating || visible ? drawer : null;\n    }\n\n    return (\n      <Portal visible={animating || visible} renderNode={renderNode} lastChild={lastChild}>\n        {drawer}\n      </Portal>\n    );\n  }\n}\n"]}