{"version":3,"sources":["../../src/js/FontIcons/FontIcon.js"],"names":["ICON_SIZE","FontIcon","props","state","styles","_mergeStyles","nextProps","style","forceSize","forceFontSize","setState","iconClassName","className","children","disabled","primary","secondary","error","inherit","classes","propTypes","object","string","isRequired","bool","oneOfType","number","propName","component","args","Error","node","defaultProps","height","width","fontSize","undefined"],"mappings":"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","file":"FontIcon.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nimport themeColors from '../utils/themeColors';\n\nconst ICON_SIZE = 24;\n\n/**\n * The \\`FontIcon\\` component is used for rendering a font-icon library's\n * icon. The default is to use the `material-icons` library, but others\n * can be used as well.\n *\n * If you are using another font-icon library that does not always create\n * icons with a perfect 1:1 scale (such as font-awesome), it is recommended\n * to update the `.md-icon` styles to set the width and height to `$md-font-icon-size`.\n * However, this will prevent different sided icons.\n *\n * ```scss\n * .md-icon.fa {\n *   height: $md-font-icon-size;\n *   width: $md-font-icon-size;\n * }\n * ```\n */\nexport default class FontIcon extends PureComponent {\n  static propTypes = {\n    /**\n     * An optional style to apply.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply to the `FontIcon`.\n     */\n    className: PropTypes.string,\n\n    /**\n     * The icon font library className to use to display the icon.\n     */\n    iconClassName: PropTypes.string.isRequired,\n\n    /**\n     * Boolean if the primary theme color should be applied.\n     */\n    primary: PropTypes.bool,\n\n    /**\n     * Boolean if the secondary theme color should be applied.\n     */\n    secondary: PropTypes.bool,\n\n    /**\n     * Boolean if the icon is considered disabled and should inherit the\n     * disabled color.\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * Boolean if the error color should be applied to the icon.\n     */\n    error: PropTypes.bool,\n\n    /**\n     * Boolean if the color of the icon should be inherited by parent elements.\n     */\n    inherit: PropTypes.bool,\n\n    /**\n     * Either a boolean that will enforce the 24x24 size of the font icon or a number of the size\n     * to enforce. This is useful when using other font icon libraries that do not have a consistent\n     * size.\n     */\n    forceSize: PropTypes.oneOfType([\n      PropTypes.bool,\n      PropTypes.number,\n    ]),\n\n    /**\n     * Boolean if the `forceSize` prop should also force the `font-size` instead of only `width` and `height`.\n     */\n    forceFontSize: (props, propName, component, ...args) => {\n      let error = PropTypes.bool(props, propName, component, ...args);\n      if (!error && typeof props.forceSize === 'undefined' && props[propName]) {\n        error = new Error(\n          `You provided a \\`forceFontSize\\` prop to the ${component} component, without specifying the \\`forceSize\\` ` +\n          `prop. Either set the \\`forceSize\\` prop to a boolean or a number, or disable \\`${propName}\\`.`\n        );\n      }\n\n      return error;\n    },\n\n    /**\n     * Any children required to display the icon with the font library.\n     */\n    children: PropTypes.node,\n  };\n\n  static defaultProps = {\n    iconClassName: 'material-icons',\n  };\n\n  constructor(props) {\n    super();\n\n    this.state = { styles: this._mergeStyles(props) };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { style, forceSize, forceFontSize } = this.props;\n    if (style !== nextProps.style || forceSize !== nextProps.forceSize || forceFontSize !== nextProps.forceFontSize) {\n      this.setState({ styles: this._mergeStyles(nextProps) });\n    }\n  }\n\n  _mergeStyles = ({ style, forceSize, forceFontSize }) => {\n    let styles = style;\n    if (typeof forceSize === 'boolean') {\n      styles = {\n        height: ICON_SIZE,\n        width: ICON_SIZE,\n        fontSize: forceFontSize ? ICON_SIZE : undefined,\n        ...style,\n      };\n    } else if (typeof forceSize === 'number') {\n      styles = {\n        height: forceSize,\n        width: forceSize,\n        fontSize: forceFontSize ? forceSize : undefined,\n        ...style,\n      };\n    }\n\n    return styles;\n  };\n\n  render() {\n    const { styles } = this.state;\n    const {\n      iconClassName,\n      className,\n      children,\n      disabled,\n      primary,\n      secondary,\n      error,\n      inherit,\n      /* eslint-disable no-unused-vars */\n      style,\n      forceSize,\n      forceFontSize,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n\n    const classes = cn('md-icon', iconClassName, themeColors({\n      disabled,\n      error,\n      inherit,\n      primary,\n      secondary,\n    }), className);\n\n    return (\n      <i {...props} style={styles} className={classes}>\n        {children}\n      </i>\n    );\n  }\n}\n"]}