{"version":3,"sources":["../../src/js/Helpers/AccessibleFakeButton.js"],"names":["AccessibleFakeButton","state","pressed","tabFocused","focus","_node","blur","_setNode","node","_handleClick","e","props","disabled","onClick","setState","_handleKeyDown","onKeyDown","listenToEnter","listenToSpace","_handleKeyUp","onKeyUp","onTabFocus","which","keyCode","_handleBlur","onBlur","Component","component","children","className","tabbedClassName","tabIndex","ink","noFocusOutline","childElements","toArray","unshift","propTypes","style","object","string","func","oneOfType","isRequired","bool","number","role","defaultProps"],"mappings":"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","file":"AccessibleFakeButton.js","sourcesContent":["import React, { PureComponent, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport { findDOMNode } from 'react-dom';\nimport cn from 'classnames';\nimport { TAB } from '../constants/keyCodes';\nimport handleKeyboardAccessibility from '../utils/EventUtils/handleKeyboardAccessibility';\n\n/**\n * The `AccessibleFakeButton` is a generic component that can be used to render\n * a `div` or any other non `button` components as a button. This should not be\n * used often.\n *\n * The `AccessibleFakeButton` allows the user to tab focus the element, use the\n * space or enter key to trigger the `onClick` event, and toggles the `aria-pressed`\n * attribute.\n */\nexport default class AccessibleFakeButton extends PureComponent {\n  static propTypes = {\n    /**\n     * An optional style to apply.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply.\n     */\n    className: PropTypes.string,\n\n    /**\n     * An optional function to call only when the button has been focused with the tab key.\n     */\n    tabbedClassName: PropTypes.string,\n\n    /**\n     * Any children to display in the Accessible Fake Button.\n     */\n    children: PropTypes.node,\n\n    /**\n     * An optional onClick function to call when the user clicks the\n     * button or presses space || enter.\n     */\n    onClick: PropTypes.func,\n\n    /**\n     * An optional onKeyDown function to call.\n     */\n    onKeyDown: PropTypes.func,\n\n    /**\n     * An optional onBlur function to call.\n     */\n    onBlur: PropTypes.func,\n\n    /**\n     * An optional onKeyUp function to call.\n     */\n    onKeyUp: PropTypes.func,\n\n    /**\n     * An optional function to call when the element is focused with the tab key.\n     */\n    onTabFocus: PropTypes.func,\n\n    /**\n     * The component to render the Fake button as.\n     */\n    component: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.string,\n    ]).isRequired,\n\n    /**\n     * Boolean if the default outline should be removed the when the fake button has been focused.\n     *\n     * @see {@link #tabbedClassName}\n     */\n    noFocusOutline: PropTypes.bool,\n\n    /**\n     * The tab index to use for the Fake button so it is keyboard focusable.\n     */\n    tabIndex: PropTypes.number,\n\n    /**\n     * Boolean if the Button is disabled. This will prevent tab focus.\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * The role for the accessible fake button. It is recommended to keep it\n     * the default of `button` unless you are rendering it as an `a` tag.\n     */\n    role: PropTypes.string,\n\n    /**\n     * The ink when coming from the AccessibleFakeInkedButton\n     * @access private\n     */\n    ink: PropTypes.node,\n\n    /**\n     * Boolean if the spacebar should be used to trigger the click event. This _should_ be `true`\n     * is almost all cases.\n     */\n    listenToSpace: PropTypes.bool,\n\n    /**\n     * Boolean if the enter key should be used to trigger the click event. This _should_ be `true`\n     * in most cases. By default, the param will be ignored if the `role` attribute is for a `checkbox`\n     * or `radio`. When it is a checkbox or radio, it will attempt to submit the form on the enter\n     * keypress instead like the native elements.\n     */\n    listenToEnter: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    component: 'div',\n    tabIndex: 0,\n    role: 'button',\n    noFocusOutline: true,\n    listenToEnter: true,\n    listenToSpace: true,\n  };\n\n  state = { pressed: false, tabFocused: false };\n\n  /**\n   * Focuses the button.\n   */\n  focus = () => {\n    if (this._node) {\n      this._node.focus();\n    }\n  };\n\n  /**\n   * Blurs the button.\n   */\n  blur = () => {\n    if (this._node) {\n      this._node.blur();\n    }\n  };\n\n  _setNode = (node) => {\n    if (node) {\n      this._node = findDOMNode(node);\n    }\n  };\n\n  _handleClick = (e) => {\n    if (this.props.disabled) {\n      return;\n    }\n\n    if (this.props.onClick) {\n      this.props.onClick(e);\n    }\n\n    this._node.focus();\n    this.setState({ pressed: !this.state.pressed });\n  };\n\n  _handleKeyDown = (e) => {\n    const { disabled, onKeyDown, listenToEnter, listenToSpace } = this.props;\n    if (disabled) {\n      return;\n    }\n\n    if (onKeyDown) {\n      onKeyDown(e);\n    }\n\n    handleKeyboardAccessibility(e, this._handleClick, listenToEnter, listenToSpace);\n  };\n\n  _handleKeyUp = (e) => {\n    const { onKeyUp, onTabFocus } = this.props;\n    if (onKeyUp) {\n      onKeyUp(e);\n    }\n\n    if ((e.which || e.keyCode) === TAB) {\n      if (onTabFocus) {\n        onTabFocus(e);\n      }\n\n      this.setState({ tabFocused: true });\n    }\n  };\n\n  _handleBlur = (e) => {\n    if (this.props.onBlur) {\n      this.props.onBlur(e);\n    }\n\n    if (this.state.tabFocused) {\n      this.setState({ tabFocused: false });\n    }\n  };\n\n  render() {\n    const {\n      component: Component,\n      children,\n      className,\n      tabbedClassName,\n      disabled,\n      tabIndex,\n      ink,\n      noFocusOutline,\n      /* eslint-disable no-unused-vars */\n      onBlur,\n      onClick,\n      onKeyUp,\n      onKeyDown,\n      onTabFocus,\n      listenToEnter,\n      listenToSpace,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n\n    let childElements = children;\n    if (ink) {\n      childElements = Children.toArray(children);\n      childElements.unshift(ink);\n    }\n\n    return (\n      <Component\n        {...props}\n        ref={this._setNode}\n        className={cn('md-fake-btn', {\n          'md-pointer--hover': !disabled,\n          'md-fake-btn--no-outline': noFocusOutline,\n          [tabbedClassName]: tabbedClassName && this.state.tabFocused,\n        }, className)}\n        disabled={disabled}\n        tabIndex={disabled ? null : tabIndex}\n        onBlur={this._handleBlur}\n        onClick={this._handleClick}\n        onKeyUp={this._handleKeyUp}\n        onKeyDown={this._handleKeyDown}\n        aria-pressed={this.state.pressed}\n      >\n        {childElements}\n      </Component>\n    );\n  }\n}\n"]}