{"version":3,"sources":["../../src/js/Helpers/IconSeparator.js"],"names":["IconSeparator","props","className","labelStyle","labelClassName","component","label","iconBefore","children","text","labelProps","only","style","Component","propTypes","object","string","node","isRequired","bool","oneOfType","func","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MASqBA,a;;;;;;;;;;;+BAkDV;AAAA,qBAUH,KAAKC,KAVF;AAAA,YAELC,SAFK,UAELA,SAFK;AAAA,YAGLC,UAHK,UAGLA,UAHK;AAAA,YAILC,cAJK,UAILA,cAJK;AAAA,YAKLC,SALK,UAKLA,SALK;AAAA,YAMLC,KANK,UAMLA,KANK;AAAA,YAOLC,UAPK,UAOLA,UAPK;AAAA,YAQLC,QARK,UAQLA,QARK;AAAA,YASFP,KATE;;AAYP,YAAIQ,aAAJ;AACA,YAAI,2BAAeH,KAAf,CAAJ,EAA2B;AACzB,cAAMI,aAAa,gBAASC,IAAT,CAAcL,KAAd,EAAqBL,KAAxC;AACAQ,iBAAO,yBAAaH,KAAb,EAAoB;AACzBJ,uBAAW,0BAAG,cAAH,EAAmBE,cAAnB,EAAmCM,WAAWR,SAA9C,CADc;AAEzBU,gCAAYT,UAAZ,EAA2BO,WAAWE,KAAtC;AAFyB,WAApB,CAAP;AAID,SAND,MAMO;AACLH,iBAAO;AAAA;AAAA,cAAM,OAAON,UAAb,EAAyB,WAAW,0BAAG,cAAH,EAAmBC,cAAnB,CAApC;AAAyEE;AAAzE,WAAP;AACD;;AAED,YAAMO,YAAYR,SAAlB;;AAEA,eACE;AAAC,mBAAD;AAAA,uBAAeJ,KAAf,IAAsB,WAAW,0BAAG,mBAAH,EAAwBC,SAAxB,CAAjC;AACGK,wBAAcC,QADjB;AAEGC,cAFH;AAGG,WAACF,UAAD,IAAeC;AAHlB,SADF;AAOD;;;;;;AAlFkBR,e,CACZc,S,GAAY;AACjB;;;AAGAF,WAAO,oBAAUG,MAJA;;AAMjB;;;AAGAb,eAAW,oBAAUc,MATJ;;AAWjB;;;AAGAb,gBAAY,oBAAUY,MAdL;;AAgBjB;;;AAGAX,oBAAgB,oBAAUY,MAnBT;;AAqBjB;;;AAGAV,WAAO,oBAAUW,IAAV,CAAeC,UAxBL;;AA0BjB;;;AAGAV,cAAU,oBAAUS,IAAV,CAAeC,UA7BR;;AA+BjB;;;AAGAX,gBAAY,oBAAUY,IAlCL;;AAoCjB;;;AAGAd,eAAW,oBAAUe,SAAV,CAAoB,CAC7B,oBAAUJ,MADmB,EAE7B,oBAAUK,IAFmB,CAApB,EAGRH;AA1Cc,G;AADAlB,e,CA8CZsB,Y,GAAe;AACpBjB,eAAW;AADS,G;oBA9CHL,a","file":"IconSeparator.js","sourcesContent":["import React, { PureComponent, cloneElement, isValidElement, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\n/**\n * The `IconSeparator` component is a simple helper component to render some text and\n * an icon with some space between them while centering the text. The icon can either\n * come before or after the text.\n */\nexport default class IconSeparator extends PureComponent {\n  static propTypes = {\n    /**\n     * An optional style to apply.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply.\n     */\n    className: PropTypes.string,\n\n    /**\n     * An optional style to apply to the label.\n     */\n    labelStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the label.\n     */\n    labelClassName: PropTypes.string,\n\n    /**\n     * The label to display.\n     */\n    label: PropTypes.node.isRequired,\n\n    /**\n     * The icon to display.\n     */\n    children: PropTypes.node.isRequired,\n\n    /**\n     * Boolean if the icon should appear before or after the text\n     */\n    iconBefore: PropTypes.bool,\n\n    /**\n     * The component to be rendered as.\n     */\n    component: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n    ]).isRequired,\n  };\n\n  static defaultProps = {\n    component: 'div',\n  };\n\n  render() {\n    const {\n      className,\n      labelStyle,\n      labelClassName,\n      component,\n      label,\n      iconBefore,\n      children,\n      ...props\n    } = this.props;\n\n    let text;\n    if (isValidElement(label)) {\n      const labelProps = Children.only(label).props;\n      text = cloneElement(label, {\n        className: cn('md-icon-text', labelClassName, labelProps.className),\n        style: { ...labelStyle, ...labelProps.style },\n      });\n    } else {\n      text = <span style={labelStyle} className={cn('md-icon-text', labelClassName)}>{label}</span>;\n    }\n\n    const Component = component;\n\n    return (\n      <Component {...props} className={cn('md-icon-separator', className)}>\n        {iconBefore && children}\n        {text}\n        {!iconBefore && children}\n      </Component>\n    );\n  }\n}\n"]}