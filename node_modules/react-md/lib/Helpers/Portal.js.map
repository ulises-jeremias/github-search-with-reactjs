{"version":3,"sources":["../../src/js/Helpers/Portal.js"],"names":["Portal","_container","_portal","_applyStyles","props","className","_renderPortal","document","createElement","component","node","renderNode","body","lastChild","appendChild","insertBefore","firstChild","children","_removePortal","onClose","removeChild","visible","nextProps","onOpen","window","Component","propTypes","string","bool","isRequired","element","func","object","defaultProps"],"mappings":"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","file":"Portal.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  unmountComponentAtNode as unmount,\n  unstable_renderSubtreeIntoContainer as render,\n} from 'react-dom';\n\n/**\n * Creates a \"Portal\" for the children to be rendered in. Basically it will render the\n * children only when the `visible` prop is `true`. When it is visible, a new `component`\n * will be rendered as the first child in the body with the children inside.\n *\n * Unlike all the other components, `style` will not be applied for the `Portal`.\n */\nexport default class Portal extends PureComponent {\n  static propTypes = {\n    /**\n     * An optional className to apply to the newly created `component` when visible.\n     */\n    className: PropTypes.string,\n\n    /**\n     * Boolean if the children are visible.\n     */\n    visible: PropTypes.bool.isRequired,\n\n    /**\n     * The children to render when visible.\n     */\n    children: PropTypes.element,\n\n    /**\n     * The component to render as. This should be a valid DOM element.\n     */\n    component: PropTypes.string.isRequired,\n\n    /**\n     * An optional function to call when the portal is opened.\n     */\n    onOpen: PropTypes.func,\n\n    /**\n     * An optional function to call when the portal is closed\n     */\n    onClose: PropTypes.func,\n\n    /**\n     * An optional DOM Node to render the portal into. The default is to render as\n     * the first child in the `body`.\n     */\n    renderNode: PropTypes.object,\n\n    /**\n     * Boolean if the portal should render the children as the last child of the `renderNode`\n     * or `body` instead of the first.\n     */\n    lastChild: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    component: 'span',\n  };\n\n  componentDidMount() {\n    if (this.props.visible) {\n      this._renderPortal(this.props);\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { visible, onOpen } = nextProps;\n    if (this.props.visible === visible && this._container) {\n      // Need to just re-render the subtree\n      this._renderPortal(nextProps);\n      return;\n    }\n\n    if (visible) {\n      if (onOpen) {\n        onOpen();\n      }\n      this._renderPortal(nextProps);\n    } else {\n      this._removePortal();\n    }\n  }\n\n  componentWillUnmount() {\n    this._removePortal();\n  }\n\n  _container = null;\n  _portal = null;\n\n  _applyStyles = (props) => {\n    if (props.className) {\n      this._container.className = props.className;\n    }\n  };\n\n  _renderPortal = (props) => {\n    if (!this._container) {\n      this._container = document.createElement(props.component);\n\n      this._applyStyles(props);\n      const node = (props.renderNode || document.body);\n      if (props.lastChild) {\n        node.appendChild(this._container);\n      } else {\n        node.insertBefore(this._container, node.firstChild);\n      }\n    } else {\n      this._applyStyles(props);\n    }\n\n    this._portal = render(this, props.children, this._container);\n  };\n\n  _removePortal = () => {\n    if (this.props.onClose) {\n      this.props.onClose();\n    }\n\n    if (this._container) {\n      unmount(this._container);\n      (this.props.renderNode || document.body).removeChild(this._container);\n    }\n\n    this._portal = null;\n    this._container = null;\n  };\n\n  render() {\n    // When doing server side rendering, actually render the component as a direct child of its parent.\n    // Once it has been rendered and working client side, it will be removed correctly.\n    if (typeof window === 'undefined' && this.props.visible) {\n      const { component: Component, className, children } = this.props;\n      return <Component className={className}>{children}</Component>;\n    }\n\n    return null;\n  }\n}\n"]}