{"version":3,"sources":["../../src/js/Helpers/ResizeObserver.js"],"names":["ResizeObserver","_container","_target","_observer","_height","_width","_scrollHeight","_scrollWidth","_measure","entries","entry","contentRect","height","width","target","scrollHeight","scrollWidth","_isHeightChange","_isWidthChange","props","onResize","el","watchHeight","watchWidth","_handleRef","container","_getTarget","observe","disconnect","elRef","nextProps","nextTarget","unobserve","t","document","getElementById","querySelector","parentNode","Error","Component","component","propTypes","bool","oneOfType","object","string","func","isRequired","defaultProps"],"mappings":"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","file":"ResizeObserver.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport ResizeObserverAPI from 'resize-observer-polyfill';\n\n/**\n * The `ResizeObserver` component is a component hook for the\n * [ResizeObserver](http://rawgit.com/WICG/ResizeObserver/master/index.html)\n * using the [resize-observer-polyfill](https://github.com/que-etc/resize-observer-polyfill)\n * for browsers that don't support it yet.\n *\n * This component displays an empty `span` with `aria-hidden` to allow access to the DOM. By\n * default it will attempt to watch changes on its parent component, but it can be configured\n * to watch any element by using the `target` prop.\n */\nexport default class ResizeObserver extends PureComponent {\n  static propTypes = {\n    /**\n     * Boolean if the height should be watched for the resize target.\n     */\n    watchHeight: PropTypes.bool,\n\n    /**\n     * Boolean if the width should be watched for the resize target.\n     */\n    watchWidth: PropTypes.bool,\n\n    /**\n     * An optional target that should be used for detecting resize events. This can either\n     * be a HTMLDOMNode or a string to use with `document.getElementById` or `document.querySelector`.\n     *\n     * If this prop is not provided and not null, it will default to the parent node of this component.\n     * If the provided `target={null}`, the observer will not begin until the `target` is `undefined` or\n     * it has been correctly passed a target string or object.\n     */\n    target: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.string,\n    ]),\n\n    /**\n     * The component to be rendered as. This should normally just be the default `span`, but there are cases\n     * where the component should be switched to something else for valid html.\n     */\n    component: PropTypes.string,\n\n    /**\n     * A function to call when the height or width has been changed and that attribute is being watched.\n     * The callback will include the current height, width, scrollHeight and scrollWidth of the target.\n     *\n     * ```js\n     * onResize({ height: nextHeight, width: nextWidth, scrollHeight: nextScrollHeight, scrollWidth: nextScrollWidth });\n     * ```\n     */\n    onResize: PropTypes.func.isRequired,\n\n    /**\n     * An optional ref callback that will include the `target` or the parent node of the resize observer. Just\n     * like other refs, this will provide null when it unmounts.\n     */\n    elRef: PropTypes.func,\n  };\n\n  static defaultProps = {\n    watchHeight: false,\n    watchWidth: false,\n    component: 'span',\n  };\n\n  componentWillReceiveProps(nextProps) {\n    const { target } = this.props;\n    const nextTarget = nextProps.target;\n    if (target === nextTarget) {\n      return;\n    } else if (nextTarget) {\n      if (this._target) {\n        this._observer.unobserve(this._target);\n      }\n      this._target = this._getTarget(this._container, nextTarget);\n      this._observer.observe(this._target);\n    }\n  }\n\n  _container = null;\n  _target = null;\n  _observer = null;\n  _height = null;\n  _width = null;\n  _scrollHeight = null;\n  _scrollWidth = null;\n\n  _getTarget(container, target) {\n    if (target === null || (target && typeof target !== 'string')) {\n      return target;\n    }\n\n    let t = null;\n    if (target) {\n      t = document.getElementById(target) || document.querySelector(target);\n    } else {\n      t = container.parentNode;\n    }\n\n    if (!t) {\n      throw new Error(\n        'An HTMLDOMNode is required as the `ResizeObserver`\\'s watch target but none were provided/found. ' +\n        `Please update the target prop to find a valid node since the provided target is invalid. \\`${target}\\`.`\n      );\n    }\n\n    return t;\n  }\n\n  _measure = (entries) => {\n    if (!this._observer || !this._target) {\n      return;\n    }\n\n    for (const entry of entries) {\n      if (!entry) {\n        return;\n      }\n\n      const { height, width } = entry.contentRect;\n      const { scrollHeight, scrollWidth } = entry.target;\n      if (this._isHeightChange(height, scrollHeight) || this._isWidthChange(width, scrollWidth)) {\n        this._height = height;\n        this._width = width;\n        this._scrollHeight = scrollHeight;\n        this._scrollWidth = scrollWidth;\n        this.props.onResize({ height, width, scrollHeight, scrollWidth, el: entry.target });\n      }\n    }\n  };\n\n  _isHeightChange = (height, scrollHeight) => this.props.watchHeight\n    && (height !== this._height || scrollHeight !== this._scrollHeight);\n  _isWidthChange = (width, scrollWidth) => this.props.watchWidth\n    && (width !== this._width || scrollWidth !== this._scrollWidth);\n\n  _handleRef = (container) => {\n    if (container) {\n      this._container = container;\n      this._target = this._getTarget(container, this.props.target);\n      this._observer = new ResizeObserverAPI(this._measure);\n\n      if (this._target) {\n        this._observer.observe(this._target);\n      }\n    } else {\n      if (this._observer) {\n        this._observer.disconnect();\n      }\n\n      this._container = null;\n      this._target = null;\n      this._observer = null;\n      this._height = null;\n      this._width = null;\n      this._scrollHeight = null;\n      this._scrollWidth = null;\n    }\n\n    if (this.props.elRef) {\n      this.props.elRef(this._target);\n    }\n  };\n\n  render() {\n    const { component: Component } = this.props;\n    return <Component ref={this._handleRef} aria-hidden />;\n  }\n}\n"]}