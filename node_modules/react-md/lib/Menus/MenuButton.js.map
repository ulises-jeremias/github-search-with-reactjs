{"version":3,"sources":["../../src/js/Menus/MenuButton.js"],"names":["MenuButton","props","id","listId","buttonId","menuStyle","menuClassName","listStyle","listClassName","listProps","listZDepth","listInline","listHeightRestricted","menuItems","buttonChildren","children","anchor","belowAnchor","fixedTo","position","cascading","cascadingAnchor","cascadingZDepth","fullWidth","block","centered","sameWidth","repositionOnScroll","repositionOnResize","xThreshold","yThreshold","closeOnOutsideClick","transitionName","transitionEnterTimeout","transitionLeaveTimeout","visible","defaultVisible","onVisibilityChange","simplifiedMenu","minLeft","minRight","minBottom","fillViewportWidth","fillViewportHeight","isOpen","defaultOpen","onMenuToggle","items","toggleChildren","Positions","HorizontalAnchors","VerticalAnchors","propTypes","oneOfType","number","string","style","object","className","bool","isRequired","onClick","func","node","arrayOf","defaultProps"],"mappings":"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","file":"MenuButton.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport deprecated from 'react-prop-types/lib/deprecated';\n\nimport controlled from '../utils/PropTypes/controlled';\nimport anchorShape from '../Helpers/anchorShape';\nimport fixedToShape from '../Helpers/fixedToShape';\nimport positionShape from '../Helpers/positionShape';\nimport Button from '../Buttons/Button';\nimport DropdownMenu from './DropdownMenu';\n\n/**\n * The `MenuButton` is a simple wrapper / combination of the `Button` and the `Menu`\n * components that can be uncontrolled.\n */\nexport default class MenuButton extends PureComponent {\n  static Positions = DropdownMenu.Positions;\n  static HorizontalAnchors = DropdownMenu.HorizontalAnchors;\n  static VerticalAnchors = DropdownMenu.VerticalAnchors;\n  static propTypes = {\n    /**\n     * An id to use for the menu button. This is required for accessibility.\n     *\n     * @see {@link Menus/Menu#id}\n     */\n    id: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * An optional id to provide to the menu's list.\n     *\n     * @see {@link Menus/Menu#listId}\n     */\n    listId: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * An optional id to provide to the button. If this is omitted, the button will automatically\n     * gain an id of `${id}-toggle`.\n     */\n    buttonId: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * An optional style to apply to the button.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply to the button.\n     */\n    className: PropTypes.string,\n\n    /**\n     * An optional style to apply to the surrounding menu.\n     */\n    menuStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the surrounding menu.\n     */\n    menuClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to the list.\n     */\n    listStyle: PropTypes.object,\n\n    /**\n     * An optional class name to apply to the list.\n     */\n    listClassName: PropTypes.string,\n\n    /**\n     * Any additional props to provide to the list.\n     *\n     * @see {@link Menus/Menu#listProps}\n     */\n    listProps: PropTypes.object,\n\n    /**\n     * The z-depth to use for the list.\n     *\n     * @see {@link Menus/Menu/listZDepth}\n     */\n    listZDepth: PropTypes.number,\n\n    /**\n     * Boolean if the list should be displayed inline.\n     *\n     * @see {@link Lists/List#inline}\n     */\n    listInline: PropTypes.bool,\n\n    /**\n     * Boolean if the list's height should be restricted.\n     *\n     * @see {@link Menus/Menu#listHeightRestricted}\n     */\n    listHeightRestricted: PropTypes.bool,\n\n    /**\n     * Boolean if the menu's list is currently visible. If this is defined, it will\n     * require the `onVisibilityChange` function to be defined since it will become\n     * a controlled component.\n     */\n    visible: controlled(PropTypes.bool, 'onVisibilityChange', 'defaultVisible'),\n\n    /**\n     * Boolean if the menu's list should be visible by default.\n     */\n    defaultVisible: PropTypes.bool.isRequired,\n\n    /**\n     * An optional function to call when the button is clicked.\n     */\n    onClick: PropTypes.func,\n\n    /**\n     * An optional function to call when the visibility changes for the menu. The callback will\n     * include the next visibility state and the event that triggered the change.\n     *\n     * ```js\n     * onVisibilityChange(visible, event);\n     * ```\n     */\n    onVisibilityChange: PropTypes.func,\n\n    /**\n     * This is a 0 to many relationship of `ListItem` to display in the menu's `List`. If the type\n     * of the item is a number or string, it will be passed to the `ListItem` as the `primaryText`.\n     * If it is an object, it should be the shape of the `ListItem` props. If it is a node, it will\n     * just be rendered in the `List`.\n     *\n     * @see {@link Lists/ListItem}\n     * @see {@link Menus/Menu#children}\n     */\n    menuItems: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n      PropTypes.object,\n      PropTypes.node,\n      PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number,\n        PropTypes.object,\n        PropTypes.node,\n      ])),\n    ]),\n\n    /**\n     * This should be the children to use in the `Button` that gets created as the menu's toggle.\n     *\n     * @see {@link Buttons/Button}\n     * @see {@link Menus/Menu#toggle}\n     */\n    children: PropTypes.node,\n\n    /**\n     * The anchor position of the menu's list.\n     *\n     * @see {@link Helpers/Layover#anchor}\n     */\n    anchor: anchorShape,\n\n    /**\n     * This is the anchor to use when the `position` is set to `Autocomplete.Positions.BELOW`.\n     *\n     * @see {@link Helpers/Layover#belowAnchor}\n     */\n    belowAnchor: anchorShape,\n\n    /**\n     * This is how the menu's list is fixed to the toggle.\n     *\n     * @see {@link Menus/Menu#fixedTo}\n     */\n    fixedTo: fixedToShape,\n\n    /**\n     * This is the animation position for the menu's list.\n     *\n     * @see {@link Menus/Menu#position}\n     */\n    position: positionShape,\n\n    /**\n     * Boolean if the menu's list should gain the cascading styles.\n     *\n     * @see {@link Menus/Menu#cascading}\n     */\n    cascading: PropTypes.bool,\n\n    /**\n     * The zDepth to use for the lists that appear in cascading menus.\n     *\n     * @see {@link Menus/Menu#cascadingZDepth}\n     */\n    cascadingZDepth: PropTypes.number,\n\n    /**\n     * The anchor position for the cascading lists.\n     *\n     * @see {@link Menus/Menu#cascadingAnchor}\n     */\n    cascadingAnchor: anchorShape,\n\n    /**\n     * Boolean if the menu should display as a full width container. This will *not* update the button\n     * to be full width as well.\n     *\n     * @see {@link Menus/Menu#fullWidth}\n     */\n    fullWidth: PropTypes.bool,\n\n    /**\n     * Boolean if the menu's container should display as `block` instead of `inline-block`.\n     *\n     * @see {@link Menus/Menu#block}\n     */\n    block: PropTypes.bool,\n\n    /**\n     * Boolean if the list should appear centered related to the button.\n     *\n     * @see {@link Menus/Menu#centered}\n     */\n    centered: PropTypes.bool,\n\n    /**\n     * Boolean if the menu's list should be the same width as the button.\n     *\n     * @see {@link Menus/Menu#sameWidth}\n     */\n    sameWidth: PropTypes.bool,\n\n    /**\n     * @see {@link Menus/Menu#xThreshold}\n     */\n    xThreshold: PropTypes.number,\n\n    /**\n     * @see {@link Menus/Menu#yThreshold}\n     */\n    yThreshold: PropTypes.number,\n\n    /**\n     * Boolean if the menu's list should be closed when an element outside of the menu has been clicked.\n     *\n     * @see {@link Menus/Menu#closeOnOutsideClick}\n     */\n    closeOnOutsideClick: PropTypes.bool,\n\n    /**\n     * The transition name to use for the menu's list visibility changes.\n     *\n     * @see {@link Menus/Menu#transitionName}\n     */\n    transitionName: PropTypes.string,\n\n    /**\n     * The transition name to use when the menu's list gains visibility.\n     *\n     * @see {@link Menus/Menu#transitionEnterTimeout}\n     */\n    transitionEnterTimeout: PropTypes.number,\n\n    /**\n     * The transition timeout to use when the menu's list loses visibility.\n     *\n     * @see {@link Menus/Menu#transitionLeaveTimeout}\n     */\n    transitionLeaveTimeout: PropTypes.number,\n\n    /**\n     * Boolean if the menu should automatically try to reposition itself to stay within\n     * the viewport when the `fixedTo` element scrolls.\n     *\n     * @see {@link Helpers/Layover#repositionOnScroll}\n     */\n    repositionOnScroll: PropTypes.bool,\n\n    /**\n     * Boolean if the menu should automatically try to reposition itself to stay within\n     * the viewport when the window resizes.\n     *\n     * @see {@link Helpers/Layover#repositionOnResize}\n     */\n    repositionOnResize: PropTypes.bool,\n\n    /**\n     * Boolean if the menu logic should be simplified without any viewport logic and position\n     * based on the relative position of the menu. This will most like require some additional\n     * styles applied to the menu.\n     *\n     * @see {@link Helpers/Layover#simplified}\n     */\n    simplifiedMenu: PropTypes.bool,\n\n    /**\n     * @see {@link Helpers/Layover#minLeft}\n     */\n    minLeft: DropdownMenu.propTypes.minLeft,\n\n    /**\n     * @see {@link Helpers/Layover#minRight}\n     */\n    minRight: DropdownMenu.propTypes.minLeft,\n\n    /**\n     * @see {@link Helpers/Layover#minBottom}\n     */\n    minBottom: DropdownMenu.propTypes.minBottom,\n\n    /**\n     * @see {@link Helpers/Layover#fillViewportWidth}\n     */\n    fillViewportWidth: PropTypes.bool,\n\n    /**\n     * @see {@link Helpers/Layover#fillViewportHeight}\n     */\n    fillViewportHeight: PropTypes.bool,\n\n    buttonChildren: deprecated(\n      PropTypes.node,\n      'To build a button, put any elements in the `children`. The `ListItem` have been moved to the `menuItems` prop'\n    ),\n    onMenuToggle: deprecated(PropTypes.bool, 'Use `onVisibilityChange` instead'),\n    isOpen: deprecated(PropTypes.bool, 'Use `visible` instead'),\n    defaultOpen: deprecated(PropTypes.bool, 'Use `defaultVisible` instead'),\n  };\n\n  static defaultProps = {\n    defaultVisible: false,\n    repositionOnScroll: true,\n    repositionOnResize: false,\n  };\n\n  render() {\n    const {\n      id,\n      listId,\n      buttonId,\n      menuStyle,\n      menuClassName,\n      listStyle,\n      listClassName,\n      listProps,\n      listZDepth,\n      listInline,\n      listHeightRestricted,\n      menuItems,\n      buttonChildren,\n      children,\n      anchor,\n      belowAnchor,\n      fixedTo,\n      position,\n      cascading,\n      cascadingAnchor,\n      cascadingZDepth,\n      fullWidth,\n      block,\n      centered,\n      sameWidth,\n      repositionOnScroll,\n      repositionOnResize,\n      xThreshold,\n      yThreshold,\n      closeOnOutsideClick,\n      transitionName,\n      transitionEnterTimeout,\n      transitionLeaveTimeout,\n      visible,\n      defaultVisible,\n      onVisibilityChange,\n      simplifiedMenu,\n      minLeft,\n      minRight,\n      minBottom,\n      fillViewportWidth,\n      fillViewportHeight,\n      isOpen, // deprecated\n      defaultOpen, // deprecated\n      onMenuToggle, // deprecated\n      ...props\n    } = this.props;\n\n    let items = children;\n    let toggleChildren = buttonChildren;\n    if (typeof menuItems !== 'undefined') {\n      toggleChildren = children;\n      items = menuItems;\n    }\n\n    return (\n      <DropdownMenu\n        id={id}\n        listId={listId}\n        style={menuStyle}\n        className={menuClassName}\n        listStyle={listStyle}\n        listClassName={listClassName}\n        listProps={listProps}\n        listInline={listInline}\n        listZDepth={listZDepth}\n        listHeightRestricted={listHeightRestricted}\n        visible={typeof isOpen !== 'undefined' ? isOpen : visible}\n        defaultVisible={typeof defaultOpen !== 'undefined' ? defaultOpen : defaultVisible}\n        menuItems={items}\n        simplifiedMenu={simplifiedMenu}\n        anchor={anchor}\n        belowAnchor={belowAnchor}\n        fixedTo={fixedTo}\n        position={position}\n        cascading={cascading}\n        cascadingAnchor={cascadingAnchor}\n        cascadingZDepth={cascadingZDepth}\n        fullWidth={fullWidth}\n        block={block}\n        centered={centered}\n        sameWidth={sameWidth}\n        minLeft={minLeft}\n        minRight={minRight}\n        minBottom={minBottom}\n        fillViewportWidth={fillViewportWidth}\n        fillViewportHeight={fillViewportHeight}\n        repositionOnScroll={repositionOnScroll}\n        repositionOnResize={repositionOnResize}\n        xThreshold={xThreshold}\n        yThreshold={yThreshold}\n        closeOnOutsideClick={closeOnOutsideClick}\n        transitionName={transitionName}\n        transitionEnterTimeout={transitionEnterTimeout}\n        transitionLeaveTimeout={transitionLeaveTimeout}\n        onVisibilityChange={onMenuToggle || onVisibilityChange}\n      >\n        <Button {...props} id={buttonId}>\n          {toggleChildren}\n        </Button>\n      </DropdownMenu>\n    );\n  }\n}\n"]}