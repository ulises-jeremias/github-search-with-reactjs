{"version":3,"sources":["../../src/js/NavigationDrawers/NavigationDrawer.js"],"names":["DrawerTypes","getNonMiniType","type","pMini","PERSISTENT_MINI","tMini","TEMPORARY_MINI","indexOf","PERSISTENT","TEMPORARY","toMiniListItem","item","index","divider","subheader","key","itemProps","NavigationDrawer","props","defaultProps","mobileType","mobileDrawerType","tabletType","tabletDrawerType","desktopType","desktopDrawerType","constantType","constantDrawerType","others","getCurrentMedia","_toggleVisibility","e","onVisibilityToggle","onVisibilityChange","onDrawerChange","visible","state","callback","setState","_handleVisibility","_handleTypeChange","drawerType","mediaState","onMediaTypeChange","defaultMedia","defaultVisible","initialDrawerType","mobile","tablet","desktop","persistentIcon","id","contentId","label","jumpLabel","persistentIconChildren","persistentIconClassName","closeIconChildren","closeIconClassName","closeIcon","onCloseClick","renderNode","context","nextProps","nextState","nVisible","_timeout","clearTimeout","setTimeout","contentActive","drawerTransitionDuration","style","className","toolbarStyle","toolbarClassName","drawerStyle","drawerClassName","contentStyle","contentClassName","Content","contentComponent","navItems","children","drawerId","drawerTitle","drawerChildren","drawerHeaderChildren","toolbarId","toolbarTitle","toolbarTitleMenu","toolbarTitleStyle","toolbarTitleClassName","toolbarActions","toolbarProminent","toolbarProminentTitle","toolbarThemeType","toolbarSingleColor","toolbarChildren","toolbarZDepth","transitionName","transitionEnterTimeout","transitionLeaveTimeout","extractMini","miniDrawerHeader","miniDrawerChildren","footer","includeDrawerHeader","contentProps","temporaryIcon","temporaryIconChildren","temporaryIconClassName","menuIconChildren","menuIconClassName","propDrawerType","propDrawerHeader","drawerHeader","propRenderNode","mini","temporary","persistent","clipped","CLIPPED","floating","FLOATING","offset","toolbarRelative","nav","closeButton","miniDrawer","miniList","map","desktopOffset","DrawerType","_warned","_msg","FULL_HEIGHT","console","error","replace","propTypes","oneOfType","number","string","navItemsId","object","navStyle","navClassName","overlayStyle","overlayClassName","node","bool","position","oneOf","isRequired","arrayOf","element","shape","primaryText","mobileMinWidth","tabletMinWidth","desktopMinWidth","func","autoclose","actions","portal","lastChild","contentTransitionName","contentTransitionEnterTimeout","contentTransitionLeaveTimeout","contextTypes","childContextTypes","transitionDuration"],"mappings":"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","file":"NavigationDrawer.js","sourcesContent":["import React, { PureComponent, isValidElement } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup';\nimport deprecated from 'react-prop-types/lib/deprecated';\nimport isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';\n\nimport getField from '../utils/getField';\nimport controlled from '../utils/PropTypes/controlled';\nimport invalidIf from '../utils/PropTypes/invalidIf';\nimport Button from '../Buttons/Button';\nimport Drawer from '../Drawers/Drawer';\nimport List from '../Lists/List';\nimport Toolbar from '../Toolbars/Toolbar';\nimport FontIcon from '../FontIcons/FontIcon';\nimport getDeprecatedIcon from '../FontIcons/getDeprecatedIcon';\n\nconst { DrawerTypes } = Drawer;\nimport { isTemporary, isPersistent, isPermanent, isMini } from '../Drawers/isType';\nimport JumpToContentLink from './JumpToContentLink';\nimport CloseButton from './CloseButton';\nimport MiniListItem from './MiniListItem';\n\nfunction getNonMiniType(type) {\n  const { PERSISTENT_MINI: pMini, TEMPORARY_MINI: tMini } = DrawerTypes;\n  if ([pMini, tMini].indexOf(type) === -1) {\n    return type;\n  }\n\n  return pMini === type ? DrawerTypes.PERSISTENT : DrawerTypes.TEMPORARY;\n}\n\nfunction toMiniListItem(item, index) {\n  if (isValidElement(item)) {\n    return item;\n  }\n\n  const { divider, subheader, key, ...itemProps } = item;\n  if (divider || subheader) {\n    return null;\n  }\n\n  return <MiniListItem key={key || index} {...itemProps} />;\n}\n\n/**\n * The `NavigationDrawer` is used when you want a full layout configuration. It is a combination\n * of the `Toolbar` component and the `Drawer` component. Any props that are not specifically\n * listed below will be provided to the `Drawer` component. So if there are props on the `Drawer`\n * that are not listed here, they will be passed along.\n *\n * The main benefit of using this component is that it will manage adding respective offset\n * classes automatically for you to the content and the drawer. It will also manage using\n * a mini drawer type for you.\n */\nexport default class NavigationDrawer extends PureComponent {\n  static DrawerType = { // deprecated\n    /* eslint-disable no-console */\n    _warned: false,\n    _msg: 'Invalid use of `NavigationDrawer.DrawerType.{{TYPE}}`. The `NavigationDrawer.DrawerType` ' +\n      'has been deprecated and will be removed in the next major release. Please use the ' +\n      '`NavigationDrawer.DrawerTypes.{{TYPE}}` instead.',\n\n    get FULL_HEIGHT() {\n      if (!this._warned) {\n        console.error(this._msg.replace(/{{TYPE}}/g, 'FULL_HEIGHT'));\n      }\n      this._warned = true;\n\n      return DrawerTypes.FULL_HEIGHT;\n    },\n\n    get CLIPPED() {\n      if (!this._warned) {\n        console.error(this._msg.replace(/{{TYPE}}/g, 'CLIPPED'));\n      }\n      this._warned = true;\n\n      return DrawerTypes.CLIPPED;\n    },\n\n    get FLOATING() {\n      if (!this._warned) {\n        console.error(this._msg.replace(/{{TYPE}}/g, 'FLOATING'));\n      }\n      this._warned = true;\n\n      return DrawerTypes.FLOATING;\n    },\n\n    get PERSISTENT() {\n      if (!this._warned) {\n        console.error(this._msg.replace(/{{TYPE}}/g, 'PERSISTENT'));\n      }\n      this._warned = true;\n\n      return DrawerTypes.PERSISTENT;\n    },\n\n    get PERSISTENT_MINI() {\n      if (!this._warned) {\n        console.error(this._msg.replace(/{{TYPE}}/g, 'PERSISTENT_MINI'));\n      }\n      this._warned = true;\n\n      return DrawerTypes.PERSISTENT_MINI;\n    },\n\n    get TEMPORARY() {\n      if (!this._warned) {\n        console.error(this._msg.replace(/{{TYPE}}/g, 'TEMPORARY'));\n      }\n      this._warned = true;\n\n      return DrawerTypes.TEMPORARY;\n    },\n\n    get TEMPORARY_MINI() {\n      if (!this._warned) {\n        console.error(this._msg.replace(/{{TYPE}}/g, 'TEMPORARY_MINI'));\n      }\n      this._warned = true;\n\n      return DrawerTypes.TEMPORARY_MINI;\n    },\n    /* eslint-enable no-console */\n  };\n\n  static DrawerTypes = DrawerTypes;\n\n  static propTypes = {\n    /**\n     * An optional id to provide to the entire div wrapper.\n     */\n    id: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * An optional id to provide to the drawer. This is generally a good idea to provide if\n     * there are any `navItems` defined.\n     *\n     * @see {@link #navItemsId}\n     */\n    drawerId: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * An optional id to provide to the navItems list. If this is omitted and the `drawerId` prop is\n     * defined, it will be defaulted to `${drawerId}-nav-items`.\n     *\n     * @see {@link #drawerId}\n     * @see {@link Drawers#navItemsId}\n     */\n    navItemsId: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * An optional id to provide to the main toolbar.\n     */\n    toolbarId: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * An id to give the main content. A hidden link is created in the main drawer's header that links to the main\n     * content. This is used for keyboard only users to jump the navigation and jump straight to the content.\n     *\n     * If you provide your own `drawerHeader`, it is suggested to include the link yourself.\n     */\n    contentId: isRequiredForA11y(PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ])),\n\n    /**\n     * An optional style to apply to the surrounding container.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply to the surrounding container.\n     */\n    className: PropTypes.string,\n\n    /**\n     * An optional style to apply to the main toolbar.\n     */\n    toolbarStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the toolbar.\n     */\n    toolbarClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to the main toolbar's title.\n     */\n    toolbarTitleStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the main toolbar's title.\n     */\n    toolbarTitleClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to the drawer.\n     */\n    drawerStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the drawer.\n     */\n    drawerClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to the `List` surrounding the `navItems`.\n     */\n    navStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the `List` surrounding the `navItems`.\n     */\n    navClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to the content. This is the container surrounding whatever\n     * `children` are passed in.\n     */\n    contentStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the content. This is the container surrounding whatever\n     * `children` are passed in.\n     */\n    contentClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to the overlay.\n     */\n    overlayStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the overlay.\n     */\n    overlayClassName: PropTypes.string,\n\n    /**\n     * The children to display in the main content.\n     */\n    children: PropTypes.node,\n\n    /**\n     * Boolean if the `drawerHeader` component should be built if the `drawerHeader` prop is not\n     * passed in.\n     */\n    includeDrawerHeader: PropTypes.bool,\n\n    /**\n     * An optional header to display in the drawer. This will normally be the `Toolbar` component\n     * or any other type of header. You can either use this prop with the `CloseButton` component\n     * when displaying a persistent drawer, or use the `drawerTitle` and `drawerHeaderChildren` prop\n     * to build a toolbar.\n     */\n    drawerHeader: PropTypes.node,\n\n    /**\n     * An optional title to use for the drawer's header toolbar. If the `drawerHeader` prop is defined,\n     * this is invalid.\n     */\n    drawerTitle: invalidIf(PropTypes.node, 'drawerHeader'),\n\n    /**\n     * Any additional children to display in the drawer's header `Toolbar`. If the `drawerHeader` prop is defined,\n     * this is invalid.\n     */\n    drawerHeaderChildren: invalidIf(PropTypes.node, 'drawerHeader'),\n\n    /**\n     * Any additional children to display after the `drawerHeader` and `navItems` list in the drawer.\n     */\n    drawerChildren: PropTypes.node,\n\n    /**\n     * The position for the drawer to be displayed.\n     */\n    position: PropTypes.oneOf(['left', 'right']).isRequired,\n\n    /**\n     * An optional list of elements or props to use to build a navigational list in the drawer.\n     * When the item is an object of props, it will build a `ListItem` component unless a key of\n     * `divider` or `subheader` is set to true. It will then create the Divider or Subheader component\n     * with any other remaining keys.\n     */\n    navItems: PropTypes.arrayOf(PropTypes.oneOfType([\n      PropTypes.element,\n      PropTypes.shape({\n        divider: PropTypes.bool,\n        subheader: PropTypes.bool,\n        primaryText: PropTypes.node,\n      }),\n    ])),\n\n    /**\n     * The drawer type to use for mobile devices.\n     */\n    mobileDrawerType: PropTypes.oneOf([\n      DrawerTypes.TEMPORARY,\n      DrawerTypes.TEMPORARY_MINI,\n    ]).isRequired,\n\n    /**\n     * The drawer type to use for tablets.\n     */\n    tabletDrawerType: PropTypes.oneOf([\n      DrawerTypes.FULL_HEIGHT,\n      DrawerTypes.CLIPPED,\n      DrawerTypes.FLOATING,\n      DrawerTypes.PERSISTENT,\n      DrawerTypes.PERSISTENT_MINI,\n      DrawerTypes.TEMPORARY,\n      DrawerTypes.TEMPORARY_MINI,\n    ]).isRequired,\n\n    /**\n     * The drawer type to use for desktop displays.\n     */\n    desktopDrawerType: PropTypes.oneOf([\n      DrawerTypes.FULL_HEIGHT,\n      DrawerTypes.CLIPPED,\n      DrawerTypes.FLOATING,\n      DrawerTypes.PERSISTENT,\n      DrawerTypes.PERSISTENT_MINI,\n      DrawerTypes.TEMPORARY,\n      DrawerTypes.TEMPORARY_MINI,\n    ]).isRequired,\n\n    /**\n     * An optional drawer type to enforce on all screen sizes. If the drawer type is not\n     * `temporary`, you are required to define the `onMediaTypeChange` prop to handle switching\n     * to temporary when the media matches a mobile device.\n     * ```\n     */\n    drawerType: PropTypes.oneOf([\n      DrawerTypes.FULL_HEIGHT,\n      DrawerTypes.CLIPPED,\n      DrawerTypes.FLOATING,\n      DrawerTypes.PERSISTENT,\n      DrawerTypes.PERSISTENT_MINI,\n      DrawerTypes.TEMPORARY,\n      DrawerTypes.TEMPORARY_MINI,\n    ]),\n\n    /**\n     * The default media match for the drawer. This will be what is displayed on first render.\n     * The component will adjust itself to the current media after it has mounted, but this\n     * is mostly used for server side rendering.\n     */\n    defaultMedia: PropTypes.oneOf(['mobile', 'tablet', 'desktop']),\n\n    /**\n     * The min width to use for a mobile media query. This prop should match the `md-mobile-min-width`\n     * variable.\n     *\n     * The media query for a mobile device will be:\n     *\n     * ```js\n     * window.matchMedia(\n     *   `screen and (min-width: ${mobileMinWidth}px) and (max-width: ${tabletMinWidth - 1}px`\n     * ).matches;\n     * ```\n     */\n    mobileMinWidth: PropTypes.number.isRequired,\n\n    /**\n     * The min width to use for a tablet media query. This prop should match the `md-tablet-min-width`\n     * variable.\n     *\n     * The media query for a tablet device will be:\n     *\n     * ```js\n     * window.matchMedia(\n     *   `screen and (min-width: ${tabletMinWidth}px) and (max-width: ${desktopWidth - 1}px`\n     * ).matches;\n     * ```\n     */\n    tabletMinWidth: PropTypes.number.isRequired,\n\n    /**\n     * The min width to use for a desktop media query. This prop should match the `md-desktop-min-width`\n     * variable.\n     *\n     * The media query for a tablet device will be:\n     *\n     * ```js\n     * window.matchMedia(`screen and (min-width: ${tabletMinWidth}px)`).matches;\n     * ```\n     */\n    desktopMinWidth: PropTypes.number.isRequired,\n\n    /**\n     * An optional function to call when the type of the drawer changes because of the\n     * new media queries. The callback will include the newly selected drawer type\n     * and an object containing the media matches of `mobile`, `tablet`, and `desktop`.\n     *\n     * ```js\n     * this.props.onMediaTypeChange(NavigationDrawer.DrawerTypes.TEMPORARY, {\n     *   mobile: true,\n     *   tablet: false,\n     *   desktop: false,\n     * });\n     * ```\n     */\n    onMediaTypeChange: PropTypes.func,\n\n    /**\n     * Boolean if the temporary or persistent drawers are visible by default.\n     */\n    defaultVisible: PropTypes.bool,\n\n    /**\n     * Boolean if the temporary or persistent drawers are visible. If this is defined,\n     * it will make the component controlled and require the `onVisibilityChange` prop\n     * to be defined.\n     */\n    visible: controlled(PropTypes.bool, 'onVisibilityChange', 'defaultVisible'),\n\n    /**\n     * An optional function to call when the visibility of the drawer changes. The callback\n     * will include the new visibility.\n     *\n     * ```js\n     * onVisibilityChange(false);\n     * ```\n     */\n    onVisibilityChange: PropTypes.func,\n\n    /**\n     * A boolean if the mini drawer's list should be generated from the `navItems` prop. When building\n     * the list, it will extract the `leftIcon` or `leftAvatar` from the `navItem` and then create a\n     * mini `ListItem` containing only that icon or image. Any other event listeners will also be applied.\n     *\n     *\n     * @see {@link #miniDrawerHeader}\n     * @see {@link #miniDrawerChildren}\n     */\n    extractMini: PropTypes.bool,\n\n    /**\n     * An optional header to display in the mini drawer. This will be displayed above the optional\n     * mini nav list that get generated if the `extractMini` prop is `true` and the `miniDrawerChildren`.\n     *\n     * @see {@link #extractMini}\n     */\n    miniDrawerHeader: PropTypes.node,\n\n    /**\n     * Any additional children to display in the mini drawer. This will be displayed after the `miniDrawerHeader`\n     * and the optional mini nav list that gets generated if the `extractMini` prop is `true`.\n     *\n     * @see {@link #extractMini}\n     */\n    miniDrawerChildren: PropTypes.node,\n\n    /**\n     * Boolean if the drawer should automatically close after a nav item has been clicked for `temporary` drawers.\n     */\n    autoclose: PropTypes.bool,\n\n    /**\n     * An optional title to display in the main toolbar. Either the `toolbarTitle` or the `toolbarTitleMenu`\n     * may be defined, not both.\n     */\n    toolbarTitle: invalidIf(PropTypes.node, 'toolbarTitleMenu'),\n\n    /**\n     * An optional select field menu to display in the main toolbar. Either the `toolbarTitle` or the `toolbarTitleMenu`\n     * may be defined, not both.\n     */\n    toolbarTitleMenu: PropTypes.element,\n\n    /**\n     * The theme style for the main toolbar.\n     *\n     * @see {@link Toolbars/Toolbar}\n     */\n    toolbarThemeType: PropTypes.oneOf(['default', 'colored', 'themed']).isRequired,\n\n    /**\n     * Boolean if the toolbar's nav, actions, and title should share the same color.\n     */\n    toolbarSingleColor: PropTypes.bool,\n\n    /**\n     * A boolean if the toolbar should be prominent.\n     */\n    toolbarProminent: PropTypes.bool,\n\n    /**\n     * A boolean if the toolbar's title should be prominent.\n     */\n    toolbarProminentTitle: PropTypes.bool,\n\n    /**\n     * A list of elements or a single element to display to the right of the\n     * toolbar's nav, title, and children.\n     *\n     * @see {@link Toolbars/Toolbar#actions}\n     */\n    toolbarActions: Toolbar.propTypes.actions,\n\n    /**\n     * Any children to display in the toolbar. This will be displayed between the optional title and\n     * actions.\n     */\n    toolbarChildren: Toolbar.propTypes.children,\n\n    /**\n     * An optional zDepth to apply to the toolbar.\n     *\n     * @see {@link Toolbars/Toolbar#zDepth}\n     */\n    toolbarZDepth: PropTypes.number,\n\n    /**\n     * The component to render the content in.\n     */\n    contentComponent: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.string,\n    ]).isRequired,\n\n    /**\n     * An optional footer display after the main content.\n     */\n    footer: PropTypes.node,\n\n    /**\n     * The icon to use to render the button that will toggle the visibility of the\n     * navigation drawer for `temporary` and `persistent` drawers. This is normally a\n     * hamburger menu.\n     */\n    temporaryIcon: PropTypes.element,\n\n    /**\n     * The icon to use to render the button that appears on a persistent drawer's open\n     * header. This is used to create the `CloseButton` for drawers. When a persistent\n     * drawer is closed, the `temporaryIcon` will be used to create a button to open the drawer.\n     *\n     * If the `drawerHeader` prop is defined, you will have to either include the `CloseButton`\n     * in your header manually, or create your own controlled button to close the drawer.\n     */\n    persistentIcon: PropTypes.element,\n\n    /**\n     * The transition name to use when the page's content changes. If you want to disable\n     * transitions, set both the `transitionEnterTimeout` and `transitionLeaveTimeout` props\n     * to a false-ish value. (`null`, `undefined`, or `0`).\n     */\n    transitionName: PropTypes.string.isRequired,\n\n    /**\n     * The transition enter timeout when the page's content changes. If you want to disable\n     * the enter transition, set this to a false-ish value (`null`, `undefined`, or `0`).\n     */\n    transitionEnterTimeout: PropTypes.number,\n\n    /**\n     * The transition leave timeout when the page's content changes. If you want to disable\n     * the leave transition, set this to a false-ish value (`null`, `undefined`, or `0`).\n     */\n    transitionLeaveTimeout: PropTypes.number,\n\n    /**\n     * The transition duration for the drawer when sliding in and out of view.\n     */\n    drawerTransitionDuration: PropTypes.number.isRequired,\n\n    /**\n     * Any additional props to provide to the main content. This will be applied before any of the generated props,\n     * so this should not include `style`, `className`, or `component`.\n     */\n    contentProps: PropTypes.object,\n\n    /**\n     * The label to use for a keyboard accessibility link that jumps all the navigation and allows a user to focus\n     * the main content. This is created in the drawer's header.\n     */\n    jumpLabel: PropTypes.node.isRequired,\n\n    /**\n     * Boolean if the Portal's functionality of rendering in a separate react tree should be applied\n     * to the drawer. The overlay that appears for temporary type drawers will still appear in the\n     * separate subtree.\n     *\n     * @see {@link Helpers/Portal}\n     */\n    portal: PropTypes.bool,\n\n    /**\n     * An optional DOM Node to render the drawer into. The default is to render as\n     * the first child in the `body`.\n     *\n     * > This prop will not be used when the drawer is of the permanent type or `inline` is specified\n     * since the `Portal` component will not be used.\n     */\n    renderNode: PropTypes.object,\n\n    /**\n     * Boolean if the drawer should be rendered as the last child instead of the first child\n     * in the `renderNode` or `body`.\n     *\n     * > This prop will not be used when the drawer is of the permanent type or `inline` is specified\n     * since the `Portal` component will not be used.\n     */\n    lastChild: PropTypes.bool,\n\n    /**\n     * Boolean if the `drawerType` should remain constant across all media. This is really only valid\n     * if the `drawerType` is one of the temporary types.\n     */\n    constantDrawerType: PropTypes.bool,\n\n    menuIconChildren: deprecated(PropTypes.node, 'Use `temporaryIcon` instead'),\n    menuIconClassName: deprecated(PropTypes.string, 'Use `temporaryIcon` instead'),\n    closeIconChildren: deprecated(PropTypes.node, 'Use `persistentIcon` instead'),\n    closeIconClassName: deprecated(PropTypes.string, 'Use `persistentIcon` instead'),\n    temporaryIconChildren: deprecated(PropTypes.node, 'Use the `temporaryIcon` instead'),\n    temporaryIconClassName: deprecated(PropTypes.string, 'Use the `temporaryIcon` instead.'),\n    persistentIconChildren: deprecated(PropTypes.node, 'Use the `persistentIcon` instead'),\n    persistentIconClassName: deprecated(PropTypes.string, 'Use the `persistentIcon` prop instead'),\n    onDrawerChange: deprecated(PropTypes.func, 'Use `onVisibilityChange` or `onMediaTypeChange` instead'),\n    onVisibilityToggle: deprecated(PropTypes.func, 'Use `onVisibilityChange` instead'),\n    contentTransitionName: deprecated(PropTypes.string, 'Use `transitionName` instead'),\n    contentTransitionEnterTimeout: deprecated(PropTypes.number, 'Use `transtionEnterTimeout` instead'),\n    contentTransitionLeaveTimeout: deprecated(PropTypes.number, 'Use `transtionLeaveTimeout` instead'),\n    initialDrawerType: deprecated(\n      PropTypes.oneOf(['mobile', 'tablet', 'desktop']),\n      'Use `defaultMedia` instead'\n    ),\n  };\n\n  static contextTypes = {\n    renderNode: PropTypes.object,\n  };\n\n  static childContextTypes = {\n    closeIcon: PropTypes.element,\n    onCloseClick: PropTypes.func,\n    id: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]).isRequired,\n    label: PropTypes.node.isRequired,\n    renderNode: PropTypes.object,\n  }\n\n  static defaultProps = {\n    autoclose: Drawer.defaultProps.autoclose,\n    contentId: 'main-content',\n    // Defaults to false since it keeps the state of the drawerType in sync and makes the Drawer\n    // controlled. On initial mount without any defaultMedia updates, it would always be considered\n    // temporary\n    constantDrawerType: false,\n    jumpLabel: 'Jump to content',\n    extractMini: true,\n    position: Drawer.defaultProps.position,\n    defaultMedia: Drawer.defaultProps.defaultMedia,\n    mobileDrawerType: Drawer.defaultProps.mobileType,\n    tabletDrawerType: Drawer.defaultProps.tabletType,\n    desktopDrawerType: Drawer.defaultProps.desktopType,\n    mobileMinWidth: Drawer.defaultProps.mobileMinWidth,\n    tabletMinWidth: Drawer.defaultProps.tabletMinWidth,\n    desktopMinWidth: Drawer.defaultProps.desktopMinWidth,\n    includeDrawerHeader: true,\n    contentComponent: 'main',\n    temporaryIcon: <FontIcon>menu</FontIcon>,\n    toolbarThemeType: 'colored',\n    persistentIcon: <FontIcon>arrow_back</FontIcon>,\n    transitionName: 'md-cross-fade',\n    transitionEnterTimeout: 300,\n    drawerTransitionDuration: Drawer.defaultProps.transitionDuration,\n  };\n\n  /**\n   * Determines the current media and returns an object containing matches for `mobile`, `tablet`, `desktop`,\n   * and the current drawer type. This expects a `props` object of the drawer.\n   *\n   * If this is used server side, it will default to only matching mobile.\n   *\n   * @param {Object=} props - The current drawer's prop shape to extract the mobile, tablet, and desktop type/min\n   *    widths. This defaults to the drawer's default props.\n   * @return {Object} an object containing the media matches and the current type to use for the drawer.\n   */\n  static getCurrentMedia(props = NavigationDrawer.defaultProps) {\n    const {\n      mobileDrawerType: mobileType,\n      tabletDrawerType: tabletType,\n      desktopDrawerType: desktopType,\n      constantDrawerType: constantType,\n      ...others\n    } = props;\n\n    return Drawer.getCurrentMedia({ mobileType, tabletType, desktopType, constantType, ...others });\n  }\n\n  constructor(props) {\n    super(props);\n\n    const { defaultMedia, defaultVisible, initialDrawerType } = props;\n\n    this.state = {\n      mobile: initialDrawerType || defaultMedia === 'mobile',\n      tablet: initialDrawerType || defaultMedia === 'tablet',\n      desktop: initialDrawerType || defaultMedia === 'desktop',\n    };\n\n    if (typeof props.drawerType === 'undefined') {\n      this.state.drawerType = props[`${initialDrawerType || defaultMedia}DrawerType`];\n    }\n\n    const type = getField(props, this.state, 'drawerType');\n\n    if (typeof props.visible === 'undefined') {\n      // The logic for determining the visibility is handled by the created mini drawer\n      this.state.visible = isPermanent(type);\n      if (!this.state.visible && typeof defaultVisible !== 'undefined') {\n        this.state.visible = defaultVisible;\n      }\n    }\n  }\n\n  getChildContext() {\n    const {\n      persistentIcon,\n      contentId: id,\n      jumpLabel: label,\n\n      // deprecated\n      persistentIconChildren,\n      persistentIconClassName,\n      closeIconChildren,\n      closeIconClassName,\n    } = this.props;\n\n    return {\n      id,\n      label,\n      closeIcon: getDeprecatedIcon(\n        closeIconClassName || persistentIconClassName,\n        closeIconChildren || persistentIconChildren,\n        persistentIcon,\n      ),\n      onCloseClick: this._toggleVisibility,\n      renderNode: this.context.renderNode,\n    };\n  }\n\n  componentWillUpdate(nextProps, nextState) {\n    const visible = getField(this.props, this.state, 'visible');\n    const nVisible = getField(nextProps, nextState, 'visible');\n    const drawerType = getField(nextProps, nextState, 'drawerType');\n\n    if (!isTemporary(drawerType) && visible !== nVisible) {\n      if (this._timeout) {\n        clearTimeout(this._timeout);\n      }\n\n      this._timeout = setTimeout(() => {\n        this.setState({ contentActive: false });\n      }, nextProps.drawerTransitionDuration);\n\n      this.setState({ contentActive: true });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n  }\n\n  _toggleVisibility = (e) => {\n    const { onVisibilityToggle, onVisibilityChange, onDrawerChange } = this.props;\n    const visible = !getField(this.props, this.state, 'visible');\n    const callback = onVisibilityChange || onVisibilityToggle || onDrawerChange;\n    if (callback) {\n      callback(visible, e);\n    }\n\n    if (typeof this.props.visible === 'undefined') {\n      this.setState({ visible });\n    }\n  };\n\n  _handleVisibility = (visible) => {\n    const { onVisibilityToggle, onVisibilityChange, onDrawerChange } = this.props;\n    const callback = onVisibilityChange || onVisibilityToggle || onDrawerChange;\n    if (callback) {\n      callback(visible);\n    }\n\n    if (typeof this.props.visible === 'undefined') {\n      this.setState({ visible });\n    }\n  };\n\n  _handleTypeChange = (drawerType, mediaState) => {\n    const { onMediaTypeChange } = this.props;\n    let state = mediaState;\n    if (onMediaTypeChange) {\n      onMediaTypeChange(drawerType, mediaState);\n    }\n\n    if (typeof this.props.drawerType === 'undefined') {\n      state = { ...mediaState, drawerType };\n    }\n\n    this.setState(state);\n  };\n\n  render() {\n    const {\n      id,\n      style,\n      className,\n      toolbarStyle,\n      toolbarClassName,\n      drawerStyle,\n      drawerClassName,\n      contentStyle,\n      contentClassName,\n      contentComponent: Content,\n      navItems,\n      children,\n      drawerId,\n      drawerTitle,\n      drawerChildren,\n      drawerHeaderChildren,\n      drawerTransitionDuration,\n      toolbarId,\n      toolbarTitle,\n      toolbarTitleMenu,\n      toolbarTitleStyle,\n      toolbarTitleClassName,\n      toolbarActions,\n      toolbarProminent,\n      toolbarProminentTitle,\n      toolbarThemeType,\n      toolbarSingleColor,\n      toolbarChildren,\n      toolbarZDepth,\n      mobileDrawerType: mobileType,\n      tabletDrawerType: tabletType,\n      desktopDrawerType: desktopType,\n      transitionName,\n      transitionEnterTimeout,\n      transitionLeaveTimeout,\n      extractMini,\n      miniDrawerHeader,\n      miniDrawerChildren,\n      footer,\n      includeDrawerHeader,\n      contentId,\n      contentProps,\n      constantDrawerType,\n      temporaryIcon,\n\n      // deprecated\n      temporaryIconChildren,\n      temporaryIconClassName,\n      menuIconChildren,\n      menuIconClassName,\n      /* eslint-disable no-unused-vars */\n      drawerType: propDrawerType,\n      drawerHeader: propDrawerHeader,\n      renderNode: propRenderNode,\n      jumpLabel,\n      persistentIcon,\n\n      // deprecated\n      onDrawerChange,\n      closeIconChildren,\n      closeIconClassName,\n      persistentIconChildren,\n      persistentIconClassName,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n\n    let { drawerHeader } = this.props;\n    const { desktop, tablet, contentActive } = this.state;\n\n    const drawerType = getField(this.props, this.state, 'drawerType');\n    const visible = getField(this.props, this.state, 'visible');\n    const renderNode = getField(this.props, this.context, 'renderNode');\n    const mini = isMini(drawerType);\n    const temporary = isTemporary(drawerType);\n    const persistent = isPersistent(drawerType);\n    const clipped = drawerType === DrawerTypes.CLIPPED;\n    const floating = drawerType === DrawerTypes.FLOATING;\n\n    const offset = (desktop || tablet ? !temporary && visible : visible);\n    const toolbarRelative = cn({\n      'md-toolbar-relative': !toolbarProminent && !toolbarProminentTitle,\n      'md-toolbar-relative--prominent': toolbarProminent || toolbarProminentTitle,\n    });\n\n    let nav;\n    if (temporary || persistent) {\n      nav = (\n        <Button\n          key=\"nav\"\n          onClick={this._toggleVisibility}\n          disabled={persistent && visible}\n          icon\n          iconEl={getDeprecatedIcon(\n            menuIconClassName || temporaryIconClassName,\n            menuIconChildren || temporaryIconChildren,\n            temporaryIcon\n          )}\n        />\n      );\n    }\n\n    let closeButton;\n    if (persistent) {\n      closeButton = <CloseButton />;\n    }\n\n    if (!drawerHeader && includeDrawerHeader) {\n      drawerHeader = (\n        <Toolbar\n          key=\"drawer-header\"\n          title={drawerTitle}\n          actions={visible && nav ? closeButton : null}\n          className={cn('md-divider-border md-divider-border--bottom', {\n            [toolbarRelative]: clipped || floating,\n          })}\n        >\n          {drawerHeaderChildren}\n          <JumpToContentLink />\n        </Toolbar>\n      );\n    }\n    let miniDrawer;\n    if (mini) {\n      let miniList;\n      if (extractMini) {\n        miniList = navItems.map(toMiniListItem);\n        miniList = <List key=\"mini-nav-items\" className={toolbarRelative}>{miniList}</List>;\n      }\n\n      miniDrawer = (\n        <Drawer key=\"mini-drawer\" type={drawerType} renderNode={renderNode} aria-hidden={visible}>\n          {miniDrawerHeader}\n          {miniList}\n          {miniDrawerChildren}\n        </Drawer>\n      );\n    }\n\n    const desktopOffset = !clipped && !floating && offset;\n\n    return (\n      <div style={style} className={className} id={id}>\n        <Toolbar\n          id={toolbarId}\n          colored={toolbarThemeType === 'colored'}\n          themed={toolbarThemeType === 'themed'}\n          singleColor={toolbarSingleColor}\n          style={toolbarStyle}\n          className={cn({\n            'md-toolbar--over-drawer': clipped || floating || (mini && !visible),\n          }, toolbarClassName)}\n          title={toolbarTitle}\n          titleMenu={toolbarTitleMenu}\n          prominent={toolbarProminent}\n          prominentTitle={toolbarProminentTitle}\n          titleStyle={toolbarTitleStyle}\n          titleClassName={cn({\n            'md-title--drawer-active': contentActive,\n            'md-transition--deceleration': offset && visible,\n            'md-transition--acceleration': offset && !visible,\n            'md-title--permanent-offset': desktopOffset && isPermanent(drawerType),\n            'md-title--persistent-offset': desktopOffset && persistent,\n          }, toolbarTitleClassName)}\n          nav={nav}\n          actions={toolbarActions}\n          fixed\n          zDepth={toolbarZDepth}\n        >\n          {toolbarChildren}\n        </Toolbar>\n        {miniDrawer}\n        <Drawer\n          {...props}\n          id={drawerId}\n          constantType={constantDrawerType}\n          transitionDuration={drawerTransitionDuration}\n          header={drawerHeader}\n          style={drawerStyle}\n          className={drawerClassName}\n          navItems={navItems}\n          renderNode={renderNode}\n          mobileType={mobileType}\n          tabletType={tabletType}\n          desktopType={desktopType}\n          type={getNonMiniType(drawerType)}\n          visible={visible}\n          onVisibilityChange={this._handleVisibility}\n          onMediaTypeChange={this._handleTypeChange}\n        >\n          {drawerChildren}\n        </Drawer>\n        <CSSTransitionGroup\n          {...contentProps}\n          id={contentId}\n          component={Content}\n          transitionName={transitionName}\n          transitionEnter={!!transitionEnterTimeout}\n          transitionEnterTimeout={transitionEnterTimeout}\n          transitionLeave={!!transitionLeaveTimeout}\n          transitionLeaveTimeout={transitionLeaveTimeout}\n          tabIndex={-1}\n          style={contentStyle}\n          className={cn('md-navigation-drawer-content', {\n            'md-navigation-drawer-content--active': contentActive,\n            'md-navigation-drawer-content--inactive': !visible,\n            'md-navigation-drawer-content--prominent-offset': toolbarProminent || toolbarProminentTitle,\n            'md-transition--deceleration': visible,\n            'md-transition--acceleration': !visible,\n            'md-drawer-relative': offset,\n            'md-drawer-relative--mini': mini && (!visible || temporary),\n          }, toolbarRelative, contentClassName)}\n        >\n          {children}\n        </CSSTransitionGroup>\n        {footer}\n      </div>\n    );\n  }\n}\n"]}