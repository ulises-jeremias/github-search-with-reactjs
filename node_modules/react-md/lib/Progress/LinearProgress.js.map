{"version":3,"sources":["../../src/js/Progress/LinearProgress.js"],"names":["LinearProgress","props","className","value","query","centered","isDeterminate","accessibilityProps","role","style","width","propTypes","id","oneOfType","number","string","bool","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAwBqBA,c;;;;;;;;;;;+BAgDV;AAAA,qBACiD,KAAKC,KADtD;AAAA,YACCC,SADD,UACCA,SADD;AAAA,YACYC,KADZ,UACYA,KADZ;AAAA,YACmBC,KADnB,UACmBA,KADnB;AAAA,YAC0BC,QAD1B,UAC0BA,QAD1B;AAAA,YACuCJ,KADvC;;AAEP,YAAMK,gBAAgB,OAAOH,KAAP,KAAiB,QAAvC;;AAEA,YAAMI,qBAAqB;AACzBC,gBAAM,aADmB;AAEzB,2BAAiB,CAFQ;AAGzB,2BAAiB;AAHQ,SAA3B;;AAMA,YAAIC,cAAJ;AACA,YAAIH,aAAJ,EAAmB;AACjBG,kBAAQ,EAAEC,OAAUP,KAAV,MAAF,EAAR;AACAI,6BAAmB,eAAnB,IAAsCJ,KAAtC;AACD;;AAED,eACE;AAAA;AAAA,uBACMF,KADN;AAEE,uBAAW,0BAAG,iCAAH,EAAsC,EAAE,qBAAqBI,QAAvB,EAAtC,EAAyEH,SAAzE;AAFb;AAIE,4DACMK,kBADN;AAEE,mBAAOE,KAFT;AAGE,uBAAW,0BAAG,4BAAH,EAAiC;AAC1C,2CAA6BL,KADa;AAE1C,iDAAmCE,aAFO;AAG1C,mDAAqC,CAACA;AAHI,aAAjC;AAHb;AAJF,SADF;AAgBD;;;;;;AAhFkBN,gB,CAEZW,S,GAAY;AACjB;;;;;;;;;AASAC,QAAI,iCAAkB,oBAAUC,SAAV,CAAoB,CACxC,oBAAUC,MAD8B,EAExC,oBAAUC,MAF8B,CAApB,CAAlB,CAVa;;AAejB;AACA;;;AAGAb,eAAW,oBAAUa,MAnBJ;;AAqBjB;;;;;;;AAOAZ,WAAO,uBAAQ,oBAAUW,MAAlB,EAA0B,CAA1B,EAA6B,GAA7B,CA5BU;;AA8BjB;;;AAGAV,WAAO,oBAAUY,IAjCA;;AAmCjB;;;;AAIAX,cAAU,oBAAUW;AAvCH,G;AAFAhB,gB,CA4CZiB,Y,GAAe;AACpBb,WAAO;AADa,G;oBA5CHJ,c","file":"LinearProgress.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';\nimport between from '../utils/PropTypes/between';\n\n/**\n * There are 3 different types of linear progress bars: `Determinate`,\n * `Indeterminate`, and `Query Indeterminate`.\n *\n * A `Determinate` linear progress bar should be used when you can keep track of the\n * progress and have a percentage complete you can work with. An example would be\n * uploading/downloading a file.\n *\n * An `Indeterminate` linear progress bar should be used when you can not keep track\n * of the progress yourself. An example might be waiting for an API call to complete.\n *\n * A `Query Indeterminate` linear progress bar is used when you are combining\n * `Indeterminate` and `Determinate`. A Linear Progress component can be displayed\n * as a query indeterminate progress bar by adding the prop `query={true}` to the\n * component. Until a progress value is given, it will display the query linear\n * progress animation. Afterwards, it will start the determinate animation of where\n * you manually keep updating the value of the progress.\n */\nexport default class LinearProgress extends PureComponent {\n  /* eslint-disable max-len */\n  static propTypes = {\n    /**\n     * The `id` prop is required for accessibility concerns.\n     * [Progress Bar Role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_progressbar_role)\n     *\n     * > If the progressbar is describing the loading progress of a particular region of a page, the author\n     * __SHOULD__ use aria-describedby to point to the status, and set the aria-busy attribute to true on the\n     * region until it is finished loading. It is not possible for the user to alter the value of a progressbar\n     * because it is always readonly.\n     */\n    id: isRequiredForA11y(PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ])),\n\n    /* eslint-enable max-len */\n    /**\n     * An optional className to apply to the linear progress container.\n     */\n    className: PropTypes.string,\n\n    /**\n     * The current value of the progress. If this value is defined, it will\n     * be converted to a determinate circular progress. The progress will not\n     * advance unless this value changes.\n     *\n     * This value should also be a number between 0 and 100.\n     */\n    value: between(PropTypes.number, 0, 100),\n\n    /**\n     * Boolean if this should be a query indeterminate progress bar.\n     */\n    query: PropTypes.bool,\n\n    /**\n     * Boolean if the Linear Progress should be centered. This\n     * will only work if the `max-width` style is set.\n     */\n    centered: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    query: false,\n  };\n\n  render() {\n    const { className, value, query, centered, ...props } = this.props;\n    const isDeterminate = typeof value === 'number';\n\n    const accessibilityProps = {\n      role: 'progressbar',\n      'aria-valuemin': 0,\n      'aria-valuemax': 100,\n    };\n\n    let style;\n    if (isDeterminate) {\n      style = { width: `${value}%` };\n      accessibilityProps['aria-valuenow'] = value;\n    }\n\n    return (\n      <div\n        {...props}\n        className={cn('md-progress md-progress--linear', { 'md-block-centered': centered }, className)}\n      >\n        <div\n          {...accessibilityProps}\n          style={style}\n          className={cn('md-progress--linear-active', {\n            'md-progress--linear-query': query,\n            'md-progress--linear-determinate': isDeterminate,\n            'md-progress--linear-indeterminate': !isDeterminate,\n          })}\n        />\n      </div>\n    );\n  }\n}\n"]}