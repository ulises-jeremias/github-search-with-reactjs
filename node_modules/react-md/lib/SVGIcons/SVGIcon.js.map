{"version":3,"sources":["../../src/js/SVGIcons/SVGIcon.js"],"names":["SVGIcon","props","_getIds","use","labels","title","desc","titleId","descId","labelledBy","baseId","replace","split","_mergeStyles","style","size","height","width","undefined","state","styles","nextProps","nextState","setState","className","disabled","primary","secondary","error","inherit","titleAttr","ariaLabelledBy","propTitle","propDesc","propStyle","propChildren","children","propTypes","object","string","bool","role","oneOf","oneOfType","element","arrayOf","node","focusable","number","viewBox","xmlns","defaultProps"],"mappings":"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","file":"SVGIcon.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport deprecated from 'react-prop-types/lib/deprecated';\n\nimport themeColors from '../utils/themeColors';\n\n/**\n * The `SVGIcon` component is used for rendering inline SVG icons or sprite-mapped SVGs\n * as an icon.\n */\nexport default class SVGIcon extends PureComponent {\n  static propTypes = {\n    /**\n     * An optional style to apply.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply.\n     */\n    className: PropTypes.string,\n\n    /**\n     * Boolean if the primary theme color should be applied.\n     */\n    primary: PropTypes.bool,\n\n    /**\n     * Boolean if the secondary theme color should be applied.\n     */\n    secondary: PropTypes.bool,\n\n    /**\n     * Boolean if the icon is considered disabled and should inherit the\n     * disabled color.\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * Boolean if the icon is considered errored and should inherit the error color.\n     */\n    error: PropTypes.bool,\n\n    /**\n     * Boolean if the color of the icon should be inherited by parent elements.\n     */\n    inherit: PropTypes.bool,\n\n    /**\n     * The role to apply to the SVG. When using icons, it is generally recommended to leave it as the default\n     * `img` so that it is insured as a graphic.\n     */\n    role: PropTypes.oneOf(['img', 'presentation']),\n\n    /**\n     * This prop is the title attribute to provide to the `<svg>` element itself. This should be used when you\n     * are using a spritesheet that has defined `<title>` with each SVG symbol.\n     */\n    titleAttr: PropTypes.string,\n\n    /**\n     * An optional list of ids to use to label the SVG icon with. This is helpful to add when you use the `title`\n     * and `desc` props as this is used to create ids for those two props. This is super beneficial to screen readers.\n     *\n     * When this is defined, it is a space-delimited string of ids to provide to the title and desc (in order). If\n     * this is omitted and the `use` prop is defined, it will take everything after the `#` sign and append `-title` and\n     * `-desc` as a fallback. Check out the examples for more information about this.\n     *\n     * @see {@link #title}\n     * @see {@link #desc}\n     */\n    'aria-labelledby': PropTypes.string,\n\n    /**\n     * An optional title to give to your SVG icon. This is generally recommended for accessibility when not using\n     * the `use` prop, or your spritemap does not contain `<title>` and `<desc>.\n     *\n     * @see {@link #aria-labelledby}\n     */\n    title: PropTypes.string,\n\n    /**\n     * An optional description to give to your SVG icon. This is generally recommended for accessibility when not using\n     * the `use` prop, or your spritemap does not contain `<title>` and `<desc>.\n     *\n     * @see {@link #aria-labelledby}\n     */\n    desc: PropTypes.string,\n\n    /**\n     * This should be a link to a part of an SVG spritemap. So normally one of the following:\n     * - `'#some-custom-svg'`\n     * - `'/images/spritemap.svg#some-custom-svg'`\n     *\n     * This prop **should not** be used with the `children` prop as only one will be rendered.\n     *\n     * > NOTE: IE **does not support** external SVGs. Please see the demo for more details.\n     */\n    use: PropTypes.string,\n\n    /**\n     * Any `<svg>` children to render to create your icon. This can not be used with the `use` prop.\n     */\n    children: PropTypes.oneOfType([\n      PropTypes.element,\n      PropTypes.arrayOf(PropTypes.element),\n      PropTypes.node,\n    ]),\n\n    /**\n     * Boolean if the SVG should gain the `focusable` attribute. This is disabled by default since IE11\n     * and Edge actually default this to true and keyboard's will tab focus all SVGs.\n     */\n    focusable: PropTypes.bool,\n\n    /**\n     * An optional size to apply to the SVG. This can be used to set both the\n     * `height` and `width` simultaneously. This will be provided as inline styles\n     * since the `height` and `width` are normally controlled by CSS, and CSS has\n     * higher precedence than the `height`/`width` attributes.\n     */\n    size: PropTypes.number,\n\n    /**\n     * The `height` prop should not be used since the `height` and `width` are controlled by CSS and the CSS\n     * has a higher precedence than inline attributes. If you want to set the `height`, it should be done via\n     * CSS or the `size` prop.\n     *\n     * @see {@link #size}\n     */\n    height: deprecated(PropTypes.number, 'Use the `size` prop instead.'),\n\n    /**\n     * The `width` prop should not be used since the `height` and `width` are controlled by CSS and the CSS\n     * has a higher precedence than inline attributes. If you want to set the `height`, it should be done via\n     * CSS or the `size` prop.\n     *\n     * @see {@link #size}\n     */\n    width: deprecated(PropTypes.number, 'Use the `size` prop instead.'),\n\n    /**\n     * The viewBox attribute allows you to specify that a given set of graphics stretch to\n     * fit a particular container element.\n     *\n     * The value of the viewBox attribute is a list of four numbers min-x, min-y, width and\n     * height, separated by white space and/or a comma, which specify a rectangle in user\n     * space which should be mapped to the bounds of the viewport established by the given\n     * element, taking into account attribute preserveAspectRatio.\n     *\n     * Negative values for width or height are not permitted and a value of zero disables\n     * rendering of the element.An optional viewbox for the SVG.\n     *\n     * For example, if the SVG element is 250 (width) by 200 (height) and you provide\n     * `viewBox=\"0 0 25 20\"`, the coordinates inside the SVG will go from the top left corner\n     * (0, 0) to the bottom right (25, 20) and each unit will be worth `10px`.\n     */\n    viewBox: PropTypes.string,\n\n    /**\n     * An optional xmlns string to provide. The `use` prop will not work without this prop\n     * defined.\n     */\n    xmlns: PropTypes.string,\n  };\n\n  static defaultProps = {\n    role: 'img',\n    focusable: false,\n    xmlns: 'http://www.w3.org/2000/svg',\n    viewBox: '0 0 24 24',\n  };\n\n  constructor(props) {\n    super();\n\n    this.state = {\n      styles: this._mergeStyles(props),\n      ...this._getIds(props),\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { style, size, use, title, desc, 'aria-labelledby': labels } = this.props;\n    let nextState;\n    if (style !== nextProps.style || size !== nextProps.size) {\n      nextState = { styles: this._mergeStyles(nextProps) };\n    }\n\n\n    if (title !== nextProps.title || desc !== nextProps.desc ||\n      ((nextProps.title || nextProps.desc) && (use !== nextProps.use || labels !== nextProps['aria-labelledby']))\n    ) {\n      nextState = { ...nextState, ...this._getIds(nextProps) };\n    }\n\n    if (nextState) {\n      this.setState(nextState);\n    }\n  }\n\n  _getIds = ({ use, 'aria-labelledby': labels, title, desc }) => {\n    let titleId = null;\n    let descId = null;\n    let labelledBy = null;\n    if (title || desc) {\n      if (use) {\n        const baseId = use.replace(/.*#/, '');\n        titleId = `${baseId}-title`;\n        descId = `${baseId}-desc`;\n\n        if (title) {\n          labelledBy = `${baseId}-title`;\n        }\n\n        if (desc) {\n          labelledBy = `${labelledBy ? `${labelledBy} ` : ''}${descId}`;\n        }\n      } else if (labels) {\n        [titleId, descId] = labels.split(' ');\n      }\n    }\n\n    return { titleId, descId, labelledBy };\n  };\n\n  _mergeStyles = ({ style, size }) => {\n    if (style && size) {\n      return { height: size, width: size, ...style };\n    } else if (style) {\n      return style;\n    } else if (size) {\n      return { height: size, width: size };\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const { styles, titleId, descId, labelledBy } = this.state;\n    const {\n      className,\n      disabled,\n      use,\n      primary,\n      secondary,\n      error,\n      inherit,\n      titleAttr,\n      'aria-labelledby': ariaLabelledBy,\n      /* eslint-disable no-unused-vars */\n      size,\n      title: propTitle,\n      desc: propDesc,\n      style: propStyle,\n      children: propChildren,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n\n    let { children, title, desc } = this.props;\n    if (!children && use) {\n      children = <use xlinkHref={use} />;\n    }\n\n    if (title) {\n      title = <title id={titleId}>{title}</title>;\n    }\n\n    if (desc) {\n      desc = <desc id={descId}>{desc}</desc>;\n    }\n\n    return (\n      <svg\n        {...props}\n        title={titleAttr}\n        aria-labelledby={ariaLabelledBy || labelledBy}\n        style={styles}\n        className={cn('md-icon', themeColors({\n          disabled,\n          error,\n          inherit,\n          primary,\n          secondary,\n        }, className))}\n      >\n        {title}\n        {desc}\n        {children}\n      </svg>\n    );\n  }\n}\n"]}