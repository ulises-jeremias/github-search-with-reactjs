{"version":3,"sources":["../../src/js/SelectionControls/SelectionControlGroup.js"],"names":["requiredByAllControls","validator","validate","props","propName","component","others","err","invalids","controls","filter","c","map","_","i","length","invalidPrefix","join","invalidMsg","Error","SelectionControlGroup","_setGroup","group","_group","_handleChange","e","value","target","type","checked","values","state","split","index","indexOf","push","splice","onChange","setState","_handleKeyDown","onKeyDown","key","which","keyCode","dec","inc","preventDefault","radios","querySelectorAll","_activeIndex","focus","radio","defaultValue","groupValue","some","controlValue","id","name","label","labelClassName","className","controlStyle","controlClassName","Component","LabelComponent","labelComponent","inline","disabled","propValue","propControls","control","style","_isChecked","controlProps","tabIndex","undefined","ariaLabel","propTypes","object","string","oneOfType","number","oneOf","isRequired","node","func","bool","arrayOf","shape","defaultProps"],"mappings":"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","file":"SelectionControlGroup.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nimport { UP, DOWN, LEFT, RIGHT } from '../constants/keyCodes';\nimport getField from '../utils/getField';\nimport minMaxLoop from '../utils/NumberUtils/minMaxLoop';\nimport controlled from '../utils/PropTypes/controlled';\nimport SelectionControl from './SelectionControl';\n\n/**\n * A custom PropTypes validator to make sure that each `control` in the `controls` prop\n * contains the given `propName`, or the `SelectionControlGroup` has defined that prop.\n */\nfunction requiredByAllControls(validator) {\n  return function validate(props, propName, component, ...others) {\n    let err = validator(props, propName, component, ...others);\n\n    if (!err && typeof props[propName] === 'undefined') {\n      const invalids = props.controls.filter(c => !c[propName]).map((_, i) => i);\n      if (invalids.length) {\n        const invalidPrefix = invalids.length === props.controls.length\n          ? 'All `controls`'\n          : `The \\`controls\\` at indexes \\`${invalids.join('`, `')}\\``;\n        const invalidMsg = `${invalidPrefix} are missing the \\`${propName}\\` prop.`;\n\n        err = new Error(\n          `The \\`${propName}\\` prop is required to make \\`${component}\\` accessible for users of ` +\n          `assistive technologies such as screen readers. Either add the \\`${propName}\\` to the \\`${component}\\` ` +\n          `or add the \\`${propName}\\` to each \\`control\\` in the \\`controls\\` prop. ${invalidMsg}`\n        );\n      }\n    }\n\n    return err;\n  };\n}\n\n\n/**\n * The `SelectionControlGroup` component is used to simplify the generation of a list\n * of `SelectionControl`. Any common props are extracted to this component and passed\n * to the `SelectionControl`.\n */\nexport default class SelectionControlGroup extends PureComponent {\n  static propTypes = {\n    /**\n     * An optional style to apply to the container.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply to the container.\n     */\n    className: PropTypes.string,\n\n    /**\n     * An optional style to apply to every `SelectionControl`. This will be merged with any `style`\n     * that a `control` might have.\n     */\n    controlStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to every `SelectionControl`. This will be merged with any\n     * `className` that a `control` might have.\n     */\n    controlClassName: PropTypes.string,\n\n    /**\n     * An optional base id to apply to each `SelectionControl`. When this is included, the id for\n     * each control will start with this and end with their current index. If this is omitted,\n     * each `control` in the `controls` prop *must* have an `id` prop. This is required for\n     * accessibility.\n     */\n    id: requiredByAllControls(PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ])),\n\n    /**\n     * The type to apply to each `SelectionControl` in the group. Only `checkbox` and `radio` is\n     * valid for a grouping.\n     */\n    type: PropTypes.oneOf(['checkbox', 'radio']).isRequired,\n\n    /**\n     * The component to render the `SelectionControlGroup` in. This can only be a valid dom element\n     * since it relies on the ref callback to add keyboard accessibility.\n     */\n    component: PropTypes.string.isRequired,\n\n    /**\n     * An optional label to display above the group of `SelectionControl`s.\n     */\n    label: PropTypes.node,\n\n    /**\n     * An optional className to apply to the node surrounding the `label` prop.\n     */\n    labelClassName: PropTypes.string,\n\n    /**\n     * The component to render the optional `label` in.\n     */\n    labelComponent: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n    ]).isRequired,\n\n    /**\n     * An optional function to call when any `SelectionControl`'s `checked` state is changed\n     * in the group. If the `type` of the group is `radio`, the `value` of the `checked` radio\n     * will be given in the callback. If the `type` of the group is `checkbox`, a comma-delimited\n     * string of all `checked` checkboxes values will be given.\n     *\n     * ```js\n     * // checkbox\n     * onChange('Alpha,Omega', changeEvent);\n     *\n     * // radio\n     * onChange('Omega', changeEvent);\n     * ```\n     */\n    onChange: PropTypes.func,\n\n    /**\n     * A name to use for each `SelectionControl` in the group. If the `type` of the group is\n     * `checkbox`, the name will be updated to be an array name so that using\n     * `document.querySelector('input[name=\"yourName[]\"].value` will give the comma-delimited\n     * string of checked checkboxes.\n     *\n     * It is either required to have this prop set or every `control` in the `controls` prop to\n     * have the `name` prop.\n     */\n    name: requiredByAllControls(PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ])),\n\n    /**\n     * The default value for the `SelectionControlGroup`. This can either be a single value\n     * or a comma-delimited string of checkbox values. When the `type` of the group is `radio`\n     * and the group is uncontrolled, it is recommended to set this prop. Otherwise the first\n     * value of the `controls` prop will be used as the default value.\n     */\n    defaultValue: PropTypes.oneOfType([\n      PropTypes.bool,\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * An optional value to use for the `SelectionControlGroup`. This will make the component\n     * controlled and require the `onChange` prop to be defined. Like the `defaultValue`, this\n     * can either be a single value or a comma-delimited list of checkbox values.\n     */\n    value: controlled(PropTypes.oneOfType([\n      PropTypes.bool,\n      PropTypes.number,\n      PropTypes.string,\n    ]), 'onChange'),\n\n    /**\n     * A list of objects to create the `SelectionControl` components. The shape of the object\n     * is the `propTypes` of the `SelectionControl` component, except that `value` prop is\n     * now required.\n     *\n     * The `SelectionControl` will inherit any inheritable props from the `SelectionControlGroup`.\n     */\n    controls: PropTypes.arrayOf(PropTypes.shape({\n      key: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string,\n      ]),\n      label: PropTypes.node.isRequired,\n      value: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.number,\n        PropTypes.string,\n      ]).isRequired,\n    })).isRequired,\n\n    /**\n     * Boolean if the `SelectionControl` should be displayed inline.\n     */\n    inline: PropTypes.bool,\n\n    /**\n     * Boolean if all the selection controls in the group are disabled.\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * An optional function to call when the keydown event is triggered.\n     */\n    onKeyDown: PropTypes.func,\n  };\n\n  static defaultProps = {\n    component: 'fieldset',\n    labelComponent: 'legend',\n    labelClassName: 'md-subheading-1',\n  };\n\n  constructor(props) {\n    super(props);\n\n    const radio = props.type === 'radio';\n    this.state = {};\n\n    if (typeof props.value === 'undefined') {\n      let value = props.defaultValue;\n\n      if (typeof value === 'undefined') {\n        value = radio ? props.controls[0].value : '';\n      }\n\n      this.state.value = value;\n    }\n\n    const groupValue = getField(props, this.state, 'value');\n    this._activeIndex = -1;\n    props.controls.some(({ value }, i) => {\n      if (value === groupValue) {\n        this._activeIndex = i;\n      }\n\n      return this._activeIndex > -1;\n    });\n  }\n\n  _isChecked(value, controlValue, type) {\n    return type === 'radio'\n      ? value === controlValue\n      : value.split(',').indexOf(controlValue) !== -1;\n  }\n\n  _setGroup = (group) => {\n    this._group = group;\n  };\n\n  _handleChange = (e) => {\n    let value = e.target.value;\n    if (this.props.type === 'checkbox') {\n      const { checked } = e.target;\n\n      const values = getField(this.props, this.state, 'value').split(',');\n      const index = values.indexOf(value);\n      if (checked) {\n        values.push(value);\n      } else {\n        values.splice(index, 1);\n      }\n\n      value = values.join(',');\n    }\n\n    if (this.props.onChange) {\n      this.props.onChange(value, e);\n    }\n\n    if (typeof this.props.value === 'undefined') {\n      this.setState({ value });\n    }\n  };\n\n  _handleKeyDown = (e) => {\n    if (this.props.onKeyDown) {\n      this.props.onKeyDown(e);\n    }\n\n    const key = e.which || e.keyCode;\n    const dec = key === UP || key === LEFT;\n    const inc = key === DOWN || key === RIGHT;\n    if (!this._group || (!dec && !inc)) {\n      return;\n    }\n\n    e.preventDefault();\n    const radios = this._group.querySelectorAll('*[role=\"radio\"]');\n    this._activeIndex = minMaxLoop(this._activeIndex, 0, radios.length - 1, inc);\n    radios[this._activeIndex].focus();\n    const { value } = this.props.controls[this._activeIndex];\n    if (getField(this.props, this.state, 'value') !== value) {\n      if (this.props.onChange) {\n        this.props.onChange(value, e);\n      }\n\n      if (typeof this.props.value === 'undefined') {\n        this.setState({ value });\n      }\n    }\n  };\n\n  render() {\n    const {\n      id,\n      name,\n      type,\n      label,\n      labelClassName,\n      className,\n      controlStyle,\n      controlClassName,\n      component: Component,\n      labelComponent: LabelComponent,\n      inline,\n      disabled,\n      /* eslint-disable no-unused-vars */\n      value: propValue,\n      controls: propControls,\n      defaultValue,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n\n    const value = getField(this.props, this.state, 'value');\n    const radio = type === 'radio';\n\n    const controls = this.props.controls.map((control, i) => {\n      let style = control.style;\n      if (controlStyle) {\n        style = style ? { ...controlStyle, ...style } : controlStyle;\n      }\n\n      const checked = this._isChecked(value, control.value, type);\n      const controlProps = {\n        id: `${id}${i}`,\n        key: `control${i}`,\n        name: `${name}${type === 'checkbox' ? '[]' : ''}`,\n        type,\n        inline,\n        disabled,\n        checked,\n        tabIndex: !radio || checked || (i === 0 && this._activeIndex === -1) ? undefined : -1,\n        ...control,\n        style,\n        className: cn(controlClassName, control.className),\n      };\n\n      return <SelectionControl {...controlProps} />;\n    });\n\n    let ariaLabel;\n    if (label) {\n      ariaLabel = <LabelComponent className={labelClassName}>{label}</LabelComponent>;\n    }\n\n    return (\n      <Component\n        {...props}\n        ref={this._setGroup}\n        className={cn('md-selection-control-group', className)}\n        onChange={this._handleChange}\n        onKeyDown={radio ? this._handleKeyDown : null}\n      >\n        {ariaLabel}\n        {controls}\n      </Component>\n    );\n  }\n}\n"]}