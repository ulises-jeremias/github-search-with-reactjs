{"version":3,"sources":["../../src/js/Sidebars/Sidebar.js"],"names":["Sidebar","props","isOpen","header","overlay","children","onOverlayClick","align","items","fixed","responsive","propTypes","deprecated","bool","node","className","string","transitionName","transitionEnterTimeout","number","transitionLeaveTimeout","func","oneOf","arrayOf","shape","divider","subheader","primaryText","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAMqBA,O;;;;;;;;;;;+BAgGV;AAAA,qBAWH,KAAKC,KAXF;AAAA,YAELC,MAFK,UAELA,MAFK;AAAA,YAGLC,MAHK,UAGLA,MAHK;AAAA,YAILC,OAJK,UAILA,OAJK;AAAA,YAKLC,QALK,UAKLA,QALK;AAAA,YAMLC,cANK,UAMLA,cANK;AAAA,YAOLC,KAPK,UAOLA,KAPK;AAAA,YAQLC,KARK,UAQLA,KARK;AAAA,YASLC,KATK,UASLA,KATK;AAAA,YAUFR,KAVE;;AAYP,eAAOA,MAAMS,UAAb;;AAEA,eACE;AAAA;AAAA,uBACMT,KADN;AAEE,qBAASC,MAFX;AAGE,gCAAoBI,cAHtB;AAIE,sBAAUE,KAJZ;AAKE,sBAAUD,KALZ;AAME,sBAAUH,OANZ;AAOE,oBAAQD,MAPV;AAQE,oBAAQ,CAACM;AARX;AAUGJ;AAVH,SADF;AAcD;;;;;;AA5HkBL,S,CACZW,S,GAAY;AACjBC,gBAAY,mCACV,oGACA,4CAFU,CADK;;AAMjB;;;AAGAR,aAAS,oBAAUS,IATF;;AAWjB;;;AAGAX,YAAQ,oBAAUW,IAdD;;AAgBjB;;;AAGAJ,WAAO,oBAAUI,IAnBA;;AAqBjB;;;AAGAH,gBAAY,oBAAUG,IAxBL;;AA0BjB;;;AAGAV,YAAQ,oBAAUW,IA7BD;;AA+BjB;;;AAGAT,cAAU,oBAAUS,IAlCH;;AAoCjB;;;AAGAC,eAAW,oBAAUC,MAvCJ;;AAyCjB;;;AAGAC,oBAAgB,oBAAUD,MA5CT;;AA8CjB;;;AAGAE,4BAAwB,oBAAUC,MAjDjB;;AAmDjB;;;AAGAC,4BAAwB,oBAAUD,MAtDjB;;AAwDjB;;;;AAIAb,oBAAgB,oBAAUe,IA5DT;;AA8DjB;;;AAGAd,WAAO,oBAAUe,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,CAAhB,CAjEU;;AAmEjB;;;;;;AAMAd,WAAO,oBAAUe,OAAV,CAAkB,oBAAUC,KAAV,CAAgB;AACvC;;;AAGAC,eAAS,oBAAUZ,IAJoB;;AAMvC;;;AAGAa,iBAAW,oBAAUb,IATkB;;AAWvC;;;AAGAc,mBAAa,oBAAUb;AAdgB,KAAhB,CAAlB;AAzEU,G;AADAd,S,CA4FZ4B,Y,GAAe;AACpBrB,WAAO;AADa,G;oBA5FHP,O","file":"Sidebar.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Drawer from '../Drawers/Drawer';\nimport componentDeprecated from '../utils/PropTypes/componentDeprecated';\n\nexport default class Sidebar extends PureComponent {\n  static propTypes = {\n    deprecated: componentDeprecated(\n      'All the functionality and responsiveness of a `Sidebar` can be handled by the `Drawer` instead.' +\n      ' Switch to the `Drawer` component instead.'\n    ),\n\n    /**\n     * Boolean if the overlay should appear when opened.\n     */\n    overlay: PropTypes.bool,\n\n    /**\n     * Boolean if the sidebar is visible and open.\n     */\n    isOpen: PropTypes.bool,\n\n    /**\n     * Boolean if the sidebar is fixed to the side of the page.\n     */\n    fixed: PropTypes.bool,\n\n    /**\n     * Boolean if sidebar should be responsive.\n     */\n    responsive: PropTypes.bool,\n\n    /**\n     * An optional header to display above the children or list items.\n     */\n    header: PropTypes.node,\n\n    /**\n     * Any children to display after the generated list of items.\n     */\n    children: PropTypes.node,\n\n    /**\n     * An optional className to apply.\n     */\n    className: PropTypes.string,\n\n    /**\n     * The transition name to use for the overlay.\n     */\n    transitionName: PropTypes.string,\n\n    /**\n     * The enter timeout for the overlay transition.\n     */\n    transitionEnterTimeout: PropTypes.number,\n\n    /**\n     * The leave timeout for the overlay transition.\n     */\n    transitionLeaveTimeout: PropTypes.number,\n\n    /**\n     * An optional function to call when the overlay is clicked.\n     * This should normally close the sidebar.\n     */\n    onOverlayClick: PropTypes.func,\n\n    /**\n     * The position to align the sidebar of the screen to.\n     */\n    align: PropTypes.oneOf(['left', 'right']),\n\n    /**\n     * A list of item props to convert into `ListItem`, `Divider`, or\n     * `Subheader` components.\n     *\n     * ##### Item Descriptions\n     */\n    items: PropTypes.arrayOf(PropTypes.shape({\n      /**\n       * Boolean if this item is a divider.\n       */\n      divider: PropTypes.bool,\n\n      /**\n       * Boolean if this item is a subheader.\n       */\n      subheader: PropTypes.bool,\n\n      /**\n       * The primary text to display in a `ListItem` or a `Subheader`.\n       */\n      primaryText: PropTypes.node,\n    })),\n  };\n\n  static defaultProps = {\n    align: 'left',\n  };\n\n  render() {\n    const {\n      isOpen,\n      header,\n      overlay,\n      children,\n      onOverlayClick,\n      align,\n      items,\n      fixed,\n      ...props\n    } = this.props;\n    delete props.responsive;\n\n    return (\n      <Drawer\n        {...props}\n        visible={isOpen}\n        onVisibilityChange={onOverlayClick}\n        navItems={items}\n        position={align}\n        overflay={overlay}\n        header={header}\n        inline={!fixed}\n      >\n        {children}\n      </Drawer>\n    );\n  }\n}\n"]}