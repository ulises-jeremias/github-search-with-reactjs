{"version":3,"sources":["../../src/js/Sliders/ThumbMask.js"],"names":["ThumbMask","props","style","className","thumbLeft","disabled","dragging","maskInked","discrete","leaving","Object","assign","left","propTypes","object","string","bool","isRequired"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAYqBA,S;;;;;;;;;;;+BAYV;AAAA,qBAWH,KAAKC,KAXF;AAAA,YAELC,KAFK,UAELA,KAFK;AAAA,YAGLC,SAHK,UAGLA,SAHK;AAAA,YAILC,SAJK,UAILA,SAJK;AAAA,YAKLC,QALK,UAKLA,QALK;AAAA,YAMLC,QANK,UAMLA,QANK;AAAA,YAOLC,SAPK,UAOLA,SAPK;AAAA,YAQLC,QARK,UAQLA,QARK;AAAA,YASLC,OATK,UASLA,OATK;AAAA,YAUFR,KAVE;;AAaP,eACE,mDACMA,KADN;AAEE,iBAAOS,OAAOC,MAAP,CAAc,EAAd,EAAkBT,KAAlB,EAAyB,EAAEU,MAAMR,SAAR,EAAzB,CAFT;AAGE,qBAAW,0BAAG,uCAAH,EAA4CD,SAA5C,EAAuD;AAChE,yCAA6BG,QADmC;AAEhE,2CAA+BC,SAFiC;AAGhE,8CAAkCF,QAH8B;AAIhE,oDAAwCE,aAAaC,QAJW;AAKhE,sDAA0CA,YAAYC;AALU,WAAvD;AAHb,WADF;AAaD;;;;;;AAtCkBT,W,CACZa,S,GAAY;AACjBX,WAAO,oBAAUY,MADA;AAEjBX,eAAW,oBAAUY,MAFJ;AAGjBV,cAAU,oBAAUW,IAHH;AAIjBZ,eAAW,oBAAUW,MAAV,CAAiBE,UAJX;AAKjBV,eAAW,oBAAUS,IALJ;AAMjBV,cAAU,oBAAUU,IANH;AAOjBR,cAAU,oBAAUQ,IAPH;AAQjBP,aAAS,oBAAUO;AARF,G;oBADAhB,S","file":"ThumbMask.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\n/**\n * The `ThumbMask` component is used for either:\n *\n *  - rendering the ink behind the `Thumb` component when the `Thumb`\n *  has keyboard focus or touch focus\n *  - rendering a underlay to make the `Track` look broken for disabled\n *  Sliders.\n */\nexport default class ThumbMask extends PureComponent {\n  static propTypes = {\n    style: PropTypes.object,\n    className: PropTypes.string,\n    disabled: PropTypes.bool,\n    thumbLeft: PropTypes.string.isRequired,\n    maskInked: PropTypes.bool,\n    dragging: PropTypes.bool,\n    discrete: PropTypes.bool,\n    leaving: PropTypes.bool,\n  };\n\n  render() {\n    const {\n      style,\n      className,\n      thumbLeft,\n      disabled,\n      dragging,\n      maskInked,\n      discrete,\n      leaving,\n      ...props\n    } = this.props;\n\n    return (\n      <span\n        {...props}\n        style={Object.assign({}, style, { left: thumbLeft })}\n        className={cn('md-slider-thumb md-slider-thumb--mask', className, {\n          'md-slider-thumb--dragging': dragging,\n          'md-slider-thumb--mask-inked': maskInked,\n          'md-slider-thumb--mask-disabled': disabled,\n          'md-slider-thumb--discrete-mask-inked': maskInked && discrete,\n          'md-slider-thumb--discrete-mask-leaving': discrete && leaving,\n        })}\n      />\n    );\n  }\n}\n"]}