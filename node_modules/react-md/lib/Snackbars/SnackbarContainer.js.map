{"version":3,"sources":["../../src/js/Snackbars/SnackbarContainer.js"],"names":["CHAINED_TOAST_DELAY","SnackbarContainer","props","visible","toasts","length","state","toast","_initAndToast","nextProps","prevToast","_createLeaveTimer","_createSwapTimer","_initTimeout","clearTimeout","_leaveTimeout","_swapTimeout","_dismissTimeout","multiline","transitionName","transitionEnterTimeout","transitionLeaveTimeout","dismiss","onDismiss","lastChild","portal","propRenderNode","renderNode","context","snackbar","container","_setContainer","propTypes","id","oneOfType","number","string","style","object","className","arrayOf","shape","text","node","isRequired","action","onClick","func","children","label","autohide","bool","autohideTimeout","fab","propName","componentName","location","propFullName","propValue","propType","render","componentNameSafe","propFullNameSafe","Error","defaultProps","contextTypes","_container","_isMultiline","message","document","createElement","classList","add","innerHTML","appendChild","maxWidth","offsetHeight","removeChild","setTimeout","setState","time"],"mappings":"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","file":"SnackbarContainer.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { findDOMNode } from 'react-dom';\nimport CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup';\nimport deprecated from 'react-prop-types/lib/deprecated';\n\nimport getField from '../utils/getField';\nimport TICK from '../constants/CSSTransitionGroupTick';\nimport isInvalidAnimate from './isInvalidAnimate';\nimport Portal from '../Helpers/Portal';\nimport Snackbar from './Snackbar';\n\nconst CHAINED_TOAST_DELAY = 50;\n\n/**\n * The `Snackbar` component is used for displaying a concise and small message to the user about\n * an operation performed.\n *\n * > The main component for the `Snackbar` is actually named the `SnackbarContainer`, so you need\n * to make sure the import is `react-md/lib/Snackbars` or `react-md/lib/Snackbars/SnackbarContainer`.\n * The first import is preferable.\n */\nexport default class SnackbarContainer extends PureComponent {\n  static propTypes = {\n    /**\n     * An id for the Snackbar once a toast has been added and is visible. This is a recommended\n     * prop for accessibility concerns. If it is omitted, the id will become `'snackbar-alert'`\n     * when there is no action on the toast, or `'snackbar-alert-dialog'` when there is an action\n     * on the toast.\n     */\n    id: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * An optional style to apply to the snackbar once it appears.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply to the snackbar once it appears.\n     */\n    className: PropTypes.string,\n\n    /**\n     * An immutable controlled queue of toasts that should appear in the snackbar.\n     * The snackbar will always display the first toast in this list. When the user has\n     * either clicked the action of the toast, or the `autohideTimeout` has been reached,\n     * the `onDismiss` function will be called. The `onDismiss` function should remove the\n     * first toast and return a new list of remaining toasts.\n     *\n     * ```js\n     * let toasts = [];\n     * const onDismiss = () => {\n     *   const [, ...remainingToasts] = toasts;\n     *   toasts = remainingToasts;\n     * };\n     * ```\n     */\n    toasts: PropTypes.arrayOf(PropTypes.shape({\n      /**\n       * The text to display in the toast.\n       */\n      text: PropTypes.node.isRequired,\n\n      /**\n       * An optional action to take. If this value is a string, the `label` for the\n       * button will be this value, Otherwise, all the keys in the action object will\n       * be applied to the `Button`.\n       */\n      action: PropTypes.oneOfType([\n        PropTypes.node,\n        PropTypes.shape({\n          onClick: PropTypes.func,\n          children: PropTypes.node,\n          // Deprecated\n          label: PropTypes.node,\n        }),\n      ]),\n    })).isRequired,\n\n    /**\n     * A function to call that will dismiss a toast. This will automatically be bound to\n     * any toast that has an `action` and it will also be called when the `autohideTimeout`\n     * has been reached.\n     */\n    onDismiss: PropTypes.func.isRequired,\n\n    /**\n     * Boolean if the snackbar's toasts should automatically be dismissed after the\n     * `autohideTimeout` has been reached.\n     */\n    autohide: PropTypes.bool,\n\n    /**\n     * The amount of time before the snackbar should be dequeued and the next toast\n     * should be displayed.\n     */\n    autohideTimeout: PropTypes.number.isRequired,\n\n    /**\n     * The transition name to use for the snackbar appearing and disappearing.\n     */\n    transitionName: PropTypes.string.isRequired,\n\n    /**\n     * The transition time for the snackbar to enter. This should match the `$md-snackbar-transition-time`\n     * sass variable.\n     */\n    transitionEnterTimeout: PropTypes.number.isRequired,\n\n    /**\n     * The transition time for the snackbar to leave. This should match the `$md-snackbar-transition-time`\n     * sass variable.\n     */\n    transitionLeaveTimeout: PropTypes.number.isRequired,\n\n    /**\n     * When the app contains a floating action button that is fixed to the bottom of the screen,\n     * you should set this to be a ref of the floating action button. When a snackbar appears,\n     * the FAB will be moved to not overlay the snackbar.\n     */\n    fab: (props, propName, componentName, location, propFullName) => {\n      const propValue = props[propName];\n      const propType = typeof propValue;\n\n      if (!propValue) {\n        return null;\n      }\n\n      if (propType !== 'object' || typeof propValue.render !== 'function' || isInvalidAnimate(propValue)) {\n        const componentNameSafe = componentName || '<<anonymous>>';\n        const propFullNameSafe = propFullName || propName;\n        return new Error(\n          `Invalid ${location} \\`${propFullNameSafe}\\` supplied to \\`${componentNameSafe}\\`, expected a ` +\n          'ref to a floating `Button` component. This should not be a DOMElement from `findDOMNode` but instead ' +\n          'the React ref object.'\n        );\n      }\n\n      return null;\n    },\n\n    /**\n     * Boolean if the Portal's functionality of rendering in a separate react tree should be applied\n     * to the snackbar.\n     *\n     * @see {@link Helpers/Portal}\n     */\n    portal: PropTypes.bool,\n\n    /**\n     * An optional DOM node to render the Snackbar in. If this is omitted, it will render as the first\n     * child in the `body`.\n     */\n    renderNode: PropTypes.object,\n\n    /**\n     * Boolean if the snackbar should render as the last child in the `renderNode` or `body` instead of\n     * as the first.\n     */\n    lastChild: PropTypes.bool,\n    dismiss: deprecated(PropTypes.func, 'Use `onDismiss` instead'),\n  };\n\n  static defaultProps = {\n    autohide: true,\n    toasts: [],\n    autohideTimeout: 3000,\n    transitionName: 'md-snackbar',\n    transitionEnterTimeout: 300,\n    transitionLeaveTimeout: 300,\n  };\n\n  static contextTypes = {\n    renderNode: PropTypes.object,\n  };\n\n  constructor(props) {\n    super(props);\n\n    const visible = !!props.toasts.length;\n    this.state = {\n      visible,\n      toast: null,\n    };\n  }\n\n  componentDidMount() {\n    const { toasts } = this.props;\n    if (toasts.length) {\n      this._initAndToast(toasts[0]);\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const [toast] = nextProps.toasts;\n    const [prevToast] = this.props.toasts;\n    if (toast === prevToast || toast === this.state.toast) {\n      return;\n    }\n\n    if (!toast) {\n      this._createLeaveTimer();\n    } else if (!this.state.visible) {\n      this._initAndToast(toast);\n    } else {\n      this._createSwapTimer(toast);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this._initTimeout) {\n      clearTimeout(this._initTimeout);\n    }\n\n    if (this._leaveTimeout) {\n      clearTimeout(this._leaveTimeout);\n    }\n\n    if (this._swapTimeout) {\n      clearTimeout(this._swapTimeout);\n    }\n\n    if (this._dismissTimeout) {\n      clearTimeout(this._dismissTimeout);\n    }\n  }\n\n  _setContainer = (container) => {\n    this._container = findDOMNode(container);\n  };\n\n  /**\n   * This function takes in a new toast object and checks if the message will span\n   * multiple lines of text by creating the new snackbar before the `Snackbar` component\n   * gets made, checking the height of the message, and then removing the temporary\n   * snackbar.\n   */\n  _isMultiline = (toast) => {\n    const container = this._container;\n    if (container === null) {\n      return false;\n    }\n\n    const message = document.createElement('p');\n    message.classList.add('md-snackbar--toast');\n    message.innerHTML = toast.text;\n\n    let snackbar;\n    if (toast.action) {\n      message.classList.add('md-snackbar--action');\n\n      snackbar = document.createElement('section');\n      snackbar.className = 'md-snackbar';\n      snackbar.appendChild(message);\n\n      const action = document.createElement('button');\n      action.innerHTML = typeof toast.action === 'string' ? toast.action : toast.action.label;\n      action.className = 'md-btn md-btn--flat md-btn--text md-btn--snackbar';\n      snackbar.appendChild(action);\n    } else {\n      snackbar = message;\n    }\n\n    // Only style we really want from the .md-snackbar\n    snackbar.style.maxWidth = '568px';\n\n    container.appendChild(snackbar);\n    const multiline = message.offsetHeight > 20;\n    container.removeChild(snackbar);\n\n    return multiline;\n  };\n\n  _initAndToast = (toast) => {\n    this._initTimeout = setTimeout(() => {\n      this._initTimeout = null;\n\n      this.setState({ toast, multiline: this._isMultiline(toast) });\n    }, TICK);\n\n    this.setState({ visible: true });\n  };\n\n  _createLeaveTimer = () => {\n    const { transitionLeaveTimeout: time } = this.props;\n    this._leaveTimeout = setTimeout(() => {\n      this._leaveTimeout = null;\n\n      this.setState({ visible: false });\n    }, time + TICK);\n\n    this.setState({ toast: null });\n  };\n\n  _createSwapTimer = (toast) => {\n    this._swapTimeout = setTimeout(() => {\n      this._swapTimeout = null;\n\n      this.setState({ toast, multiline: this._isMultiline(toast) });\n    }, this.props.transitionLeaveTimeout + CHAINED_TOAST_DELAY);\n\n    this.setState({ toast: null });\n  };\n\n  render() {\n    const { visible, toast, multiline } = this.state;\n    const {\n      transitionName,\n      transitionEnterTimeout,\n      transitionLeaveTimeout,\n      dismiss,\n      onDismiss,\n      lastChild,\n      portal,\n      renderNode: propRenderNode, // eslint-disable-line no-unused-vars\n      toasts, // eslint-disable-line no-unused-vars\n      ...props\n    } = this.props;\n    const renderNode = getField(this.props, this.context, 'renderNode');\n\n    let snackbar;\n    if (toast) {\n      snackbar = (\n        <Snackbar\n          {...props}\n          key=\"snackbar\"\n          leaveTimeout={transitionLeaveTimeout}\n          toast={toast}\n          multiline={multiline}\n          onDismiss={onDismiss || dismiss}\n        />\n      );\n    }\n\n    const container = (\n      <CSSTransitionGroup\n        ref={this._setContainer}\n        key=\"container\"\n        className=\"md-snackbar-container\"\n        transitionName={transitionName}\n        transitionEnterTimeout={transitionEnterTimeout}\n        transitionLeaveTimeout={transitionLeaveTimeout}\n      >\n        {snackbar}\n      </CSSTransitionGroup>\n    );\n\n    if (!portal) {\n      return visible ? container : null;\n    }\n\n    return (\n      <Portal visible={visible} renderNode={renderNode} lastChild={lastChild}>\n        {container}\n      </Portal>\n    );\n  }\n}\n"]}