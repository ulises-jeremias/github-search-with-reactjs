{"version":3,"sources":["../../src/js/Tabs/MenuTab.js"],"names":["MenuTab","state","visible","_toggleVisible","e","props","onClick","setState","_handleClose","id","style","className","tabStyle","tabClassName","tabs","label","activeTabIndex","overflowAtIndex","active","tab","map","propTypes","oneOfType","number","string","isRequired","arrayOf","element","shape","divider","bool","subheader","primaryText","node","object","func"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAcqBA,O;;;;;;;;;;;;;;0LAwEnBC,K,GAAQ,EAAEC,SAAS,KAAX,E,QAERC,c,GAAiB,UAACC,CAAD,EAAO;AACtB,YAAI,MAAKC,KAAL,CAAWC,OAAf,EAAwB;AACtB,gBAAKD,KAAL,CAAWC,OAAX,CAAmBF,CAAnB;AACD;;AAED,cAAKG,QAAL,CAAc,EAAEL,SAAS,CAAC,MAAKD,KAAL,CAAWC,OAAvB,EAAd;AACD,O,QAEDM,Y,GAAe,YAAM;AACnB,cAAKD,QAAL,CAAc,EAAEL,SAAS,KAAX,EAAd;AACD,O;;;;;+BAEQ;AAAA,qBAYH,KAAKG,KAZF;AAAA,YAELI,EAFK,UAELA,EAFK;AAAA,YAGLC,KAHK,UAGLA,KAHK;AAAA,YAILC,SAJK,UAILA,SAJK;AAAA,YAKLC,QALK,UAKLA,QALK;AAAA,YAMLC,YANK,UAMLA,YANK;AAAA,YAOLC,IAPK,UAOLA,IAPK;AAAA,YAQLC,KARK,UAQLA,KARK;AAAA,YASLC,cATK,UASLA,cATK;AAAA,YAULC,eAVK,UAULA,eAVK;AAAA,YAWFZ,KAXE;;AAaP,YAAMa,SAASF,kBAAkBC,eAAjC;;AAEA,YAAME,MACJ;AAAA;AAAA,uBACMd,KADN;AAEE,qBAAS,KAAKF,cAFhB;AAGE,mBAAOS,QAHT;AAIE,uBAAW,0BAAG,qBAAH,EAA0BC,YAA1B;AAJb;AAMGE;AANH,SADF;;AAWA,eACE;AAAA;AAAA;AACE,gBAAIN,EADN;AAEE,mBAAOC,KAFT;AAGE,uBAAW,0BAAG,cAAH,EAAmB;AAC5B,gCAAkBQ,MADU;AAE5B,kCAAoB,CAACA;AAFO,aAAnB,EAGRP,SAHQ,CAHb;AAOE,oBAAQQ,GAPV;AAQE,qBAAS,KAAKlB,KAAL,CAAWC,OARtB;AASE,qBAAS,KAAKM;AAThB;AAWGM,eAAKM,GAAL;AAXH,SADF;AAeD;;;;;;AA/HkBpB,S,CACZqB,S,GAAY;AACjB;;;AAGAZ,QAAI,iCAAkB,oBAAUa,SAAV,CAAoB,CACxC,oBAAUC,MAD8B,EAExC,oBAAUC,MAF8B,CAApB,CAAlB,CAJa;;AASjB;;;;;AAKAR,oBAAgB,oBAAUO,MAAV,CAAiBE,UAdhB;;AAgBjB;;;AAGAR,qBAAiB,oBAAUM,MAAV,CAAiBE,UAnBjB;;AAqBjB;;;;;;;;AAQAX,UAAM,oBAAUY,OAAV,CAAkB,oBAAUJ,SAAV,CAAoB,CAC1C,oBAAUK,OADgC,EAE1C,oBAAUH,MAFgC,EAG1C,oBAAUI,KAAV,CAAgB;AACdC,eAAS,oBAAUC,IADL;AAEdC,iBAAW,oBAAUD,IAFP;AAGdE,mBAAa,oBAAUC;AAHT,KAAhB,CAH0C,CAApB,CAAlB,EAQFR,UArCa;;AAuCjB;;;AAGAf,WAAO,oBAAUwB,MA1CA;;AA4CjB;;;AAGAvB,eAAW,oBAAUa,MA/CJ;;AAiDjB;;;AAGAZ,cAAU,oBAAUsB,MApDH;;AAsDjB;;;AAGArB,kBAAc,oBAAUW,MAzDP;;AA2DjB;;;AAGAlB,aAAS,oBAAU6B,IA9DF;;AAgEjB;;;;AAIApB,WAAO,oBAAUkB,IAAV,CAAeR;AApEL,G;oBADAzB,O","file":"MenuTab.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';\n\nimport Menu from '../Menus/Menu';\nimport AccessibleFakeInkedButton from '../Helpers/AccessibleFakeInkedButton';\nimport mapToListParts from '../utils/mapToListParts';\n\n/**\n * The `MenuTab` component is used when there are too many desktop tabs\n * to be displayed without any overflow. If the `Tabs` component is used,\n * this will automatically be included when the `menuOverflow` prop is true.\n */\nexport default class MenuTab extends PureComponent {\n  static propTypes = {\n    /**\n     * An id to give the tab's menu.\n     */\n    id: isRequiredForA11y(PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ])),\n\n    /**\n     * The current active tab index. This is used to determine which list item\n     * is active in the menu, and if the styles for an active tab should be applied\n     * to the menu.\n     */\n    activeTabIndex: PropTypes.number.isRequired,\n\n    /**\n     * An tab index that caused the overflow to happen.\n     */\n    overflowAtIndex: PropTypes.number.isRequired,\n\n    /**\n     * A list of tabs that should be rendered in the menu once opened. This can either\n     * be:\n     *\n     * - a `ListItem`, `Divider`, or `Subheader` component\n     * - a string to use as the `primaryText` for a list item\n     * - an object that defines props to generate a `ListItem`, `Divider`, or `Subheader` component\n     */\n    tabs: PropTypes.arrayOf(PropTypes.oneOfType([\n      PropTypes.element,\n      PropTypes.string,\n      PropTypes.shape({\n        divider: PropTypes.bool,\n        subheader: PropTypes.bool,\n        primaryText: PropTypes.node,\n      }),\n    ])).isRequired,\n\n    /**\n     * An optional style to apply to the menu.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply to the menu.\n     */\n    className: PropTypes.string,\n\n    /**\n     * An optional style to apply to the tab in the menu.\n     */\n    tabStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the tab in the menu.\n     */\n    tabClassName: PropTypes.string,\n\n    /**\n     * An optional function to call when the tab is clicked.\n     */\n    onClick: PropTypes.func,\n\n    /**\n     * The label to display in the tab. This should normally be some text with\n     * a drop down arrow next to it.\n     */\n    label: PropTypes.node.isRequired,\n  };\n\n  state = { visible: false }\n\n  _toggleVisible = (e) => {\n    if (this.props.onClick) {\n      this.props.onClick(e);\n    }\n\n    this.setState({ visible: !this.state.visible });\n  };\n\n  _handleClose = () => {\n    this.setState({ visible: false });\n  };\n\n  render() {\n    const {\n      id,\n      style,\n      className,\n      tabStyle,\n      tabClassName,\n      tabs,\n      label,\n      activeTabIndex,\n      overflowAtIndex,\n      ...props\n    } = this.props;\n    const active = activeTabIndex >= overflowAtIndex;\n\n    const tab = (\n      <AccessibleFakeInkedButton\n        {...props}\n        onClick={this._toggleVisible}\n        style={tabStyle}\n        className={cn('md-tab md-tab--menu', tabClassName)}\n      >\n        {label}\n      </AccessibleFakeInkedButton>\n    );\n\n    return (\n      <Menu\n        id={id}\n        style={style}\n        className={cn('md-menu--tab', {\n          'md-tab--active': active,\n          'md-tab--inactive': !active,\n        }, className)}\n        toggle={tab}\n        visible={this.state.visible}\n        onClose={this._handleClose}\n      >\n        {tabs.map(mapToListParts)}\n      </Menu>\n    );\n  }\n}\n"]}