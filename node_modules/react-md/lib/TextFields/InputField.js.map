{"version":3,"sources":["../../src/js/TextFields/InputField.js"],"names":["InputField","getField","props","rows","_field","getValue","value","focus","blur","_setField","field","className","label","customSize","fullWidth","type","passwordVisible","block","inlineIndicator","maxRows","multiline","Component","ref","disabled","text","propTypes","id","oneOfType","string","number","style","object","placeholder","bool","node"],"mappings":"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","file":"InputField.js","sourcesContent":["import { PureComponent, createElement } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nimport themeColors from '../utils/themeColors';\nimport TextArea from './TextArea';\n\n/**\n * This component either renders a base `input` tag or the `TextArea` component.\n */\nexport default class InputField extends PureComponent {\n  static propTypes = {\n    id: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    style: PropTypes.object,\n    className: PropTypes.string,\n    type: PropTypes.string,\n    placeholder: PropTypes.string,\n    block: PropTypes.bool,\n    disabled: PropTypes.bool,\n    rows: PropTypes.number,\n    maxRows: PropTypes.number,\n    label: PropTypes.node,\n    fullWidth: PropTypes.bool,\n    customSize: PropTypes.string,\n    passwordVisible: PropTypes.bool,\n    inlineIndicator: PropTypes.bool,\n  };\n\n  getField = () => { // eslint-disable-line arrow-body-style\n    return typeof this.props.rows === 'undefined'\n      ? this._field\n      : this._field.getField();\n  };\n\n  getValue = () => {\n    if (typeof this.props.rows === 'undefined') {\n      return this._field.value;\n    }\n\n    return this._field.getValue();\n  };\n\n  focus = () => {\n    this._field.focus();\n  };\n\n  blur = () => {\n    this._field.blur();\n  };\n\n  _setField = (field) => {\n    this._field = field;\n  };\n\n  render() {\n    const {\n      className,\n      rows,\n      label,\n      customSize,\n      fullWidth,\n      type,\n      passwordVisible,\n      block,\n      inlineIndicator,\n      maxRows,\n      ...props\n    } = this.props;\n\n    const multiline = typeof rows !== 'undefined';\n    const Component = multiline ? TextArea : 'input';\n    if (!multiline) {\n      props.type = passwordVisible ? 'text' : type;\n    } else {\n      props.label = label;\n      props.block = block;\n      props.maxRows = maxRows;\n    }\n\n    return createElement(Component, {\n      ...props,\n      rows,\n      ref: this._setField,\n      className: cn('md-text-field', {\n        'md-text-field--inline-indicator': inlineIndicator || (!multiline && type === 'password'),\n        'md-text-field--multiline': multiline,\n        'md-text-field--margin': !block && !multiline && !label,\n        'md-text-field--floating-margin': !block && !multiline && label,\n        [`md-text-field--${customSize}`]: customSize,\n        'md-full-width': fullWidth,\n      }, themeColors({ disabled: props.disabled, text: !props.disabled }, className)),\n    });\n  }\n}\n"]}