{"version":3,"sources":["../../src/js/TextFields/TextField.js"],"names":["DEFAULT_TEXT_FIELD_SIZE","TextField","props","currentLength","_getLength","value","defaultValue","_canvas","width","resize","min","state","active","error","maxLength","floating","_isValued","passwordVisible","passwordInitiallyVisible","v","document","setState","_calcWidth","nextProps","required","nextWidth","disableShrink","_field","blur","icon","disabled","stateful","block","dir","iconEl","only","key","undefined","primary","className","e","id","type","style","inputStyle","inputClassName","fullWidth","customSize","errorText","helpText","helpOnFocus","leftIconStateful","rightIconStateful","passwordIcon","lineDirection","paddedBlock","onDoubleClick","onTouchStart","onTouchMove","onTouchCancel","onTouchEnd","onMouseDown","onMouseUp","onMouseOver","onMouseLeave","ink","inlineIndicator","toolbar","passwordIconChildren","passwordIconClassName","propLabel","label","propPlaceholder","placeholder","propError","propActive","propFloating","propLeftIcon","leftIcon","propRightIcon","rightIcon","onClick","onChange","onBlur","onFocus","adjustMinWidth","propFloatingLabel","floatingLabel","_cloneIcon","_togglePasswordField","el","rightIconed","message","field","_setField","_handleFocus","_handleBlur","_handleChange","divider","children","multiline","rows","_handleContainerClick","getField","propTypes","oneOfType","number","string","object","bool","node","oneOf","isRequired","func","element","maxRows","shape","max","defaultProps","focus","String","length","Math","target"],"mappings":"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","file":"TextField.js","sourcesContent":["import React, { PureComponent, Children, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport deprecated from 'react-prop-types/lib/deprecated';\nimport isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';\n\nimport getField from '../utils/getField';\nimport getTextWidth from '../utils/Positioning/getTextWidth';\nimport controlled from '../utils/PropTypes/controlled';\nimport invalidIf from '../utils/PropTypes/invalidIf';\nimport minNumber from '../utils/PropTypes/minNumber';\nimport addSuffix from '../utils/StringUtils/addSuffix';\nimport FontIcon from '../FontIcons/FontIcon';\nimport getDeprecatedIcon from '../FontIcons/getDeprecatedIcon';\nimport FloatingLabel from './FloatingLabel';\nimport TextFieldMessage from './TextFieldMessage';\nimport PasswordButton from './PasswordButton';\nimport InputField from './InputField';\nimport TextFieldDivider from './TextFieldDivider';\n\nconst DEFAULT_TEXT_FIELD_SIZE = 180;\n\n/**\n * The `TextField` component can either be a single line `input` field or a multiline\n * `textarea` field. `FontIcon`s, messages, and password indicators can also be added\n * to this field.\n *\n * The optional mouse and touch events will be added to the entire container while the\n * text specific events will be added to the `input` or `textarea` tags.\n */\nexport default class TextField extends PureComponent {\n  static propTypes = {\n    /**\n     * The id for a text field. This is required when using the `label` prop for accessibility,\n     * but normally a good idea to include one anyways.\n     */\n    id: isRequiredForA11y(PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ])),\n\n    /**\n     * An optional style to apply to the text field's container.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply to the text field's container.\n     */\n    className: PropTypes.string,\n\n    /**\n     * An optional style to apply to the `input` or `textarea` tag.\n     */\n    inputStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the `input` or `textarea` tag.\n     */\n    inputClassName: PropTypes.string,\n\n    /**\n     * An optional value to apply to the text field. This will make the component\n     * controlled and require the `onChange` prop.\n     */\n    value: controlled(PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]), 'onChange'),\n\n    /**\n     * An optional default value for the text field.\n     */\n    defaultValue: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n\n    /**\n     * Boolean if the text field should be displayed as a `block`. This is equivalent to\n     * the `full width` text field in the Material Design specs. This view will disable\n     * floating labels and remove the text divider from the component.\n     */\n    block: PropTypes.bool,\n\n    /**\n     * Boolean if the `block` text field should include padding to the left and right of\n     * the text field.\n     */\n    paddedBlock: PropTypes.bool,\n\n    /**\n     * Boolean if the text field is currently disabled.\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * An optional label to display with the text field. This will convert the text field\n     * into a floating label text field. You can make it single line by only using the\n     * `placeholder` prop.\n     */\n    label: invalidIf(PropTypes.node, 'block'),\n\n    /**\n     * An optional placeholder text to display in the text field. If there is no `label` prop,\n     * the text field will be displayed as a single line text field. If there is a `label` prop,\n     * this will only be visible when there is no value and the user focused the text field.\n     */\n    placeholder: PropTypes.string,\n\n    /**\n     * The type for the text field. This is one of the most import props for mobile accessibility\n     * as it will update the keyboard for the text type. This does not get applied on multiline\n     * text fields.\n     */\n    type: PropTypes.oneOf([\n      'text',\n      'number',\n      'email',\n      'search',\n      'tel',\n      'url',\n      'password',\n    ]).isRequired,\n\n    /**\n     * An optional function to call when the text field's container triggers the `click` event.\n     */\n    onClick: PropTypes.func,\n\n    /**\n     * An optional function to call when the text field's container triggers the `doubleclick`\n     * event.\n     */\n    onDoubleClick: PropTypes.func,\n\n    /**\n     * An optional function to call when the text field's container triggers the `touchstart`\n     * event.\n     */\n    onTouchStart: PropTypes.func,\n\n    /**\n     * An optional function to call when the text field's container triggers the `touchmove`\n     * event.\n     */\n    onTouchMove: PropTypes.func,\n\n    /**\n     * An optional function to call when the text field's container triggers the `touchcancel`\n     * event.\n     */\n    onTouchCancel: PropTypes.func,\n\n    /**\n     * An optional function to call when the text field's container triggers the `touchend`\n     * event.\n     */\n    onTouchEnd: PropTypes.func,\n\n    /**\n     * An optional function to call when the text field's container triggers the `mousedown`\n     * event.\n     */\n    onMouseDown: PropTypes.func,\n\n    /**\n     * An optional function to call when the text field's container triggers the `mouseup`\n     * event.\n     */\n    onMouseUp: PropTypes.func,\n\n    /**\n     * An optional function to call when the text field's container triggers the `mouseover`\n     * event.\n     */\n    onMouseOver: PropTypes.func,\n\n    /**\n     * An optional function to call when the text field's container triggers the `mouseleave`\n     * event.\n     */\n    onMouseLeave: PropTypes.func,\n\n    /**\n     * An optional onChange function to call. If the `value` prop is defined, this is\n     * required.\n     *\n     * When the value changes in the text field, this will be called with the new text\n     * field's value and the change event.\n     *\n     * ```js\n     * onChange(e.target.value, e);\n     * ```\n     */\n    onChange: PropTypes.func,\n\n    /**\n     * An optional function to call when the text field is blurred.\n     */\n    onBlur: PropTypes.func,\n\n    /**\n     * An optional function to call when the text field is focused.\n     */\n    onFocus: PropTypes.func,\n\n    /**\n     * An optional boolean if the `active` state of the text field can be externally\n     * modified as well. The text field is usually considered active when it gains focus.\n     *\n     * If this prop is set, it will check both the active prop and the active state to\n     * determine if one is true.\n     */\n    active: PropTypes.bool,\n\n    /**\n     * An optional boolean if the `error` state of the text field can be externally\n     * modified as well. The text field is usually considered errored when it is required\n     * and there is no value or the current length of the text field's value is greater\n     * than the `maxLength` prop.\n     *\n     * If this prop is set, it will check both the error prop and the error state to\n     * determine if one is true.\n     */\n    error: PropTypes.bool,\n\n    /**\n     * An optional boolean if the `floating` state of the text field's floating label can be\n     * externally modified as well. The floating state is true when the text field gains focus\n     * or there is a value in the text field.\n     *\n     * If this prop is set, it will check both the floating prop and the floating state to\n     * determine if one is true.\n     */\n    floating: PropTypes.bool,\n\n    /**\n     * Boolean if the text field is required. If the user blurs the text field while there is\n     * no value and it is required, the `error` state will be set to true.\n     */\n    required: PropTypes.bool,\n\n    /**\n     * The direction that the underline should appear from.\n     */\n    lineDirection: PropTypes.oneOf(['left', 'center', 'right']).isRequired,\n\n    /**\n     * An optional icon to place to the left of the text field.\n     */\n    leftIcon: PropTypes.element,\n\n    /**\n     * Boolean if the left icon should be stateful. This means that the icon will\n     * gain the active or error colors with the text field.\n     */\n    leftIconStateful: PropTypes.bool,\n\n    /**\n     * An optional icon to place to the right of the text field.\n     */\n    rightIcon: PropTypes.element,\n\n    /**\n     * Boolean if the right icon should be stateful. This means that the icon will\n     * gain the active or error colors with the text field.\n     */\n    rightIconStateful: PropTypes.bool,\n\n    /**\n     * The icon to use for a password text field.\n     */\n    passwordIcon: PropTypes.element,\n\n    /**\n     * Boolean if the password is initially visible.\n     */\n    passwordInitiallyVisible: PropTypes.bool,\n\n    /**\n     * Boolean if the text field should be displayed as full width.\n     */\n    fullWidth: PropTypes.bool,\n\n    /**\n     * The number of rows for the `multiline` text field. This value must be greater than\n     * or equal to 1. When this value is set, the text field will be converted to a multiline\n     * field.\n     */\n    rows: minNumber(1, false),\n\n    /**\n     * The maximum number of rows for a `multiline` text field. If this value is\n     * `undefined`, `0`, or a number less than `0`, the multiline text field will\n     * infinitely expand.\n     */\n    maxRows: PropTypes.number,\n\n    /**\n     * An optional custom size to apply to the text field. This is used along with\n     * the `$md-text-field-custom-sizes` variable. It basically applies a className of\n     * `md-text-field--NAME`.\n     */\n    customSize: PropTypes.string,\n\n    /**\n     * An optional error text to display below the text field. This will only appear when\n     * the text field has the `error` state through the `error` prop, the current length\n     * of the text field's value is greater than the `maxLength` prop, or the field is\n     * required and the user blurs the text field with no value.\n     */\n    errorText: PropTypes.node,\n\n    /**\n     * An optional help text to display below the text field. This will always be visible\n     * unless the `helpOnFocus` prop is set to true. Otherwise it will appear on focus.\n     */\n    helpText: PropTypes.node,\n\n    /**\n     * Boolean if the help text should display on focus only.\n     */\n    helpOnFocus: PropTypes.bool,\n\n    /**\n     * An optional max length for the text field. This will insert a counter underneath the\n     * text field that appears on focus.\n     */\n    maxLength: PropTypes.number,\n\n    /**\n     * The ink when there is an injectInk above the text field. Used from the SelectField.\n     *\n     * @access private\n     */\n    ink: PropTypes.node,\n\n    /**\n     * An optional element to display inside of the `TextField` to the farthest right. This will\n     * position the indicator absolutely and add some additional padding to the `TextField`.\n     */\n    inlineIndicator: PropTypes.element,\n\n    /**\n     * This prop allows the text field to resize its width to stay between the min and max sizes provided. By\n     * default, the field will expand and collapse based on the amount of text provided. The collapsing can\n     * be disabled by providing `disableShrink` to the configuration object.\n     *\n     * If the `min` prop is not provided, it will default to `180` which is about the same size as a default\n     * text field.\n     */\n    resize: PropTypes.shape({\n      min: PropTypes.number,\n      max: PropTypes.number.isRequired,\n      disableShrink: PropTypes.bool,\n    }),\n\n    /**\n     * Boolean if the TextField is in a toolbar and acting as a title. This will apply additional styles to the\n     * text field to make it look like the toolbar's title.\n     */\n    toolbar: PropTypes.bool,\n\n    passwordIconChildren: deprecated(PropTypes.node, 'Use the `passwordIcon` prop instead'),\n    passwordIconClassName: deprecated(PropTypes.string, 'Use the `passwordIcon` prop instead'),\n    icon: deprecated(PropTypes.node, 'Use the `leftIcon` or `rightIcon` prop instead'),\n    floatingLabel: deprecated(\n      PropTypes.bool,\n      'The `label` prop is now always floating. To create a non-floating text field, only use the `placeholder` prop'\n    ),\n    adjustMinWidth: deprecated(PropTypes.bool, 'Manually add a min width style instead'),\n  };\n\n  static defaultProps = {\n    type: 'text',\n    lineDirection: 'left',\n    passwordIcon: <FontIcon>remove_red_eye</FontIcon>,\n    leftIconStateful: true,\n    rightIconStateful: true,\n    fullWidth: true,\n  };\n\n  constructor(props) {\n    super(props);\n\n    const currentLength = this._getLength(typeof props.value !== 'undefined' ? props.value : props.defaultValue);\n\n    this._canvas = null;\n    let width = null;\n    if (typeof props.resize !== 'undefined') {\n      width = typeof props.resize.min === 'number' ? props.resize.min : DEFAULT_TEXT_FIELD_SIZE;\n    }\n\n    this.state = {\n      active: false,\n      error: props.maxLength ? props.maxLength < currentLength : false,\n      floating: this._isValued(props.defaultValue) || this._isValued(props.value),\n      passwordVisible: props.passwordInitiallyVisible,\n      currentLength,\n      width,\n    };\n  }\n\n  componentWillMount() {\n    const { value, defaultValue, resize } = this.props;\n    const v = typeof value !== 'undefined' ? value : defaultValue;\n    if (!resize || typeof document === 'undefined' || !v) {\n      return;\n    }\n\n    this.setState({ width: this._calcWidth(v) });\n  }\n\n  componentDidMount() {\n    const { value, defaultValue, resize } = this.props;\n    const v = typeof value !== 'undefined' ? value : defaultValue;\n    if (resize && v) {\n      this.setState({ width: this._calcWidth(v) }); // eslint-disable-line react/no-did-mount-set-state\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { value, maxLength, required, resize } = nextProps;\n    if (this.props.value !== value) {\n      let { error, width } = this.state;\n      const currentLength = this._getLength(value);\n      if (required && error) {\n        error = !this._isValued(value);\n      }\n\n      if (maxLength) {\n        error = error || currentLength > maxLength;\n      }\n\n      if (resize) {\n        const nextWidth = this._calcWidth(value);\n        if (!resize.disableShrink || nextWidth > width) {\n          width = nextWidth;\n        }\n      }\n\n      this.setState({\n        error,\n        width,\n        currentLength,\n        floating: this._isValued(value) || (this.state.floating && this.state.active),\n      });\n    }\n  }\n\n  /**\n   * A helper function for getting the specific `input` field or the `textarea` in the `TextField`.\n   * This is accessible if you use `refs`.\n   *\n   * Example:\n   *\n   * ```js\n   * <TextField ref={field => this._field = field;} label=\"Hello\" />;\n   *\n   * this._field.getField(); // `input` node\n   * ```\n   */\n  getField = () => this._field.getField();\n\n  /**\n   * A helper function for focusing the `input` field or the `textarea` in the `TextField`.\n   * This is accessibile if you use `refs`.\n   * Example:\n   *\n   * ```js\n   * <TextField ref={field => this._field = field;} label=\"Hello\" />;\n   *\n   * this._field.focus();\n   * ```\n   */\n  focus = () => {\n    this._field.focus();\n  };\n\n  /**\n   * Gets the current value from the text field. This is used when you have an uncontrolled\n   * text field and simply need the value from a ref callback.\n   *\n   * @return {String} the text field's value\n   */\n  get value() {\n    return this.getField().value;\n  }\n\n\n  /**\n   * A helper function for blurring the `input` field or the `textarea` in the `TextField`.\n   * This is accessible if you use `refs`.\n   * Example:\n   *\n   * ```js\n   * <TextField ref={field => this._field = field;} label=\"Hello\" />;\n   *\n   * this._field.blur();\n   * ```\n   */\n  blur() {\n    this._field.blur();\n  }\n\n  _cloneIcon(icon, active, error, disabled, stateful, block, dir) {\n    if (!icon) {\n      return icon;\n    }\n\n    try {\n      const iconEl = Children.only(icon);\n      return cloneElement(iconEl, {\n        key: iconEl.key || `icon-${dir}`,\n        disabled: stateful ? disabled : undefined,\n        primary: stateful ? !error && active : undefined,\n        error: stateful ? error : undefined,\n        className: cn('md-text-field-icon', {\n          'md-text-field-icon--positioned': !block,\n        }, iconEl.props.className),\n      });\n    } catch (e) {\n      return icon;\n    }\n  }\n\n  _isValued = v => v === 0 || !!v;\n\n  _getLength = (v) => {\n    if (this._isValued(v)) {\n      return String(v).length;\n    }\n\n    return 0;\n  };\n\n  _setField = (field) => {\n    if (field !== null) {\n      this._field = field;\n    }\n  };\n\n  _calcWidth = (value) => {\n    const width = getTextWidth(value, this._field && this._field.getField());\n    if (width === null) {\n      // some error happened, don't do other logic\n      return width;\n    }\n\n    const { max } = this.props.resize;\n    const min = getField(this.props.resize, { min: DEFAULT_TEXT_FIELD_SIZE }, 'min');\n\n    return Math.min(max, Math.max(min, width));\n  };\n\n  _handleContainerClick = (e) => {\n    if (this.props.onClick) {\n      this.props.onClick(e);\n    }\n\n    if (!this.props.disabled) {\n      this.focus();\n    }\n  };\n\n  _handleBlur = (e) => {\n    const { required, maxLength, onBlur } = this.props;\n    if (onBlur) {\n      onBlur(e);\n    }\n\n    const { value } = e.target;\n    const state = {\n      active: false,\n      error: (required && !this._isValued(value)) || (maxLength && String(value).length > maxLength),\n    };\n\n    if (!this.props.block) {\n      state.floating = this._isValued(value);\n    }\n\n    this.setState(state);\n  };\n\n  _handleFocus = (e) => {\n    const { onFocus, block } = this.props;\n    if (onFocus) {\n      onFocus(e);\n    }\n\n    const state = { active: true };\n    if (!block) {\n      state.floating = true;\n    }\n\n    this.setState(state);\n  };\n\n  _handleChange = (e) => {\n    const { onChange, maxLength, required, resize } = this.props;\n    const { value } = e.target;\n    if (onChange) {\n      onChange(e.target.value, e);\n    }\n\n    const currentLength = value.length;\n    let state;\n    if (typeof maxLength !== 'undefined') {\n      state = { currentLength, error: currentLength > maxLength };\n    } else if (required && this.state.error) {\n      state = { error: !currentLength };\n    }\n\n    if (typeof this.props.value === 'undefined' && resize) {\n      const width = this._calcWidth(value);\n      if (!resize.disableShrink || width > this.state.width) {\n        state = state || {};\n        state.width = this._calcWidth(value);\n      }\n    }\n\n    if (state) {\n      this.setState(state);\n    }\n  };\n\n  _togglePasswordField = () => {\n    this.setState({ passwordVisible: !this.state.passwordVisible }, this.focus);\n  };\n\n  render() {\n    const { currentLength, passwordVisible, width } = this.state;\n    const {\n      id,\n      type,\n      style,\n      className,\n      inputStyle,\n      inputClassName,\n      block,\n      fullWidth,\n      required,\n      customSize,\n      maxLength,\n      errorText,\n      helpText,\n      helpOnFocus,\n      disabled,\n      leftIconStateful,\n      rightIconStateful,\n      passwordIcon,\n      lineDirection,\n      paddedBlock,\n      onDoubleClick,\n      onTouchStart,\n      onTouchMove,\n      onTouchCancel,\n      onTouchEnd,\n      onMouseDown,\n      onMouseUp,\n      onMouseOver,\n      onMouseLeave,\n      ink,\n      inlineIndicator,\n      toolbar,\n\n      // deprecated\n      icon,\n      passwordIconChildren,\n      passwordIconClassName,\n      /* eslint-disable no-unused-vars */\n      label: propLabel,\n      placeholder: propPlaceholder,\n      error: propError,\n      active: propActive,\n      floating: propFloating,\n      leftIcon: propLeftIcon,\n      rightIcon: propRightIcon,\n      onClick,\n      onChange,\n      onBlur,\n      onFocus,\n      resize,\n\n      // deprecated\n      adjustMinWidth,\n      floatingLabel: propFloatingLabel,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n\n    let {\n      label,\n      placeholder,\n      error,\n      active,\n      floating,\n      leftIcon,\n      rightIcon,\n    } = this.props;\n    active = active || this.state.active;\n    error = error || this.state.error;\n    floating = floating || this.state.floating;\n\n    if (required) {\n      if (label) {\n        label = addSuffix(label, '*');\n      }\n\n      if (placeholder && !label) {\n        placeholder = addSuffix(placeholder, '*');\n      }\n    }\n\n    if (label && !floating) {\n      placeholder = null;\n    }\n\n    leftIcon = this._cloneIcon(icon || leftIcon, active, error, disabled, leftIconStateful, block, 'left');\n    if (type === 'password' && !disabled) {\n      rightIcon = (\n        <PasswordButton\n          key=\"password-btn\"\n          onClick={this._togglePasswordField}\n          active={active}\n          passwordVisible={passwordVisible}\n          icon={getDeprecatedIcon(passwordIconClassName, passwordIconChildren, passwordIcon)}\n          block={block}\n          floating={!!label}\n        />\n      );\n    } else if (inlineIndicator) {\n      const el = Children.only(inlineIndicator);\n      rightIcon = cloneElement(inlineIndicator, {\n        key: 'icon-right',\n        className: cn('md-text-field-inline-indicator', {\n          'md-text-field-inline-indicator--floating': label,\n          'md-text-field-inline-indicator--block': block,\n        }, el.props.className),\n      });\n    } else {\n      rightIcon = this._cloneIcon(rightIcon, active, error, disabled, rightIconStateful, block, 'right');\n    }\n    const rightIconed = !!rightIcon && type !== 'password' && !inlineIndicator;\n\n    const floatingLabel = (\n      <FloatingLabel\n        key=\"label\"\n        label={label}\n        htmlFor={id}\n        active={active}\n        error={error}\n        floating={floating}\n        customSize={customSize}\n        disabled={disabled}\n        iconOffset={!!leftIcon}\n      />\n    );\n\n    const message = (\n      <TextFieldMessage\n        key=\"message\"\n        active={active}\n        error={error}\n        errorText={errorText}\n        helpText={helpText}\n        helpOnFocus={helpOnFocus}\n        block={block}\n        maxLength={maxLength}\n        leftIcon={!!leftIcon}\n        rightIcon={!!rightIcon}\n        currentLength={currentLength}\n      />\n    );\n\n    const field = (\n      <InputField\n        {...props}\n        key=\"field\"\n        ref={this._setField}\n        id={id}\n        type={type}\n        label={label}\n        style={inputStyle}\n        className={cn({ 'md-text-field--toolbar': toolbar }, inputClassName)}\n        disabled={disabled}\n        customSize={customSize}\n        fullWidth={fullWidth}\n        passwordVisible={passwordVisible}\n        placeholder={placeholder}\n        block={block}\n        onFocus={this._handleFocus}\n        onBlur={this._handleBlur}\n        onChange={this._handleChange}\n        inlineIndicator={!!inlineIndicator}\n      />\n    );\n\n    let divider;\n    if (!block) {\n      divider = (\n        <TextFieldDivider\n          key=\"text-divider\"\n          active={active}\n          error={error}\n          lineDirection={lineDirection}\n        />\n      );\n    }\n\n    let children;\n    if (leftIcon || rightIconed) {\n      children = (\n        <div key=\"icon-divider\" className=\"md-text-field-icon-container\">\n          {leftIcon}\n          <div\n            key=\"divider-container\"\n            className={cn('md-text-field-divider-container', {\n              'md-text-field-divider-container--grow': fullWidth,\n            })}\n          >\n            {field}\n            {divider}\n          </div>\n          {rightIcon}\n        </div>\n      );\n    } else {\n      children = [leftIcon, field, divider, rightIcon];\n    }\n\n    children = [floatingLabel, children, message];\n\n    const multiline = typeof props.rows !== 'undefined';\n    return (\n      <div\n        style={{ width, ...style }}\n        className={cn('md-text-field-container', {\n          'md-inline-block': !fullWidth && !block,\n          'md-full-width': block || fullWidth,\n          'md-text-field-container--disabled': disabled,\n          'md-text-field-container--input': !multiline,\n          'md-text-field-container--input-block': block && !multiline,\n          'md-text-field-container--multiline': multiline,\n          'md-text-field-container--multiline-block': multiline && block,\n          'md-text-field-container--padded-block': block && paddedBlock,\n        }, className)}\n        onClick={this._handleContainerClick}\n        onDoubleClick={onDoubleClick}\n        onMouseOver={onMouseOver}\n        onMouseLeave={onMouseLeave}\n        onMouseDown={onMouseDown}\n        onMouseUp={onMouseUp}\n        onTouchStart={onTouchStart}\n        onTouchEnd={onTouchEnd}\n        onTouchCancel={onTouchCancel}\n        onTouchMove={onTouchMove}\n      >\n        {ink}\n        {children}\n      </div>\n    );\n  }\n}\n"]}