{"version":3,"sources":["../../../src/js/utils/EventUtils/touches.js"],"names":["setTouchEvent","addTouchEvent","removeTouchEvent","supportsPassive","opts","Object","defineProperty","get","window","addEventListener","e","add","el","eventType","callback","options","passive","type"],"mappings":";;;;;;;;;;;;;;;;;;UAuBgBA,a,GAAAA,a;UAiBAC,a,GAAAA,a;UAaAC,gB,GAAAA,gB;;;;;;;;;;;;;;;;AArDhB;AACA,MAAIC,wBAAJ;AACA,MAAI;AACF,QAAMC,OAAOC,OAAOC,cAAP,CAAsB,EAAtB,EAA0B,SAA1B,EAAqC;AAChDC,SADgD,iBAC1C;AACJJ,0BAAkB,IAAlB;AACD;AAH+C,KAArC,CAAb;AAKAK,WAAOC,gBAAP,CAAwB,MAAxB,EAAgC,IAAhC,EAAsCL,IAAtC;AACD,GAPD,CAOE,OAAOM,CAAP,EAAU;AACVP,sBAAkB,KAAlB;AACD;;AAED;;;;;;;;;;AAUO,WAASH,aAAT,CAAuBW,GAAvB,EAA4BC,EAA5B,EAAgCC,SAAhC,EAA2CC,QAA3C,EAAqDC,OAArD,EAA8D;AACnE,WAAOH,IAAMD,MAAM,KAAN,GAAc,QAApB,+BACGE,SADH,EAELC,QAFK,EAGLX,6BAAoBa,SAAS,IAA7B,IAAsCD,OAAtC,IAAkD,KAH7C,CAAP;AAKD;;AAED;;;;;;;;;AASO,WAASd,aAAT,CAAuBW,EAAvB,EAA2BK,IAA3B,EAAiCH,QAAjC,EAA2CC,OAA3C,EAAoD;AACzD,WAAOf,cAAc,IAAd,EAAoBY,EAApB,EAAwBK,IAAxB,EAA8BH,QAA9B,EAAwCC,OAAxC,CAAP;AACD;;AAED;;;;;;;;;AASO,WAASb,gBAAT,CAA0BU,EAA1B,EAA8BK,IAA9B,EAAoCH,QAApC,EAA8CC,OAA9C,EAAuD;AAC5D,WAAOf,cAAc,KAAd,EAAqBY,EAArB,EAAyBK,IAAzB,EAA+BH,QAA/B,EAAyCC,OAAzC,CAAP;AACD","file":"touches.js","sourcesContent":["// https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\nlet supportsPassive;\ntry {\n  const opts = Object.defineProperty({}, 'passive', {\n    get() {\n      supportsPassive = true;\n    },\n  });\n  window.addEventListener('test', null, opts);\n} catch (e) {\n  supportsPassive = false;\n}\n\n/**\n * A helper function for manually setting touch events on elements with the passive\n * option (when it is supported).\n *\n * @param {boolean} add - Boolean if the event listener should be added or removed.\n * @param {HTMLElement} el - The element to add the listener to.\n * @param {String} type - the event type to set. This should be 'start', 'move', or 'end'\n * @param {function} callback - The event listener callback function.\n * @param {Object=} options - any additional options to apply.\n */\nexport function setTouchEvent(add, el, eventType, callback, options) {\n  return el[`${add ? 'add' : 'remove'}EventListener`](\n    `touch${eventType}`,\n    callback,\n    supportsPassive ? { passive: true, ...options } : false\n  );\n}\n\n/**\n * A helper function for manually adding touch events on elements with the passive\n * option (when it is supported).\n *\n * @param {HTMLElement} el - The element to add the listener to.\n * @param {String} type - the event type to set. This should be 'start', 'move', or 'end'\n * @param {function} callback - The event listener callback function.\n * @param {Object=} options - any additional options to apply.\n */\nexport function addTouchEvent(el, type, callback, options) {\n  return setTouchEvent(true, el, type, callback, options);\n}\n\n/**\n * A helper function for manually removing touch events on elements with the passive\n * option (when it is supported).\n *\n * @param {HTMLElement} el - The element to add the listener to.\n * @param {String} type - the event type to set. This should be 'start', 'move', or 'end'\n * @param {function} callback - The event listener callback function.\n * @param {Object=} options - any additional options to apply.\n */\nexport function removeTouchEvent(el, type, callback, options) {\n  return setTouchEvent(false, el, type, callback, options);\n}\n"]}