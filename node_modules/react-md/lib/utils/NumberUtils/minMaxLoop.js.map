{"version":3,"sources":["../../../src/js/utils/NumberUtils/minMaxLoop.js"],"names":["minMaxLoop","current","min","max","increment","next"],"mappings":";;;;;;;;;;;;;;;;;;oBAcwBA,U;AAdxB;;AAEA;;;;;;;;;;;;AAYe,WAASA,UAAT,CAAoBC,OAApB,EAA6BC,GAA7B,EAAkCC,GAAlC,EAAyD;AAAA,QAAlBC,SAAkB,uEAAN,IAAM;;AACtE,QAAIC,OAAOJ,WAAWG,YAAY,CAAZ,GAAgB,CAAC,CAA5B,CAAX;AACA,QAAID,MAAME,IAAV,EAAgB;AACdA,aAAOH,GAAP;AACD,KAFD,MAEO,IAAIG,OAAOH,GAAX,EAAgB;AACrBG,aAAOF,GAAP;AACD;;AAED,WAAOE,IAAP;AACD","file":"minMaxLoop.js","sourcesContent":["/** @module utils/NumberUtils/minMaxLoop */\n\n/**\n * Keeps a number within the min and max values. When the number becomes less\n * than the min, it will loop around and be the max value. When the number is\n * greater than the max, it will loop around and be the min value.\n *\n * @param {Number} current - the current number\n * @param {Number} min - the minimum number allowed\n * @param {Number} max - the maximum number allowed\n * @param {Boolean} increment - boolean if the value should be incremented or decremented by\n *    1.\n * @return {Number} the next number\n */\nexport default function minMaxLoop(current, min, max, increment = true) {\n  let next = current + (increment ? 1 : -1);\n  if (max < next) {\n    next = min;\n  } else if (next < min) {\n    next = max;\n  }\n\n  return next;\n}\n"]}